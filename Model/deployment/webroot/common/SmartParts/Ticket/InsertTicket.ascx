<%@ Control Language="C#" ClassName="InsertTicket" Inherits="Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider" %>
<%@ Register Assembly="Sage.SalesLogix.Client.GroupBuilder" Namespace="Sage.SalesLogix.Client.GroupBuilder" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.PickList" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.DependencyLookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Lookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Timeline" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.HighLevelTypes" Namespace="Sage.SalesLogix.HighLevelTypes" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.Platform.WebPortal" Namespace="Sage.Platform.WebPortal.SmartParts" TagPrefix="SalesLogix" %>
<%//------------------------------------------------------------------------
//This file was generated by a tool.  Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//------------------------------------------------------------------------ %>
<table border="0" cellpadding="1" cellspacing="0" class="formtable">
         <col width="34%" />
            <col width="33%" />
            <col width="33%" />
     <tr>
            <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="lueAccount_lbl" AssociatedControlID="lueAccount" runat="server" Text="<%$ resources: lueAccount.Caption %>" ></asp:Label>
 </div>   
  <div  class="textcontrol lookup"  >
<SalesLogix:LookupControl runat="server" ID="lueAccount" ButtonToolTip="<%$ resources: lueAccount.ButtonToolTip %>" LookupEntityName="Account" LookupEntityTypeName="Sage.SalesLogix.Entities.Account, Sage.SalesLogix.Entities" AutoPostBack="true" Required="true"  >
<LookupProperties>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueAccount.LookupProperties.AccountName.PropertyHeader %>" PropertyName="AccountName" PropertyType="" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueAccount.LookupProperties.Address.City.PropertyHeader %>" PropertyName="Address.City" PropertyType="System.String" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueAccount.LookupProperties.Address.State.PropertyHeader %>" PropertyName="Address.State" PropertyType="System.String" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueAccount.LookupProperties.MainPhone.PropertyHeader %>" PropertyName="MainPhone" PropertyType="" PropertyFormat="Phone"  UseAsResult="False" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueAccount.LookupProperties.Type.PropertyHeader %>" PropertyName="Type" PropertyType="" PropertyFormat="None"  UseAsResult="False" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueAccount.LookupProperties.SubType.PropertyHeader %>" PropertyName="SubType" PropertyType="" PropertyFormat="None"  UseAsResult="False" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueAccount.LookupProperties.Status.PropertyHeader %>" PropertyName="Status" PropertyType="" PropertyFormat="None"  UseAsResult="False" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueAccount.LookupProperties.AccountManager.UserInfo.UserName.PropertyHeader %>" PropertyName="AccountManager.UserInfo.UserName" PropertyType="System.String" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueAccount.LookupProperties.Owner.OwnerDescription.PropertyHeader %>" PropertyName="Owner.OwnerDescription" PropertyType="System.String" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
</LookupProperties>
<LookupPreFilters>
</LookupPreFilters>
</SalesLogix:LookupControl>
  </div>

      </td>
                <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="pklViaCode_lbl" AssociatedControlID="pklViaCode" runat="server" Text="<%$ resources: pklViaCode.Caption %>" ></asp:Label>
 </div>   
   <div  class="textcontrol picklist"  > 
    <SalesLogix:PickListControl runat="server" ID="pklViaCode" PickListId="kSYST0000368" PickListName="Source" NoneEditable="true" AlphaSort="true" StorageMode="ID"  />
  </div>

      </td>
                <td  >
<div class="slxlabel  alignleft checkbox">
  <SalesLogix:SLXCheckBox runat="server" ID="chkClosedOnFirst" CssClass="checkbox "
 Text="<%$ resources: chkClosedOnFirst.Caption %>"  />
</div>
      </td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="lueContact_lbl" AssociatedControlID="lueContact" runat="server" Text="<%$ resources: lueContact.Caption %>" ></asp:Label>
 </div>   
  <div  class="textcontrol lookup"  >
<SalesLogix:LookupControl runat="server" ID="lueContact" ButtonToolTip="<%$ resources: lueContact.ButtonToolTip %>" LookupEntityName="Contact" LookupEntityTypeName="Sage.SalesLogix.Entities.Contact, Sage.SalesLogix.Entities" SeedProperty="Account.Id" AutoPostBack="true"  >
<LookupProperties>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueContact.LookupProperties.NameLF.PropertyHeader %>" PropertyName="NameLF" PropertyType="" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueContact.LookupProperties.AccountName.PropertyHeader %>" PropertyName="AccountName" PropertyType="" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueContact.LookupProperties.Address.City.PropertyHeader %>" PropertyName="Address.City" PropertyType="" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueContact.LookupProperties.Address.State.PropertyHeader %>" PropertyName="Address.State" PropertyType="" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueContact.LookupProperties.WorkPhone.PropertyHeader %>" PropertyName="WorkPhone" PropertyType="" PropertyFormat="Phone"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueContact.LookupProperties.Email.PropertyHeader %>" PropertyName="Email" PropertyType="" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
</LookupProperties>
<LookupPreFilters>
</LookupPreFilters>
</SalesLogix:LookupControl>
  </div>

      </td>
                <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="pklStatusCode_lbl" AssociatedControlID="pklStatusCode" runat="server" Text="<%$ resources: pklStatusCode.Caption %>" ></asp:Label>
 </div>   
   <div  class="textcontrol picklist"  > 
    <SalesLogix:PickListControl runat="server" ID="pklStatusCode" PickListId="kSYST0000375" PickListName="Ticket Status" AutoPostBack="true" AlphaSort="true" StorageMode="ID"  />
  </div>

      </td>
                <td  >
<div class="slxlabel  alignleft checkbox">
  <SalesLogix:SLXCheckBox runat="server" ID="chkSubmitSearch" CssClass="checkbox "
 Text="<%$ resources: chkSubmitSearch.Caption %>"  />
</div>
      </td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="lueContract_lbl" AssociatedControlID="lueContract" runat="server" Text="<%$ resources: lueContract.Caption %>" ></asp:Label>
 </div>   
  <div  class="textcontrol lookup"  >
<SalesLogix:LookupControl runat="server" ID="lueContract" ButtonToolTip="<%$ resources: lueContract.ButtonToolTip %>" LookupEntityName="Contract" LookupEntityTypeName="Sage.SalesLogix.Entities.Contract, Sage.SalesLogix.Entities" SeedProperty="Account.Id" AutoPostBack="true"  >
<LookupProperties>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueContract.LookupProperties.ReferenceNumber.PropertyHeader %>" PropertyName="ReferenceNumber" PropertyType="" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueContract.LookupProperties.ServiceCode.PropertyHeader %>" PropertyName="ServiceCode" PropertyType="SalesLogix.PickList" PropertyFormat="PickList"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueContract.LookupProperties.TypeCode.PropertyHeader %>" PropertyName="TypeCode" PropertyType="SalesLogix.PickList" PropertyFormat="PickList"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueContract.LookupProperties.Remaining.PropertyHeader %>" PropertyName="Remaining" PropertyType="" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="True"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueContract.LookupProperties.StartDate.PropertyHeader %>" PropertyName="StartDate" PropertyType="" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="True"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueContract.LookupProperties.EndingDate.PropertyHeader %>" PropertyName="EndingDate" PropertyType="" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="True"></SalesLogix:LookupProperty>
</LookupProperties>
<LookupPreFilters>
</LookupPreFilters>
</SalesLogix:LookupControl>
  </div>

      </td>
                <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="lueUrgency_lbl" AssociatedControlID="lueUrgency" runat="server" Text="<%$ resources: lueUrgency.Caption %>" ></asp:Label>
 </div>   
  <div  class="textcontrol lookup"  >
<SalesLogix:LookupControl runat="server" ID="lueUrgency" ButtonToolTip="<%$ resources: lueUrgency.ButtonToolTip %>" LookupEntityName="Urgency" LookupEntityTypeName="Sage.SalesLogix.Entities.Urgency, Sage.SalesLogix.Entities" LookupDisplayMode="DropDownList" AutoPostBack="true" AddEmptyListItem="false"  >
<LookupProperties>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueUrgency.LookupProperties.Description.PropertyHeader %>" PropertyName="Description" PropertyType="" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
</LookupProperties>
<LookupPreFilters>
</LookupPreFilters>
</SalesLogix:LookupControl>
  </div>

      </td>
                <td  >
<div class="slxlabel  alignleft checkbox">
  <SalesLogix:SLXCheckBox runat="server" ID="chkAddKnowledge" CssClass="checkbox "
 Text="<%$ resources: chkAddKnowledge.Caption %>"  />
</div>
      </td>
      </tr>
<tr>
            <td rowspan="3"  >
<div class="dependency">
<SalesLogix:DependencyLookupControl runat="server" ID="dplArea"  LabelCssClass="lbl" ButtonToolTip="<%$ resources: dplArea.ButtonToolTip %>"  >
<LookupResultsHeaderStyle BackColor="ActiveCaption" Font-Bold="True" ForeColor="White" />
<LookupDialogStyle BackColor="ButtonFace" />
<LookupResultsStyle CellPadding="4" ForeColor="Black" />
<DependentLookups>
 <SalesLogix:DependentLookup LookupEntityName="IAreaCategoryIssue" LookupEntityTypeName="Sage.Entity.Interfaces.IAreaCategoryIssue, Sage.Entity.Interfaces, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" DropDownDisplayProperty="Area" ParentProperty="" PropertyDisplay="<%$ resources: dplArea.DependentLookups.Area.PropertyDisplay %>" BindingPropertyName="Area">
  </SalesLogix:DependentLookup>
 <SalesLogix:DependentLookup LookupEntityName="IAreaCategoryIssue" LookupEntityTypeName="Sage.Entity.Interfaces.IAreaCategoryIssue, Sage.Entity.Interfaces, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" DropDownDisplayProperty="Category" ParentProperty="Area" PropertyDisplay="<%$ resources: dplArea.DependentLookups.Category.PropertyDisplay %>" BindingPropertyName="Category">
  </SalesLogix:DependentLookup>
 <SalesLogix:DependentLookup LookupEntityName="IAreaCategoryIssue" LookupEntityTypeName="Sage.Entity.Interfaces.IAreaCategoryIssue, Sage.Entity.Interfaces, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" DropDownDisplayProperty="Issue" ParentProperty="Category" PropertyDisplay="<%$ resources: dplArea.DependentLookups.Issue.PropertyDisplay %>" BindingPropertyName="Issue">
  </SalesLogix:DependentLookup>
  </DependentLookups>
  <LookupPreFilters>
        <SalesLogix:LookupPreFilter PropertyName="Ticket" PropertyType="System.Boolean" OperatorCode="="   FilterValue="True"></SalesLogix:LookupPreFilter>
      </LookupPreFilters>
</SalesLogix:DependencyLookupControl>
</div>

      </td>
                <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="dtpNeededByDate_lbl" AssociatedControlID="dtpNeededByDate" runat="server" Text="<%$ resources: dtpNeededByDate.Caption %>" ></asp:Label>
 </div>
   <div  class="textcontrol datepicker"  >
    <SalesLogix:DateTimePicker runat="server" ID="dtpNeededByDate" ButtonToolTip="<%$ resources: dtpNeededByDate.ButtonToolTip %>" />
  </div>

      </td>
                <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="pklPublicAccessCode_lbl" AssociatedControlID="pklPublicAccessCode" runat="server" Text="<%$ resources: pklPublicAccessCode.Caption %>" ></asp:Label>
 </div>   
   <div  class="textcontrol picklist"  > 
    <SalesLogix:PickListControl runat="server" ID="pklPublicAccessCode" PickListId="kSYST0000373" PickListName="Ticket Activity Public Access" NoneEditable="true" AlphaSort="true" StorageMode="ID"  />
  </div>

      </td>
      </tr>
<tr>
                  <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="dtpAssignedDate_lbl" AssociatedControlID="dtpAssignedDate" runat="server" Text="<%$ resources: dtpAssignedDate.Caption %>" ></asp:Label>
 </div>
   <div  class="textcontrol datepicker"  >
    <SalesLogix:DateTimePicker runat="server" ID="dtpAssignedDate" ButtonToolTip="<%$ resources: dtpAssignedDate.ButtonToolTip %>" />
  </div>

      </td>
                <td  >
 <asp:Button runat="server" ID="cmdPunchInOut"
 Text="<%$ resources: cmdPunchInOut.Caption %>" CssClass="slxbutton"  />
   
      </td>
      </tr>
<tr>
                  <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="ownOwner_lbl" AssociatedControlID="ownOwner" runat="server" Text="<%$ resources: ownOwner.Caption %>" ></asp:Label>
 </div>   
   <div  class="textcontrol owner"  > 
<SalesLogix:OwnerControl runat="server" ID="ownOwner" ButtonToolTip="<%$ resources: ownOwner.ButtonToolTip %>" AutoPostBack="true" Types="$qfcontrol.Types"  />
  </div>

      </td>
                <td></td>
      </tr>
<tr>
            <td  colspan="3" >
<div class="mainContentHeader2"><span id="hzsDetails"  >
<asp:Localize runat="server" Text="<%$ resources: hzsDetails.Caption %>"   >Details</asp:Localize></span></div>


      </td>
                  </tr>
<tr>
            <td  colspan="2" >
 <div class="twocollbl alignleft" >
   <asp:Label ID="txtSubject_lbl" AssociatedControlID="txtSubject" runat="server" Text="<%$ resources: txtSubject.Caption %>" ></asp:Label>
 </div>
  <div  class="twocoltextcontrol"   >
<asp:TextBox runat="server" ID="txtSubject" Rows="1"
MaxLength="255"
 />
  </div>

      </td>
                      <td></td>
      </tr>
<tr>
            <td  colspan="2" >
<asp:Panel runat="server" ID="ctrlDescription" CssClass="controlslist "
>
   <div class="twocollbl alignleft" >
   <asp:Label ID="txtDescriptions_lbl" AssociatedControlID="txtDescriptions" runat="server" Text="<%$ resources: txtDescriptions.Caption %>" ></asp:Label>
 </div>
  <div  class="twocoltextcontrol"   >
<asp:TextBox runat="server" ID="txtDescriptions" Rows="4"
TextMode="MultiLine" Columns="40"
 />
  </div>

   <asp:ImageButton runat="server" ID="cmdDescDateStamp"
 ToolTip="<%$ resources: cmdDescDateStamp.ToolTip %>" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=User_Date_Stamp_16x16"  />
 
</asp:Panel>
      </td>
                      <td></td>
      </tr>
<tr>
            <td  colspan="2" >
<asp:Panel runat="server" ID="ctrlResolution" CssClass="controlslist "
>
   <div class="twocollbl alignleft" >
   <asp:Label ID="txtResolution_lbl" AssociatedControlID="txtResolution" runat="server" Text="<%$ resources: txtResolution.Caption %>" ></asp:Label>
 </div>
  <div  class="twocoltextcontrol"   >
<asp:TextBox runat="server" ID="txtResolution" Rows="4"
TextMode="MultiLine" Columns="40"
 />
  </div>

   <asp:ImageButton runat="server" ID="cmdResDateStamp"
 ToolTip="<%$ resources: cmdResDateStamp.ToolTip %>" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=User_Date_Stamp_16x16"  />
 
   <asp:ImageButton runat="server" ID="cmdSpeedSearch"
 ToolTip="<%$ resources: cmdSpeedSearch.ToolTip %>" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Speed_Search_16x16"  />
 
</asp:Panel>
      </td>
                      <td></td>
      </tr>
<tr>
            <td  colspan="3" >
<div class="mainContentHeader2"><span id="hzsComments"  >
<asp:Localize runat="server" Text="<%$ resources: hzsComments.Caption %>"   >Comments</asp:Localize></span></div>


      </td>
                  </tr>
<tr>
            <td  colspan="2" >
<asp:Panel runat="server" ID="ctrlInternal" CssClass="controlslist "
>
   <div class="twocollbl alignleft" >
   <asp:Label ID="txtNotes_lbl" AssociatedControlID="txtNotes" runat="server" Text="<%$ resources: txtNotes.Caption %>" ></asp:Label>
 </div>
  <div  class="twocoltextcontrol"   >
<asp:TextBox runat="server" ID="txtNotes" Rows="4"
TextMode="MultiLine" Columns="40"
 />
  </div>

   <asp:ImageButton runat="server" ID="cmdIntDateStamp"
 ToolTip="<%$ resources: cmdIntDateStamp.ToolTip %>" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=User_Date_Stamp_16x16"  />
 
</asp:Panel>
      </td>
                      <td></td>
      </tr>
</table>
 

 <SalesLogix:SmartPartToolsContainer runat="server" ID="InsertTicket_RTools" ToolbarLocation="right">
    <asp:ImageButton runat="server" ID="cmdSave"
 AlternateText="<%$ resources: cmdSave.Caption %>"  ToolTip="<%$ resources: cmdSave.ToolTip %>" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Save_16x16"  />
   
    <asp:ImageButton runat="server" ID="cmdEmail"
 AlternateText="<%$ resources: cmdEmail.Caption %>"  ToolTip="<%$ resources: cmdEmail.ToolTip %>" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Send_Write_email_16x16"  />
 
    <asp:ImageButton runat="server" ID="cmdAccountService"
 AlternateText="<%$ resources: cmdAccountService.Caption %>"  ToolTip="<%$ resources: cmdAccountService.ToolTip %>" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Account_Service_Information_16x16"  />
 
  <SalesLogix:PageLink ID="lnkInsertTicketHelp" runat="server" LinkType="HelpFileName" ToolTip="<%$ resources: Portal, Help_ToolTip %>" Target="MCWebHelp" NavigateUrl="csrticket.htm" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Help_16x16"></SalesLogix:PageLink> </SalesLogix:SmartPartToolsContainer>

<script runat="server" type="text/C#">
private Sage.Platform.Security.IRoleSecurityService _roleSecurityService;
/// <summary>
/// Gets or sets the role security service.
/// </summary>
/// <value>The role security service.</value>
[Sage.Platform.Application.ServiceDependency]
public Sage.Platform.Security.IRoleSecurityService RoleSecurityService
{
   set
      {
         _roleSecurityService = Sage.Platform.Application.ApplicationContext.Current.Services.Get<Sage.Platform.Security.IRoleSecurityService>(true);
      }
      get
      {
         return _roleSecurityService;
      }
}

public override Type EntityType
{
	get { return typeof(Sage.Entity.Interfaces.ITicket); }
}

 

protected override void OnAddEntityBindings() { 
                    // lueAccount.LookupResultValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding lueAccountLookupResultValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Account", lueAccount, "LookupResultValue", "", null);
        BindingSource.Bindings.Add(lueAccountLookupResultValueBinding);
                       // pklViaCode.PickListValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding pklViaCodePickListValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("ViaCode", pklViaCode, "PickListValue", "", null);
        BindingSource.Bindings.Add(pklViaCodePickListValueBinding);
                       // chkClosedOnFirst.Checked Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding chkClosedOnFirstCheckedBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("ClosedOnFirst", chkClosedOnFirst, "Checked", "", null);
        BindingSource.Bindings.Add(chkClosedOnFirstCheckedBinding);
                       // lueContact.LookupResultValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding lueContactLookupResultValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Contact", lueContact, "LookupResultValue", "", null);
        BindingSource.Bindings.Add(lueContactLookupResultValueBinding);
                 // lueContact.SeedValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding lueContactSeedValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Account.Id", lueContact, "SeedValue");
        lueContactSeedValueBinding.IgnoreFLSDisabling = true;
        
        BindingSource.Bindings.Add(lueContactSeedValueBinding);
                       // pklStatusCode.PickListValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding pklStatusCodePickListValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("StatusCode", pklStatusCode, "PickListValue", "", null);
        BindingSource.Bindings.Add(pklStatusCodePickListValueBinding);
                       // chkSubmitSearch.Checked Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding chkSubmitSearchCheckedBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("SubmitSearch", chkSubmitSearch, "Checked", "", null);
        BindingSource.Bindings.Add(chkSubmitSearchCheckedBinding);
                       // lueContract.LookupResultValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding lueContractLookupResultValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Contract", lueContract, "LookupResultValue", "", null);
        BindingSource.Bindings.Add(lueContractLookupResultValueBinding);
                 // lueContract.SeedValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding lueContractSeedValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Account.Id", lueContract, "SeedValue");
        lueContractSeedValueBinding.IgnoreFLSDisabling = true;
        
        BindingSource.Bindings.Add(lueContractSeedValueBinding);
                       // lueUrgency.LookupResultValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding lueUrgencyLookupResultValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Urgency", lueUrgency, "LookupResultValue", "", null);
        BindingSource.Bindings.Add(lueUrgencyLookupResultValueBinding);
                       // chkAddKnowledge.Checked Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding chkAddKnowledgeCheckedBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("AddKnowledge", chkAddKnowledge, "Checked", "", null);
        BindingSource.Bindings.Add(chkAddKnowledgeCheckedBinding);
      BindingSource.AddBindingProvider(dplArea as Sage.Platform.EntityBinding.IEntityBindingProvider);
                    // dplArea.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding dplAreaTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Area", dplArea, "Text", "", null);
        BindingSource.Bindings.Add(dplAreaTextBinding);
                       // dtpNeededByDate.DateTimeValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding dtpNeededByDateDateTimeValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("NeededByDate", dtpNeededByDate, "DateTimeValue", "", null);
        BindingSource.Bindings.Add(dtpNeededByDateDateTimeValueBinding);
                       // pklPublicAccessCode.PickListValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding pklPublicAccessCodePickListValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("PublicAccessCode", pklPublicAccessCode, "PickListValue", "", null);
        BindingSource.Bindings.Add(pklPublicAccessCodePickListValueBinding);
                       // dtpAssignedDate.DateTimeValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding dtpAssignedDateDateTimeValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("AssignedDate", dtpAssignedDate, "DateTimeValue", "", null);
        BindingSource.Bindings.Add(dtpAssignedDateDateTimeValueBinding);
       
                        // ownOwner.LookupResultValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding ownOwnerLookupResultValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("AssignedTo", ownOwner, "LookupResultValue", "", null);
        BindingSource.Bindings.Add(ownOwnerLookupResultValueBinding);
       
                        // txtSubject.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtSubjectTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Subject", txtSubject, "Text");
        BindingSource.Bindings.Add(txtSubjectTextBinding);
       
                        // txtDescriptions.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtDescriptionsTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("TicketProblem.Notes", txtDescriptions, "Text");
        BindingSource.Bindings.Add(txtDescriptionsTextBinding);
       
        
                        // txtResolution.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtResolutionTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("TicketSolution.Notes", txtResolution, "Text");
        BindingSource.Bindings.Add(txtResolutionTextBinding);
       
        
        
        
                        // txtNotes.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtNotesTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Notes", txtNotes, "Text");
        BindingSource.Bindings.Add(txtNotesTextBinding);
       
     
   
            }
	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   
protected void lueAccount_ChangeAction(object sender, EventArgs e) {
      object[] objarray = new object[] { this.BindingSource.Current };
     Sage.Platform.EntityFactory.Execute<Sage.Entity.Interfaces.ITicket>("Ticket.OnAccountChanged", objarray);
  
}
protected void lueContact_ChangeAction(object sender, EventArgs e) {
      object[] objarray = new object[] { this.BindingSource.Current };
     Sage.Platform.EntityFactory.Execute<Sage.Entity.Interfaces.ITicket>("Ticket.OnContactChanged", objarray);
  
}
protected void lueContract_ChangeAction(object sender, EventArgs e) {
      object[] objarray = new object[] { this.BindingSource.Current };
     Sage.Platform.EntityFactory.Execute<Sage.Entity.Interfaces.ITicket>("Ticket.ValidateAssignedContract", objarray);
          lueContract_ChangeActionBRC(sender, e);
    
  
}
protected void lueContract_ChangeActionBRC(object sender, EventArgs e) {
  Sage.Platform.WebPortal.SmartParts.WebActionEventArgs args = e as Sage.Platform.WebPortal.SmartParts.WebActionEventArgs;
  if (args != null && !string.IsNullOrEmpty(args.PassThroughObject.ToString()) && DialogService != null) {
    DialogService.ShowMessage(args.PassThroughObject.ToString());
  } 

}
protected void cmdPunchInOut_ClickAction(object sender, EventArgs e) {
Sage.Entity.Interfaces.ITicket entity = (Sage.Entity.Interfaces.ITicket) this.BindingSource.Current;
if (entity.DoesTicketHaveAccount()) {
            cmdPunchInOut_ClickActionS(sender, e);
      
      }
else {
            cmdPunchInOut_ClickActionF(sender, e);
      
      }
}
protected void cmdPunchInOut_ClickActionS(object sender, EventArgs e) {
  Sage.Entity.Interfaces.ITicket _entity = BindingSource.Current as Sage.Entity.Interfaces.ITicket;
  if (_entity != null) 
  {
    object _parent = GetParentEntity(); 
    if (DialogService.ChildInsertInfo != null) 
    {
      if (_parent != null) 
      {
        if (DialogService.ChildInsertInfo.ParentReferenceProperty != null) 
        {
          DialogService.ChildInsertInfo.ParentReferenceProperty.SetValue(_entity, _parent, null);
        }        
      }
    }
    bool shouldSave = true;
    Sage.Platform.WebPortal.EntityPage page = Page as Sage.Platform.WebPortal.EntityPage;
	if (page != null)
	{
       if(IsInDialog() && page.ModeId.ToUpper() == "INSERT")
       {
         shouldSave = false;
       }
	}

    if(shouldSave)
    {
       _entity.Save();
    }
    
    if (_parent != null)
    {
        if (DialogService.ChildInsertInfo != null)
        {
           if (DialogService.ChildInsertInfo.ParentsCollectionProperty != null) 
           {
              System.Reflection.MethodInfo _add = DialogService.ChildInsertInfo.ParentsCollectionProperty.PropertyType.GetMethod("Add");
              _add.Invoke(DialogService.ChildInsertInfo.ParentsCollectionProperty.GetValue(_parent, null), new object[] { _entity });
           }
        }
     }        
  }
          cmdPunchInOut_ClickActionSBRC(sender, e);
    
  
}
protected void cmdPunchInOut_ClickActionF(object sender, EventArgs e) {
  if (DialogService != null) {
    DialogService.ShowMessage(base.GetLocalResourceObject("7dd7721e-03d5-4af0-93cd-b8075c391afd.Message").ToString());
  }

}
protected void cmdPunchInOut_ClickActionSBRC(object sender, EventArgs e) {
      object[] objarray = new object[] { this.BindingSource.Current };
     Sage.Platform.EntityFactory.Execute<Sage.Entity.Interfaces.ITicket>("Ticket.PunchInOut", objarray);
          cmdPunchInOut_ClickActionSBRCBRC(sender, e);
    
  
}
protected void cmdPunchInOut_ClickActionSBRCBRC(object sender, EventArgs e) {
      Response.Redirect(string.Format("Ticket.aspx?entityId={0}", (this.BindingSource.Current as Sage.Platform.ComponentModel.IComponentReference).Id));
  
}
protected void ownOwner_ChangeAction(object sender, EventArgs e) {
      object[] objarray = new object[] { this.BindingSource.Current };
     object passthru =  Sage.Platform.EntityFactory.Execute<Sage.Entity.Interfaces.ITicket>("Ticket.ValidateAssignToUser", objarray);
            if (passthru != null) {
        e = new Sage.Platform.WebPortal.SmartParts.WebActionEventArgs(passthru);
      }
        ownOwner_ChangeActionBRC(sender, e);
    
  
}
protected void ownOwner_ChangeActionBRC(object sender, EventArgs e) {
  Sage.Platform.WebPortal.SmartParts.WebActionEventArgs args = e as Sage.Platform.WebPortal.SmartParts.WebActionEventArgs;
  if (args != null && !string.IsNullOrEmpty(args.PassThroughObject.ToString()) && DialogService != null) {
    DialogService.ShowMessage(args.PassThroughObject.ToString());
  } 

}
protected void cmdDescDateStamp_ClickAction(object sender, EventArgs e) {
      object[] objarray = new object[] { this.BindingSource.Current };
     Sage.Platform.EntityFactory.Execute<Sage.Entity.Interfaces.ITicket>("Ticket.AddTicketProblemTimeStamp", objarray);
  
}
protected void cmdResDateStamp_ClickAction(object sender, EventArgs e) {
      object[] objarray = new object[] { this.BindingSource.Current };
     Sage.Platform.EntityFactory.Execute<Sage.Entity.Interfaces.ITicket>("Ticket.AddTicketSolutionTimeStamp", objarray);
  
}
protected void cmdSpeedSearch_ClickAction(object sender, EventArgs e) {
if (DialogService != null)
{
    DialogService.SetSpecs(200, 200, 600, 900, "SpeedSearch", "", true);
    DialogService.DialogParameters.Add("ChildName", "TicketSolution");
    DialogService.DialogParameters.Add("EntityProperty", "Notes");
    DialogService.ShowDialog();
}
}
protected void cmdIntDateStamp_ClickAction(object sender, EventArgs e) {
      object[] objarray = new object[] { this.BindingSource.Current };
     Sage.Platform.EntityFactory.Execute<Sage.Entity.Interfaces.ITicket>("Ticket.AddTicketInternalTimeStamp", objarray);
  
}
protected void cmdSave_ClickAction(object sender, EventArgs e) {
  Sage.Entity.Interfaces.ITicket _entity = BindingSource.Current as Sage.Entity.Interfaces.ITicket;
  if (_entity != null) 
  {
    object _parent = GetParentEntity(); 
    if (DialogService.ChildInsertInfo != null) 
    {
      if (_parent != null) 
      {
        if (DialogService.ChildInsertInfo.ParentReferenceProperty != null) 
        {
          DialogService.ChildInsertInfo.ParentReferenceProperty.SetValue(_entity, _parent, null);
        }        
      }
    }
    bool shouldSave = true;
    Sage.Platform.WebPortal.EntityPage page = Page as Sage.Platform.WebPortal.EntityPage;
	if (page != null)
	{
       if(IsInDialog() && page.ModeId.ToUpper() == "INSERT")
       {
         shouldSave = false;
       }
	}

    if(shouldSave)
    {
       _entity.Save();
    }
    
    if (_parent != null)
    {
        if (DialogService.ChildInsertInfo != null)
        {
           if (DialogService.ChildInsertInfo.ParentsCollectionProperty != null) 
           {
              System.Reflection.MethodInfo _add = DialogService.ChildInsertInfo.ParentsCollectionProperty.PropertyType.GetMethod("Add");
              _add.Invoke(DialogService.ChildInsertInfo.ParentsCollectionProperty.GetValue(_parent, null), new object[] { _entity });
           }
        }
     }        
  }
          cmdSave_ClickActionBRC(sender, e);
    
  
}
protected void cmdSave_ClickActionBRC(object sender, EventArgs e) {
Sage.Entity.Interfaces.ITicket entity = (Sage.Entity.Interfaces.ITicket) this.BindingSource.Current;
if (entity.IsAutoPunchInEnabled()) {
            cmdSave_ClickActionBRCS(sender, e);
      
      }
else {
            cmdSave_ClickActionBRCF(sender, e);
      
      }
}
protected void cmdSave_ClickActionBRCS(object sender, EventArgs e) {
      object[] objarray = new object[] { this.BindingSource.Current };
     Sage.Platform.EntityFactory.Execute<Sage.Entity.Interfaces.ITicket>("Ticket.PunchInOut", objarray);
          cmdSave_ClickActionBRCSBRC(sender, e);
    
  
}
protected void cmdSave_ClickActionBRCF(object sender, EventArgs e) {
      Response.Redirect(string.Format("Ticket.aspx?entityId={0}", (this.BindingSource.Current as Sage.Platform.ComponentModel.IComponentReference).Id));
  
}
protected void cmdSave_ClickActionBRCSBRC(object sender, EventArgs e) {
      Response.Redirect(string.Format("Ticket.aspx?entityId={0}", (this.BindingSource.Current as Sage.Platform.ComponentModel.IComponentReference).Id));
  
}
protected void cmdEmail_ClickAction(object sender, EventArgs e) {
if (DialogService != null) {
	// DialogActionItem
	DialogService.SetSpecs(325, 425, "SendTicketEmail", string.Empty );
    DialogService.EntityType = typeof(Sage.Entity.Interfaces.ITicket); 
    DialogService.ShowDialog();
}
}
protected void cmdAccountService_ClickAction(object sender, EventArgs e) {
if (DialogService != null) {
	// DialogActionItem
	DialogService.SetSpecs(600, 900, "AccountServiceInfo", string.Empty );
    DialogService.EntityType = typeof(Sage.Entity.Interfaces.ITicket); 
    DialogService.ShowDialog();
}
}

protected override void OnWireEventHandlers()
{
 base.OnWireEventHandlers();
 lueAccount.LookupResultValueChanged += new EventHandler(lueAccount_ChangeAction);
lueContact.LookupResultValueChanged += new EventHandler(lueContact_ChangeAction);
lueContract.LookupResultValueChanged += new EventHandler(lueContract_ChangeAction);
cmdPunchInOut.Click += new EventHandler(cmdPunchInOut_ClickAction);
ownOwner.LookupResultValueChanged += new EventHandler(ownOwner_ChangeAction);
cmdDescDateStamp.Click += new ImageClickEventHandler(cmdDescDateStamp_ClickAction);
cmdResDateStamp.Click += new ImageClickEventHandler(cmdResDateStamp_ClickAction);
cmdSpeedSearch.Click += new ImageClickEventHandler(cmdSpeedSearch_ClickAction);
cmdIntDateStamp.Click += new ImageClickEventHandler(cmdIntDateStamp_ClickAction);
cmdSave.Click += new ImageClickEventHandler(cmdSave_ClickAction);
cmdEmail.Click += new ImageClickEventHandler(cmdEmail_ClickAction);
cmdAccountService.Click += new ImageClickEventHandler(cmdAccountService_ClickAction);


}

protected void quickformload0(object sender, EventArgs e) {
Sage.Entity.Interfaces.ITicket entity = (Sage.Entity.Interfaces.ITicket) this.BindingSource.Current;
if (entity.IsAutoPunchInEnabled()) {
            quickformload0S(sender, e);
      
      }
else {
            quickformload0F(sender, e);
      
      }
}
protected void quickformload0S(object sender, EventArgs e) {
      object[] objarray = new object[] { this.BindingSource.Current };
     Sage.Platform.EntityFactory.Execute<Sage.Entity.Interfaces.ITicket>("Ticket.HoldPunchInTicketActivity", objarray);
          quickformload0SBRC(sender, e);
    
  
}
protected void quickformload0F(object sender, EventArgs e) {
Sage.Entity.Interfaces.ITicket entity = (Sage.Entity.Interfaces.ITicket) this.BindingSource.Current;
if (entity.IsDisplayServiceInfoView ()) {
            quickformload0FS(sender, e);
      
      }
else {
        }
}
protected void quickformload0SBRC(object sender, EventArgs e) {
cmdPunchInOut.Text = GetLocalResourceObject("cmdPunchOut.Caption").ToString();
cmdPunchInOut.Enabled = false;

}
protected void quickformload0FS(object sender, EventArgs e) {
if (DialogService != null) {
	// DialogActionItem
	DialogService.SetSpecs(600, 900, "AccountServiceInfo", string.Empty );
    DialogService.EntityType = typeof(Sage.Entity.Interfaces.ITicket); 
    DialogService.ShowDialog();
}
}
private bool _runActivating;
protected override void OnActivating()
{
_runActivating = true;
}
private void DoActivating()
{
quickformload0(this, EventArgs.Empty);

}
protected override void OnFormBound()
{
Sage.Platform.WebPortal.EntityPage epage = Page as Sage.Platform.WebPortal.EntityPage;
        if (epage != null)
            _runActivating = (epage.IsNewEntity || _runActivating);
if (_runActivating) DoActivating();
ClientBindingMgr.RegisterSaveButton(cmdPunchInOut);

ScriptManager.RegisterStartupScript(Page, GetType(), "cleanupcontainer", "jQuery(\".controlslist > div:empty\").remove();", true);
ScriptManager.RegisterStartupScript(Page, GetType(), "cleanupcontainer", "jQuery(\".controlslist > div:empty\").remove();", true);
ScriptManager.RegisterStartupScript(Page, GetType(), "cleanupcontainer", "jQuery(\".controlslist > div:empty\").remove();", true);
ClientBindingMgr.RegisterSaveButton(cmdSave);



}



public override Sage.Platform.Application.UI.ISmartPartInfo GetSmartPartInfo(Type smartPartInfoType)
{
	ToolsSmartPartInfo tinfo = new ToolsSmartPartInfo();
    	
	foreach (Control c in Controls)
	{
		SmartPartToolsContainer cont = c as SmartPartToolsContainer;
		if (cont != null)
		{
			switch (cont.ToolbarLocation)
			{
				case SmartPartToolsLocation.Right:
					foreach (Control tool in cont.Controls)
					{
											tinfo.RightTools.Add(tool);
										}
					break;
				case SmartPartToolsLocation.Center:
					foreach (Control tool in cont.Controls)
					{
						tinfo.CenterTools.Add(tool);
					}
					break;
				case SmartPartToolsLocation.Left:
					foreach (Control tool in cont.Controls)
					{
						tinfo.LeftTools.Add(tool);
					}
					break;
			}
		}
	}
	
		return tinfo;
}

private Sage.Platform.Controls.IEntityForm _formAdapter;

public Sage.Platform.Controls.IEntityForm FormAdapter
{
	get { return _formAdapter ?? (_formAdapter = new InsertTicketAdapter(this)); }
}

public class InsertTicketAdapter : Sage.Platform.WebPortal.Adapters.EntityFormAdapter, Sage.Form.Interfaces.IInsertTicket
{
	public InsertTicketAdapter(Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider smartPart)
		: base(smartPart) {}

	private Sage.Platform.Controls.ILookupControl _lueAccount;
	public Sage.Platform.Controls.ILookupControl lueAccount
	{
		get { return FindControl(ref _lueAccount, "lueAccount"); }
	}
	private Sage.Platform.Controls.ILookupControl _lueContact;
	public Sage.Platform.Controls.ILookupControl lueContact
	{
		get { return FindControl(ref _lueContact, "lueContact"); }
	}
	private Sage.Platform.Controls.ILookupControl _lueContract;
	public Sage.Platform.Controls.ILookupControl lueContract
	{
		get { return FindControl(ref _lueContract, "lueContract"); }
	}
	private Sage.Platform.Controls.IDependencyLookupControl _dplArea;
	public Sage.Platform.Controls.IDependencyLookupControl dplArea
	{
		get { return FindControl(ref _dplArea, "dplArea"); }
	}
	private Sage.Platform.Controls.ITextBoxControl _txtSubject;
	public Sage.Platform.Controls.ITextBoxControl txtSubject
	{
		get { return FindControl(ref _txtSubject, "txtSubject"); }
	}
	private Sage.Platform.Controls.IControlsListControl _ctrlDescription;
	public Sage.Platform.Controls.IControlsListControl ctrlDescription
	{
		get { return FindControl(ref _ctrlDescription, "ctrlDescription"); }
	}
	private Sage.Platform.Controls.ITextBoxControl _txtDescriptions;
	public Sage.Platform.Controls.ITextBoxControl txtDescriptions
	{
		get { return FindControl(ref _txtDescriptions, "txtDescriptions"); }
	}
	private Sage.Platform.Controls.IButtonControl _cmdDescDateStamp;
	public Sage.Platform.Controls.IButtonControl cmdDescDateStamp
	{
		get { return FindControl(ref _cmdDescDateStamp, "cmdDescDateStamp"); }
	}
	private Sage.Platform.Controls.IControlsListControl _ctrlResolution;
	public Sage.Platform.Controls.IControlsListControl ctrlResolution
	{
		get { return FindControl(ref _ctrlResolution, "ctrlResolution"); }
	}
	private Sage.Platform.Controls.ITextBoxControl _txtResolution;
	public Sage.Platform.Controls.ITextBoxControl txtResolution
	{
		get { return FindControl(ref _txtResolution, "txtResolution"); }
	}
	private Sage.Platform.Controls.IButtonControl _cmdResDateStamp;
	public Sage.Platform.Controls.IButtonControl cmdResDateStamp
	{
		get { return FindControl(ref _cmdResDateStamp, "cmdResDateStamp"); }
	}
	private Sage.Platform.Controls.IButtonControl _cmdSpeedSearch;
	public Sage.Platform.Controls.IButtonControl cmdSpeedSearch
	{
		get { return FindControl(ref _cmdSpeedSearch, "cmdSpeedSearch"); }
	}
	private Sage.Platform.Controls.IControlsListControl _ctrlInternal;
	public Sage.Platform.Controls.IControlsListControl ctrlInternal
	{
		get { return FindControl(ref _ctrlInternal, "ctrlInternal"); }
	}
	private Sage.Platform.Controls.ITextBoxControl _txtNotes;
	public Sage.Platform.Controls.ITextBoxControl txtNotes
	{
		get { return FindControl(ref _txtNotes, "txtNotes"); }
	}
	private Sage.Platform.Controls.IButtonControl _cmdIntDateStamp;
	public Sage.Platform.Controls.IButtonControl cmdIntDateStamp
	{
		get { return FindControl(ref _cmdIntDateStamp, "cmdIntDateStamp"); }
	}
	private Sage.Platform.Controls.IPickListControl _pklViaCode;
	public Sage.Platform.Controls.IPickListControl pklViaCode
	{
		get { return FindControl(ref _pklViaCode, "pklViaCode"); }
	}
	private Sage.Platform.Controls.IPickListControl _pklStatusCode;
	public Sage.Platform.Controls.IPickListControl pklStatusCode
	{
		get { return FindControl(ref _pklStatusCode, "pklStatusCode"); }
	}
	private Sage.Platform.Controls.ILookupControl _lueUrgency;
	public Sage.Platform.Controls.ILookupControl lueUrgency
	{
		get { return FindControl(ref _lueUrgency, "lueUrgency"); }
	}
	private Sage.Platform.Controls.IDateTimePickerControl _dtpNeededByDate;
	public Sage.Platform.Controls.IDateTimePickerControl dtpNeededByDate
	{
		get { return FindControl(ref _dtpNeededByDate, "dtpNeededByDate"); }
	}
	private Sage.Platform.Controls.IDateTimePickerControl _dtpAssignedDate;
	public Sage.Platform.Controls.IDateTimePickerControl dtpAssignedDate
	{
		get { return FindControl(ref _dtpAssignedDate, "dtpAssignedDate"); }
	}
	private Sage.Platform.Controls.IOwnerControl _ownOwner;
	public Sage.Platform.Controls.IOwnerControl ownOwner
	{
		get { return FindControl(ref _ownOwner, "ownOwner"); }
	}
	private Sage.Platform.Controls.ICheckBoxControl _chkClosedOnFirst;
	public Sage.Platform.Controls.ICheckBoxControl chkClosedOnFirst
	{
		get { return FindControl(ref _chkClosedOnFirst, "chkClosedOnFirst"); }
	}
	private Sage.Platform.Controls.ICheckBoxControl _chkSubmitSearch;
	public Sage.Platform.Controls.ICheckBoxControl chkSubmitSearch
	{
		get { return FindControl(ref _chkSubmitSearch, "chkSubmitSearch"); }
	}
	private Sage.Platform.Controls.ICheckBoxControl _chkAddKnowledge;
	public Sage.Platform.Controls.ICheckBoxControl chkAddKnowledge
	{
		get { return FindControl(ref _chkAddKnowledge, "chkAddKnowledge"); }
	}
	private Sage.Platform.Controls.IPickListControl _pklPublicAccessCode;
	public Sage.Platform.Controls.IPickListControl pklPublicAccessCode
	{
		get { return FindControl(ref _pklPublicAccessCode, "pklPublicAccessCode"); }
	}
	private Sage.Platform.Controls.IButtonControl _cmdPunchInOut;
	public Sage.Platform.Controls.IButtonControl cmdPunchInOut
	{
		get { return FindControl(ref _cmdPunchInOut, "cmdPunchInOut"); }
	}
	private Sage.Platform.Controls.IButtonControl _cmdSave;
	public Sage.Platform.Controls.IButtonControl cmdSave
	{
		get { return FindControl(ref _cmdSave, "cmdSave"); }
	}
	private Sage.Platform.Controls.IButtonControl _cmdEmail;
	public Sage.Platform.Controls.IButtonControl cmdEmail
	{
		get { return FindControl(ref _cmdEmail, "cmdEmail"); }
	}
	private Sage.Platform.Controls.IButtonControl _cmdAccountService;
	public Sage.Platform.Controls.IButtonControl cmdAccountService
	{
		get { return FindControl(ref _cmdAccountService, "cmdAccountService"); }
	}

}

</script>

<script type="text/javascript">
</script>
