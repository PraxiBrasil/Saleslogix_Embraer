<%@ Control Language="C#" ClassName="TicketActivityParts" Inherits="Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider" %>
<%@ Register Assembly="Sage.SalesLogix.Client.GroupBuilder" Namespace="Sage.SalesLogix.Client.GroupBuilder" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.PickList" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.DependencyLookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Lookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Timeline" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.HighLevelTypes" Namespace="Sage.SalesLogix.HighLevelTypes" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.Platform.WebPortal" Namespace="Sage.Platform.WebPortal.SmartParts" TagPrefix="SalesLogix" %>
<%//------------------------------------------------------------------------
//This file was generated by a tool.  Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//------------------------------------------------------------------------ %>
  <SalesLogix:SlxGridView runat="server" ID="grdParts" GridLines="None"
AutoGenerateColumns="false" CellPadding="4" CssClass="datagrid" PagerStyle-CssClass="gridPager"
AlternatingRowStyle-CssClass="rowdk" RowStyle-CssClass="rowlt" SelectedRowStyle-CssClass="rowSelected" ShowEmptyTable="true" EnableViewState="false"
 ExpandableRows="True" ResizableColumns="True"  OnRowCommand="grdParts_RowCommand" 
 DataKeyNames="parts.Id" 
 OnRowEditing="grdParts_RowEditing"  OnRowDeleting="grdParts_RowDeleting" OnRowDataBound="grdParts_RowDataBound" >
<Columns>
   <asp:BoundField DataField="ActivityTypeCode" 
      HeaderText="<%$ resources: grdParts.27b04249-eef1-460a-9c28-f8f709bed180.ColumnHeading %>"          >
      </asp:BoundField>
    <asp:BoundField DataField="ProductName" 
      HeaderText="<%$ resources: grdParts.e0d6a44d-46f3-4cfe-8318-12839ca9bdc5.ColumnHeading %>"          >
      </asp:BoundField>
    <asp:BoundField DataField="SerialNumber" 
      HeaderText="<%$ resources: grdParts.728906df-a6ec-4b4d-97fc-117d59496b63.ColumnHeading %>"          >
      </asp:BoundField>
    <asp:BoundField DataField="ActualId" 
      HeaderText="<%$ resources: grdParts.82d77b9c-045a-4c8b-ae68-d961a4fc765c.ColumnHeading %>"          >
      </asp:BoundField>
    <asp:TemplateField   HeaderText="<%$ resources: grdParts.e08e5cd5-d618-4806-90c3-7515d2d84ab0.ColumnHeading %>"        >
    <itemtemplate>
 <SalesLogix:Currency runat="server" ID="grdPartscol5" DisplayMode="AsText"  ExchangeRateType="BaseRate"   Text='<%#  dtsParts.getPropertyValue(Container.DataItem, "ItemAmount")  %>' CssClass="" />
   </itemtemplate></asp:TemplateField>
    <asp:BoundField DataField="ItemDescription" 
      HeaderText="<%$ resources: grdParts.670cf36f-b6fc-4ba2-a2d9-5857c041f42a.ColumnHeading %>"          >
      </asp:BoundField>
    <asp:TemplateField          >
    <itemtemplate>
      <SalesLogix:PageLink runat="server" NavigateUrl="TicketActivity"
   EntityId='<%# dtsParts.getPropertyValue(Container.DataItem, "Id") %>'     Text='<%# base.GetLocalResourceObject("grdParts.ec9ec0e8-044f-4029-8ff4-b186ab229c19.FormatString").ToString() %>' 
         LinkType="EntityAlias"></SalesLogix:PageLink>
     </itemtemplate></asp:TemplateField>
    <asp:ButtonField CommandName="Edit" 
  Text="<%$ resources: grdParts.0e3503c4-00e0-44bc-b661-846d29665abc.Text %>"               >
  	    </asp:ButtonField>
    <asp:CommandField ShowSelectButton="true"
  SelectText="<%$ resources: grdParts.f59f8905-b3b3-4266-8262-faf2a24bfb9b.Text %>" ButtonType="link" 
             >
  	    </asp:CommandField>
   <asp:ButtonField CommandName="Delete" 
  Text="<%$ resources: grdParts.bf2affa6-c683-4230-8092-45be1d7874e5.Text %>"                >
  	    </asp:ButtonField>
   </Columns>
</SalesLogix:SlxGridView>

<script runat="server" type="text/C#">

                              private int _grdPartsdeleteColumnIndex = -2;
protected int grdPartsDeleteColumnIndex
{
	get
	{
		if (_grdPartsdeleteColumnIndex == -2)
		{
			int bias = (grdParts.ExpandableRows) ? 1 : 0;
			_grdPartsdeleteColumnIndex = -1;
			int colcount = 0;
			foreach (DataControlField col in grdParts.Columns)
			{
				ButtonField btn = col as ButtonField;
				if (btn != null)
				{
					if (btn.CommandName == "Delete")
					{
						_grdPartsdeleteColumnIndex = colcount + bias;
						break;
					}
				}
				colcount++;
			}
		}
		return _grdPartsdeleteColumnIndex;
	}
}

protected void grdParts_RowDataBound(object sender, GridViewRowEventArgs e)
{
	if (e.Row.RowType == DataControlRowType.DataRow)
	{
		if ((grdPartsDeleteColumnIndex >= 0) && (grdPartsDeleteColumnIndex < e.Row.Cells.Count))
		{
			TableCell cell = e.Row.Cells[grdPartsDeleteColumnIndex];
			foreach (Control c in cell.Controls)
			{
				LinkButton btn = c as LinkButton;
				if (btn != null)
				{
					btn.Attributes.Add("onclick", "javascript: return confirm('" + Sage.Platform.WebPortal.PortalUtil.JavaScriptEncode(GetLocalResourceObject("grdParts.bf2affa6-c683-4230-8092-45be1d7874e5.ConfirmationMessage").ToString()) + "');");
					return;
				}
			}
		}
	}
}
   
protected void grdParts_RowCommand(object sender, GridViewCommandEventArgs e)
{
    if (e.CommandName == "Page")
        return;
    int rowIndex;
    if (Int32.TryParse(e.CommandArgument.ToString(), out rowIndex))
    {
        dtsParts.SelectedIndex = rowIndex;
		object currentEntity = dtsParts.Current;
        if ((currentEntity is Sage.Platform.ComponentModel.ComponentView) && !((Sage.Platform.ComponentModel.ComponentView)currentEntity).IsVirtualComponent)
            currentEntity = ((Sage.Platform.ComponentModel.ComponentView)currentEntity).Component;
		string id = String.Empty;
        //Check if this is an unpersisted entity and use its InstanceId
        if (Sage.Platform.WebPortal.PortalUtil.ObjectIsNewEntity(currentEntity))
        {
		    if (grdParts.DataKeys[0].Values.Count > 1) {
                foreach (DictionaryEntry val in grdParts.DataKeys[rowIndex].Values)
                {
                    if (val.Key.ToString() == "InstanceId")
                    {
                        Guid instanceId = (Guid)val.Value;
                        dtsParts.SetCurrentEntityByInstanceId(instanceId);
                        id = instanceId.ToString();
		                currentEntity = dtsParts.Current;
                        if ((currentEntity is Sage.Platform.ComponentModel.ComponentView) && !((Sage.Platform.ComponentModel.ComponentView)currentEntity).IsVirtualComponent)
                            currentEntity = ((Sage.Platform.ComponentModel.ComponentView)currentEntity).Component;
                    }
                }                 
            }
        }
        else
        {
            foreach (DictionaryEntry val in grdParts.DataKeys[rowIndex].Values)
            {
                if (val.Key.ToString() != "InstanceId")
                {
                    id = val.Value.ToString();
                }
            }
        }		
        if (e.CommandName.Equals("Edit"))
        {
            if (DialogService != null)
            {
				// QFDataGrid
							DialogService.SetSpecs(400, 400, "AddEditTicketActivityItem", GetLocalResourceObject("a16e3f07-7006-4217-b9f6-a0939ae99994.DialogTitleOverride").ToString() );
			                DialogService.EntityType = typeof(Sage.Entity.Interfaces.ITicketActivityItem );
                DialogService.EntityID = id;
                DialogService.ShowDialog();
            }
        }
		if (e.CommandName.Equals("Delete"))
		{
            object childEntity = (currentEntity == null) ? id : currentEntity;
			object[] objarray = new object[] { this.BindingSource.Current, _dtsParts.Current, childEntity };
		    Sage.Platform.EntityFactory.Execute<Sage.Entity.Interfaces.ITicket>("Ticket.DeleteTicketActivityPart", objarray);
		}
	}
    grdParts_refresh();
}
	
	protected void grdParts_refresh()
	{
		if (PageWorkItem != null) {
			Sage.Platform.WebPortal.Services.IPanelRefreshService refresher = PageWorkItem.Services.Get<Sage.Platform.WebPortal.Services.IPanelRefreshService>();
			if (refresher != null)
			{
				refresher.RefreshAll();
			}
			else
			{
				Response.Redirect(Request.Url.ToString());
			}
		}
	}
	
    	protected void grdParts_RowEditing(object sender, GridViewEditEventArgs e)
	{
		grdParts.SelectedIndex = e.NewEditIndex;
	}
            protected void grdParts_RowDeleting(object sender, GridViewDeleteEventArgs e)
	{
		grdParts.SelectedIndex = -1;
	}
	</script>
 

 <SalesLogix:SmartPartToolsContainer runat="server" ID="TicketActivityParts_RTools" ToolbarLocation="right">
  <SalesLogix:PageLink ID="lnkTicketActivityPartsHelp" runat="server" LinkType="HelpFileName" ToolTip="<%$ resources: Portal, Help_ToolTip %>" Target="MCWebHelp" NavigateUrl="csrticketactivityparts.htm" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Help_16x16"></SalesLogix:PageLink> </SalesLogix:SmartPartToolsContainer>

<script runat="server" type="text/C#">
private Sage.Platform.Security.IRoleSecurityService _roleSecurityService;
/// <summary>
/// Gets or sets the role security service.
/// </summary>
/// <value>The role security service.</value>
[Sage.Platform.Application.ServiceDependency]
public Sage.Platform.Security.IRoleSecurityService RoleSecurityService
{
   set
      {
         _roleSecurityService = Sage.Platform.Application.ApplicationContext.Current.Services.Get<Sage.Platform.Security.IRoleSecurityService>(true);
      }
      get
      {
         return _roleSecurityService;
      }
}

public override Type EntityType
{
	get { return typeof(Sage.Entity.Interfaces.ITicket); }
}

 private Sage.Platform.WebPortal.Binding.WebEntityListBindingSource _dtsParts;
public Sage.Platform.WebPortal.Binding.WebEntityListBindingSource dtsParts
{ 
  get 
  {
    if (_dtsParts == null)
    {
             _dtsParts = new Sage.Platform.WebPortal.Binding.WebEntityListBindingSource(typeof(Sage.Platform.ComponentModel.ComponentView), 
	    EntityType                     ,"GetTicketActivityParts", System.Reflection.MemberTypes.Method);
            	   	}
 	return _dtsParts;
  }
}

void dtsParts_OnCurrentEntitySet(object sender, EventArgs e) 
{
      if (Visible)
    { 
		if(BindingSource.Current != null)
		{
		
      
        dtsParts.SourceObject = BindingSource.Current;
   		}
    }
   if (Visible)
   {   
      RegisterBindingsWithClient(dtsParts);
   }
}

 



 

protected override void OnAddEntityBindings() { 
       dtsParts.Bindings.Add(new Sage.Platform.WebPortal.Binding.WebEntityListBinding("GetTicketActivityParts()", grdParts ));
   dtsParts.BindFieldNames = new String[] { "parts.Id","ActivityTypeCode","ProductName","AccountProduct.ProductName","SerialNumber","AccountProduct.SerialNumber","ActualId","AccountProduct.ActualId","ItemAmount","ItemDescription","Id" };
     
     BindingSource.OnCurrentEntitySet += new EventHandler(dtsParts_OnCurrentEntitySet);
     
}
	   
protected void grdParts_RowSelectedAction(object sender, EventArgs e) {
if (dtsParts != null && dtsParts.SelectedMember != null)
{
    Sage.Platform.ComponentModel.ComponentView componentView = (Sage.Platform.ComponentModel.ComponentView)dtsParts.SelectedMember;
    if (componentView != null)
    {
        System.ComponentModel.PropertyDescriptorCollection propDescriptors = componentView.GetProperties();
        if (propDescriptors != null)
        {
            System.ComponentModel.PropertyDescriptor propDescriptor = propDescriptors.Find("parts.Id", true);
            if (propDescriptor != null)
            {
                object partId = propDescriptor.GetValue(componentView);
                Sage.Entity.Interfaces.ITicketActivityItem part = Sage.Platform.EntityFactory.GetById<Sage.Entity.Interfaces.ITicketActivityItem>(partId.ToString());
                if (part != null)
                {
                    part.CopyPart(part.TicketActivity);
					part.TicketActivity.Save();
                    Sage.Platform.WebPortal.Services.IPanelRefreshService refresher = PageWorkItem.Services.Get<Sage.Platform.WebPortal.Services.IPanelRefreshService>();
                    if (refresher != null)
                    {
                        refresher.RefreshAll();
                    }
                }
            }
        }
    }
}
}

protected override void OnWireEventHandlers()
{
 base.OnWireEventHandlers();
 grdParts.SelectedIndexChanged += new EventHandler(grdParts_RowSelectedAction);


}

protected override void OnFormBound()
{
if (dtsParts.SourceObject == null) { dtsParts.SourceObject = BindingSource.Current; }
if (dtsParts.SourceObject == null) { RegisterBindingsWithClient(dtsParts); }
dtsParts.Bind();



}



public override Sage.Platform.Application.UI.ISmartPartInfo GetSmartPartInfo(Type smartPartInfoType)
{
	ToolsSmartPartInfo tinfo = new ToolsSmartPartInfo();
    	if (BindingSource != null)
	{
		if (BindingSource.Current != null)
		{
			tinfo.Description = BindingSource.Current.ToString();
			tinfo.Title = BindingSource.Current.ToString();
		}
	}
    	
	foreach (Control c in Controls)
	{
		SmartPartToolsContainer cont = c as SmartPartToolsContainer;
		if (cont != null)
		{
			switch (cont.ToolbarLocation)
			{
				case SmartPartToolsLocation.Right:
					foreach (Control tool in cont.Controls)
					{
											tinfo.RightTools.Add(tool);
										}
					break;
				case SmartPartToolsLocation.Center:
					foreach (Control tool in cont.Controls)
					{
						tinfo.CenterTools.Add(tool);
					}
					break;
				case SmartPartToolsLocation.Left:
					foreach (Control tool in cont.Controls)
					{
						tinfo.LeftTools.Add(tool);
					}
					break;
			}
		}
	}
	
		return tinfo;
}

private Sage.Platform.Controls.IEntityForm _formAdapter;

public Sage.Platform.Controls.IEntityForm FormAdapter
{
	get { return _formAdapter ?? (_formAdapter = new TicketActivityPartsAdapter(this)); }
}

public class TicketActivityPartsAdapter : Sage.Platform.WebPortal.Adapters.EntityFormAdapter, Sage.Form.Interfaces.ITicketActivityParts
{
	public TicketActivityPartsAdapter(Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider smartPart)
		: base(smartPart) {}

	private Sage.Platform.Controls.IDataGridControl _grdParts;
	public Sage.Platform.Controls.IDataGridControl grdParts
	{
		get { return FindControl(ref _grdParts, "grdParts"); }
	}
	private Sage.Platform.Controls.IDataSourceControl _dtsParts;
	public Sage.Platform.Controls.IDataSourceControl dtsParts
	{
		get { return FindControl(ref _dtsParts, "dtsParts"); }
	}

}

</script>

<script type="text/javascript">
</script>
