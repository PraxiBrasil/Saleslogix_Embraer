<%@ Control Language="C#" ClassName="TicketDefects" Inherits="Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider" %>
<%@ Register Assembly="Sage.SalesLogix.Client.GroupBuilder" Namespace="Sage.SalesLogix.Client.GroupBuilder" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.PickList" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.DependencyLookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Lookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Timeline" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.HighLevelTypes" Namespace="Sage.SalesLogix.HighLevelTypes" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.Platform.WebPortal" Namespace="Sage.Platform.WebPortal.SmartParts" TagPrefix="SalesLogix" %>
<%//------------------------------------------------------------------------
//This file was generated by a tool.  Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//------------------------------------------------------------------------ %>
  <SalesLogix:SlxGridView runat="server" ID="grdDefects" GridLines="None"
AutoGenerateColumns="false" CellPadding="4" CssClass="datagrid" PagerStyle-CssClass="gridPager"
AlternatingRowStyle-CssClass="rowdk" RowStyle-CssClass="rowlt" SelectedRowStyle-CssClass="rowSelected" ShowEmptyTable="true" EnableViewState="false"
 AllowPaging="true" PageSize="10" OnPageIndexChanging="grdDefectspage_changing" EmptyTableRowText="<%$ resources: grdDefects.EmptyTableRowText %>"  ExpandableRows="True" ResizableColumns="True"  OnRowCommand="grdDefects_RowCommand" 
 DataKeyNames="InstanceId,Id" 
 AllowSorting="true" OnSorting="grdDefects_Sorting"  OnRowDeleting="grdDefects_RowDeleting" OnRowDataBound="grdDefects_RowDataBound"  ShowSortIcon="true" >
<Columns>
   <asp:TemplateField   HeaderText="<%$ resources: grdDefects.cdebaf0f-413a-4352-8493-9180ea68258e.ColumnHeading %>"       SortExpression="Defect.DefectNumber"  >
    <itemtemplate>
      <SalesLogix:PageLink runat="server" NavigateUrl="Defect"
   EntityId='<%# dtsDefects.getPropertyValue(Container.DataItem, "Defect.Id") %>'     Text='<%# dtsDefects.getPropertyValue(Container.DataItem, "Defect.DefectNumber") %>' 
         LinkType="EntityAlias"></SalesLogix:PageLink>
     </itemtemplate></asp:TemplateField>
      <asp:TemplateField   HeaderText="<%$ resources: grdDefects.5ffcef17-a541-4c49-8adc-be01d33021b3.ColumnHeading %>"       SortExpression="Defect.CreateDate"  >
    <itemtemplate>
   <SalesLogix:DateTimePicker runat="server" ID="grdDefectscol2"  DisplayMode="AsText" DateTimeValue='<%#  dtsDefects.getPropertyValue(Container.DataItem, "Defect.CreateDate")  %>'  CssClass=""  />
   </itemtemplate></asp:TemplateField>
    <asp:TemplateField   HeaderText="<%$ resources: grdDefects.2319a78f-15e6-49c4-95c5-e7bc3ba9dab8.ColumnHeading %>"       SortExpression="Defect.PriorityCode"  >
    <itemtemplate>
   <SalesLogix:PickListControl runat="server" ID="grdDefectscol3" PickListId="kSYST0000339" ValueStoredAsText="False" PickListName="Defect Priority" PickListValue='<%#  dtsDefects.getPropertyValue(Container.DataItem, "Defect.PriorityCode")  %>' DisplayMode="AsText" CssClass="" />
   </itemtemplate></asp:TemplateField>
    <asp:TemplateField   HeaderText="<%$ resources: grdDefects.5f8d1b02-473b-4b1a-9375-fc2a42729670.ColumnHeading %>"       SortExpression="Defect.SeverityCode"  >
    <itemtemplate>
   <SalesLogix:PickListControl runat="server" ID="grdDefectscol4" PickListId="kSYST0000341" ValueStoredAsText="False" PickListName="Defect Severity" PickListValue='<%#  dtsDefects.getPropertyValue(Container.DataItem, "Defect.SeverityCode")  %>' DisplayMode="AsText" CssClass="" />
   </itemtemplate></asp:TemplateField>
    <asp:TemplateField   HeaderText="<%$ resources: grdDefects.0aa6383c-00b4-445f-9cc6-c86d428d60d5.ColumnHeading %>"       SortExpression="Defect.StatusCode"  >
    <itemtemplate>
   <SalesLogix:PickListControl runat="server" ID="grdDefectscol5" PickListId="kSYST0000342" ValueStoredAsText="False" PickListName="Defect Status" PickListValue='<%#  dtsDefects.getPropertyValue(Container.DataItem, "Defect.StatusCode")  %>' DisplayMode="AsText" CssClass="" />
   </itemtemplate></asp:TemplateField>
    <asp:BoundField DataField="Defect.DefectProblem.Notes" 
      HeaderText="<%$ resources: grdDefects.ccf5a384-2fe0-42ba-a5b4-5ba5ee3fef94.ColumnHeading %>"          >
      </asp:BoundField>
    <asp:BoundField DataField="Defect.DefectSolution.Notes" 
      HeaderText="<%$ resources: grdDefects.c1286289-f124-40c7-a004-ffe479cc6cf1.ColumnHeading %>"          >
      </asp:BoundField>
   <asp:ButtonField CommandName="Delete" 
  Text="<%$ resources: grdDefects.6b08b079-fc88-4271-a3ad-d614d9fb7d51.Text %>"                >
  	    </asp:ButtonField>
   </Columns>
    <PagerSettings Mode="NumericFirstLast" FirstPageImageUrl="ImageResource.axd?scope=global&type=Global_Images&key=Start_16x16" LastPageImageUrl="ImageResource.axd?scope=global&type=Global_Images&key=End_16x16" />
</SalesLogix:SlxGridView>

<script runat="server" type="text/C#">

                        private int _grdDefectsdeleteColumnIndex = -2;
protected int grdDefectsDeleteColumnIndex
{
	get
	{
		if (_grdDefectsdeleteColumnIndex == -2)
		{
			int bias = (grdDefects.ExpandableRows) ? 1 : 0;
			_grdDefectsdeleteColumnIndex = -1;
			int colcount = 0;
			foreach (DataControlField col in grdDefects.Columns)
			{
				ButtonField btn = col as ButtonField;
				if (btn != null)
				{
					if (btn.CommandName == "Delete")
					{
						_grdDefectsdeleteColumnIndex = colcount + bias;
						break;
					}
				}
				colcount++;
			}
		}
		return _grdDefectsdeleteColumnIndex;
	}
}

protected void grdDefects_RowDataBound(object sender, GridViewRowEventArgs e)
{
	if (e.Row.RowType == DataControlRowType.DataRow)
	{
		if ((grdDefectsDeleteColumnIndex >= 0) && (grdDefectsDeleteColumnIndex < e.Row.Cells.Count))
		{
			TableCell cell = e.Row.Cells[grdDefectsDeleteColumnIndex];
			foreach (Control c in cell.Controls)
			{
				LinkButton btn = c as LinkButton;
				if (btn != null)
				{
					btn.Attributes.Add("onclick", "javascript: return confirm('" + Sage.Platform.WebPortal.PortalUtil.JavaScriptEncode(GetLocalResourceObject("grdDefects.6b08b079-fc88-4271-a3ad-d614d9fb7d51.ConfirmationMessage").ToString()) + "');");
					return;
				}
			}
		}
	}
}
   
protected void grdDefectspage_changing(object sender, GridViewPageEventArgs e)
{
 grdDefects.PageIndex = e.NewPageIndex;
 grdDefects.DataBind();
}
protected void grdDefects_Sorting(object sender, GridViewSortEventArgs e) { }
protected void grdDefects_RowCommand(object sender, GridViewCommandEventArgs e)
{
    if (e.CommandName == "Page")
        return;
    int rowIndex;
    if (Int32.TryParse(e.CommandArgument.ToString(), out rowIndex))
    {
        dtsDefects.SelectedIndex = rowIndex;
		object currentEntity = dtsDefects.Current;
        if ((currentEntity is Sage.Platform.ComponentModel.ComponentView) && !((Sage.Platform.ComponentModel.ComponentView)currentEntity).IsVirtualComponent)
            currentEntity = ((Sage.Platform.ComponentModel.ComponentView)currentEntity).Component;
		string id = String.Empty;
        //Check if this is an unpersisted entity and use its InstanceId
        if (Sage.Platform.WebPortal.PortalUtil.ObjectIsNewEntity(currentEntity))
        {
		    if (grdDefects.DataKeys[0].Values.Count > 1) {
                foreach (DictionaryEntry val in grdDefects.DataKeys[rowIndex].Values)
                {
                    if (val.Key.ToString() == "InstanceId")
                    {
                        Guid instanceId = (Guid)val.Value;
                        dtsDefects.SetCurrentEntityByInstanceId(instanceId);
                        id = instanceId.ToString();
		                currentEntity = dtsDefects.Current;
                        if ((currentEntity is Sage.Platform.ComponentModel.ComponentView) && !((Sage.Platform.ComponentModel.ComponentView)currentEntity).IsVirtualComponent)
                            currentEntity = ((Sage.Platform.ComponentModel.ComponentView)currentEntity).Component;
                    }
                }                 
            }
        }
        else
        {
            foreach (DictionaryEntry val in grdDefects.DataKeys[rowIndex].Values)
            {
                if (val.Key.ToString() != "InstanceId")
                {
                    id = val.Value.ToString();
                }
            }
        }		
		if (e.CommandName.Equals("Delete"))
		{
            Sage.Entity.Interfaces.ITicket mainentity = this.BindingSource.Current as Sage.Entity.Interfaces.ITicket;
			if (mainentity != null)
			{
			    Sage.Entity.Interfaces.IDefectTicket childEntity = null;
			    if((currentEntity != null) && (currentEntity is Sage.Entity.Interfaces.IDefectTicket))
			    {
			        childEntity = (Sage.Entity.Interfaces.IDefectTicket)currentEntity;    
			    }
			    else if (id != null)
			    {
                    childEntity = Sage.Platform.EntityFactory.GetById<Sage.Entity.Interfaces.IDefectTicket>(id);
            }
				if(childEntity != null)
				{
			         mainentity.TicketDefects.Remove(childEntity);
					 mainentity.Save();
					 if((childEntity.PersistentState & Sage.Platform.Orm.Interfaces.PersistentState.New) <= 0)
					 {
					     childEntity.Delete();
					 }
					 dtsDefects.SelectedIndex = -1;
			    }
		    }
		}
	}
    grdDefects_refresh();
}
	
	protected void grdDefects_refresh()
	{
		if (PageWorkItem != null) {
			Sage.Platform.WebPortal.Services.IPanelRefreshService refresher = PageWorkItem.Services.Get<Sage.Platform.WebPortal.Services.IPanelRefreshService>();
			if (refresher != null)
			{
				refresher.RefreshAll();
			}
			else
			{
				Response.Redirect(Request.Url.ToString());
			}
		}
	}
	
            protected void grdDefects_RowDeleting(object sender, GridViewDeleteEventArgs e)
	{
		grdDefects.SelectedIndex = -1;
	}
	</script>
 

 <SalesLogix:SmartPartToolsContainer runat="server" ID="TicketDefects_RTools" ToolbarLocation="right">
    <asp:HyperLink runat="server" ID="lnkAddDefect"   ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=plus_16x16"    ToolTip="<%$ resources: lnkAddDefect.ToolTip %>"    NavigateUrl="~/InsertDefect.aspx?modeid=Insert"     />

   <SalesLogix:LookupControl runat="server" ID="lueDefect"  ToolTip="<%$ resources: lueDefect.ToolTip %>" LookupEntityName="Defect" LookupEntityTypeName="Sage.Entity.Interfaces.IDefect, Sage.Entity.Interfaces, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" LookupDisplayMode="ButtonOnly" AutoPostBack="true" LookupImageURL="~/ImageResource.axd?scope=global&type=Global_Images&key=associate_16x16"  >
<LookupProperties>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueDefect.LookupProperties.DefectNumber.PropertyHeader %>" PropertyName="DefectNumber" PropertyType="System.String" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueDefect.LookupProperties.Subject.PropertyHeader %>" PropertyName="Subject" PropertyType="System.String" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueDefect.LookupProperties.DefectProblem.Notes.PropertyHeader %>" PropertyName="DefectProblem.Notes" PropertyType="System.String" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="True"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueDefect.LookupProperties.DefectSolution.Notes.PropertyHeader %>" PropertyName="DefectSolution.Notes" PropertyType="System.String" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="True"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueDefect.LookupProperties.AssignedTo.OwnerDescription.PropertyHeader %>" PropertyName="AssignedTo.OwnerDescription" PropertyType="System.String" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueDefect.LookupProperties.Owner.OwnerDescription.PropertyHeader %>" PropertyName="Owner.OwnerDescription" PropertyType="System.String" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
</LookupProperties>
<LookupPreFilters>
</LookupPreFilters>
</SalesLogix:LookupControl>
                 

  <SalesLogix:PageLink ID="lnkTicketDefectsHelp" runat="server" LinkType="HelpFileName" ToolTip="<%$ resources: Portal, Help_ToolTip %>" Target="MCWebHelp" NavigateUrl="csrticketdefect.htm" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Help_16x16"></SalesLogix:PageLink> </SalesLogix:SmartPartToolsContainer>

<script runat="server" type="text/C#">
private Sage.Platform.Security.IRoleSecurityService _roleSecurityService;
/// <summary>
/// Gets or sets the role security service.
/// </summary>
/// <value>The role security service.</value>
[Sage.Platform.Application.ServiceDependency]
public Sage.Platform.Security.IRoleSecurityService RoleSecurityService
{
   set
      {
         _roleSecurityService = Sage.Platform.Application.ApplicationContext.Current.Services.Get<Sage.Platform.Security.IRoleSecurityService>(true);
      }
      get
      {
         return _roleSecurityService;
      }
}

public override Type EntityType
{
	get { return typeof(Sage.Entity.Interfaces.ITicket); }
}

 private Sage.Platform.WebPortal.Binding.WebEntityListBindingSource _dtsDefects;
public Sage.Platform.WebPortal.Binding.WebEntityListBindingSource dtsDefects
{ 
  get 
  {
    if (_dtsDefects == null)
    {
             _dtsDefects = new Sage.Platform.WebPortal.Binding.WebEntityListBindingSource(typeof(Sage.Entity.Interfaces.IDefectTicket), 
	    EntityType              ,"TicketDefects", System.Reflection.MemberTypes.Property);
            	   	}
 	return _dtsDefects;
  }
}

void dtsDefects_OnCurrentEntitySet(object sender, EventArgs e) 
{
      if (Visible)
    { 
		if(BindingSource.Current != null)
		{
		
      
        dtsDefects.SourceObject = BindingSource.Current;
   		}
    }
   if (Visible)
   {   
      RegisterBindingsWithClient(dtsDefects);
   }
}

 



 

protected override void OnAddEntityBindings() { 
       dtsDefects.Bindings.Add(new Sage.Platform.WebPortal.Binding.WebEntityListBinding("TicketDefects", grdDefects ));
   dtsDefects.BindFieldNames = new String[] { "Id","Defect.DefectNumber","Defect.Id","Defect.CreateDate","Defect.PriorityCode","Defect.SeverityCode","Defect.StatusCode","Defect.DefectProblem.Notes","Defect.DefectSolution.Notes" };
                
     BindingSource.OnCurrentEntitySet += new EventHandler(dtsDefects_OnCurrentEntitySet);
     
        }
	   
protected void lueDefect_ChangeAction(object sender, EventArgs e) {
    if (lueDefect.LookupResultValue != null)
    {
        Sage.Entity.Interfaces.ITicket parentEntity = BindingSource.Current as Sage.Entity.Interfaces.ITicket;
        Sage.Entity.Interfaces.IDefect relatedEntity = lueDefect.LookupResultValue as Sage.Entity.Interfaces.IDefect;
        Sage.Platform.WebPortal.EntityPage page = (Sage.Platform.WebPortal.EntityPage)Page;
		// check for duplicates
        bool found = false;
        if ((parentEntity != null) && (relatedEntity != null))
        {
		        Sage.Entity.Interfaces.IDefectTicket relationshipEntity = Sage.Platform.EntityFactory.Create<Sage.Entity.Interfaces.IDefectTicket>();
		if (!found)
        {
            relationshipEntity.Ticket = parentEntity;
            relationshipEntity.Defect = relatedEntity;
            parentEntity.TicketDefects.Add(relationshipEntity);
            dtsDefects.SelectedMember = relationshipEntity;
            if (page.ModeId.ToUpper() != "INSERT")
            {
				parentEntity.Save();
            }
		}
        }
    }

}

protected override void OnWireEventHandlers()
{
 base.OnWireEventHandlers();
 lueDefect.LookupResultValueChanged += new EventHandler(lueDefect_ChangeAction);


}

protected override void OnFormBound()
{
ClientBindingMgr.RegisterBoundControl(lueDefect);

if (dtsDefects.SourceObject == null) { dtsDefects.SourceObject = BindingSource.Current; }
if (dtsDefects.SourceObject == null) { RegisterBindingsWithClient(dtsDefects); }
dtsDefects.Bind();



}



public override Sage.Platform.Application.UI.ISmartPartInfo GetSmartPartInfo(Type smartPartInfoType)
{
	ToolsSmartPartInfo tinfo = new ToolsSmartPartInfo();
    	
	foreach (Control c in Controls)
	{
		SmartPartToolsContainer cont = c as SmartPartToolsContainer;
		if (cont != null)
		{
			switch (cont.ToolbarLocation)
			{
				case SmartPartToolsLocation.Right:
					foreach (Control tool in cont.Controls)
					{
											tinfo.RightTools.Add(tool);
										}
					break;
				case SmartPartToolsLocation.Center:
					foreach (Control tool in cont.Controls)
					{
						tinfo.CenterTools.Add(tool);
					}
					break;
				case SmartPartToolsLocation.Left:
					foreach (Control tool in cont.Controls)
					{
						tinfo.LeftTools.Add(tool);
					}
					break;
			}
		}
	}
	
		return tinfo;
}

private Sage.Platform.Controls.IEntityForm _formAdapter;

public Sage.Platform.Controls.IEntityForm FormAdapter
{
	get { return _formAdapter ?? (_formAdapter = new TicketDefectsAdapter(this)); }
}

public class TicketDefectsAdapter : Sage.Platform.WebPortal.Adapters.EntityFormAdapter, Sage.Form.Interfaces.ITicketDefects
{
	public TicketDefectsAdapter(Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider smartPart)
		: base(smartPart) {}

	private Sage.Platform.Controls.IDataGridControl _grdDefects;
	public Sage.Platform.Controls.IDataGridControl grdDefects
	{
		get { return FindControl(ref _grdDefects, "grdDefects"); }
	}
	private Sage.Platform.Controls.IDataSourceControl _dtsDefects;
	public Sage.Platform.Controls.IDataSourceControl dtsDefects
	{
		get { return FindControl(ref _dtsDefects, "dtsDefects"); }
	}
	private Sage.Platform.Controls.ILinkControl _lnkAddDefect;
	public Sage.Platform.Controls.ILinkControl lnkAddDefect
	{
		get { return FindControl(ref _lnkAddDefect, "lnkAddDefect"); }
	}
	private Sage.Platform.Controls.ILookupControl _lueDefect;
	public Sage.Platform.Controls.ILookupControl lueDefect
	{
		get { return FindControl(ref _lueDefect, "lueDefect"); }
	}

}

</script>

<script type="text/javascript">
</script>
