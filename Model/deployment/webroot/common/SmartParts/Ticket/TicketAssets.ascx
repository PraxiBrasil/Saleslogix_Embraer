<%@ Control Language="C#" ClassName="TicketAssets" Inherits="Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider" %>
<%@ Register Assembly="Sage.SalesLogix.Client.GroupBuilder" Namespace="Sage.SalesLogix.Client.GroupBuilder" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.PickList" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.DependencyLookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Lookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Timeline" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.HighLevelTypes" Namespace="Sage.SalesLogix.HighLevelTypes" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.Platform.WebPortal" Namespace="Sage.Platform.WebPortal.SmartParts" TagPrefix="SalesLogix" %>
<%//------------------------------------------------------------------------
//This file was generated by a tool.  Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//------------------------------------------------------------------------ %>
  <SalesLogix:SlxGridView runat="server" ID="grdAssets" GridLines="None"
AutoGenerateColumns="false" CellPadding="4" CssClass="datagrid" PagerStyle-CssClass="gridPager"
AlternatingRowStyle-CssClass="rowdk" RowStyle-CssClass="rowlt" SelectedRowStyle-CssClass="rowSelected" ShowEmptyTable="true" EnableViewState="false"
 AllowPaging="true" PageSize="20" OnPageIndexChanging="grdAssetspage_changing" EmptyTableRowText="<%$ resources: grdAssets.EmptyTableRowText %>"  ExpandableRows="True" ResizableColumns="True"  OnRowCommand="grdAssets_RowCommand" 
 DataKeyNames="InstanceId,Id" 
 AllowSorting="true" OnSorting="grdAssets_Sorting"  OnRowDeleting="grdAssets_RowDeleting" OnRowDataBound="grdAssets_RowDataBound"  ShowSortIcon="true" >
<Columns>
   <asp:BoundField DataField="AccountProduct.ProductName" 
      HeaderText="<%$ resources: grdAssets.91b7d4c2-d2f8-4c5c-9407-5698bdc156b7.ColumnHeading %>"       SortExpression="AccountProduct.ProductName"    >
      </asp:BoundField>
    <asp:BoundField DataField="AccountProduct.SerialNumber" 
      HeaderText="<%$ resources: grdAssets.fcbeef78-d47f-433e-bc24-2624d212b071.ColumnHeading %>"       SortExpression="AccountProduct.SerialNumber"    >
      </asp:BoundField>
    <asp:BoundField DataField="AccountProduct.ActualId" 
      HeaderText="<%$ resources: grdAssets.fe932d20-4d61-44f3-966f-e3197ebf56e0.ColumnHeading %>"       SortExpression="AccountProduct.ActualId"    >
      </asp:BoundField>
    <asp:BoundField DataField="AccountProduct.Evaluation" 
      HeaderText="<%$ resources: grdAssets.115e7b2c-38f5-4361-a2b5-a7078001fccc.ColumnHeading %>"       SortExpression="AccountProduct.Evaluation"    >
      </asp:BoundField>
   <asp:ButtonField CommandName="Delete" 
  Text="<%$ resources: grdAssets.d2f87aac-ae4d-40b6-85d2-c80ac2d751f6.Text %>"                >
  	    </asp:ButtonField>
   </Columns>
    <PagerSettings Mode="NumericFirstLast" FirstPageImageUrl="ImageResource.axd?scope=global&type=Global_Images&key=Start_16x16" LastPageImageUrl="ImageResource.axd?scope=global&type=Global_Images&key=End_16x16" />
</SalesLogix:SlxGridView>

<script runat="server" type="text/C#">

               private int _grdAssetsdeleteColumnIndex = -2;
protected int grdAssetsDeleteColumnIndex
{
	get
	{
		if (_grdAssetsdeleteColumnIndex == -2)
		{
			int bias = (grdAssets.ExpandableRows) ? 1 : 0;
			_grdAssetsdeleteColumnIndex = -1;
			int colcount = 0;
			foreach (DataControlField col in grdAssets.Columns)
			{
				ButtonField btn = col as ButtonField;
				if (btn != null)
				{
					if (btn.CommandName == "Delete")
					{
						_grdAssetsdeleteColumnIndex = colcount + bias;
						break;
					}
				}
				colcount++;
			}
		}
		return _grdAssetsdeleteColumnIndex;
	}
}

protected void grdAssets_RowDataBound(object sender, GridViewRowEventArgs e)
{
	if (e.Row.RowType == DataControlRowType.DataRow)
	{
		if ((grdAssetsDeleteColumnIndex >= 0) && (grdAssetsDeleteColumnIndex < e.Row.Cells.Count))
		{
			TableCell cell = e.Row.Cells[grdAssetsDeleteColumnIndex];
			foreach (Control c in cell.Controls)
			{
				LinkButton btn = c as LinkButton;
				if (btn != null)
				{
					btn.Attributes.Add("onclick", "javascript: return confirm('" + Sage.Platform.WebPortal.PortalUtil.JavaScriptEncode(GetLocalResourceObject("grdAssets.d2f87aac-ae4d-40b6-85d2-c80ac2d751f6.ConfirmationMessage").ToString()) + "');");
					return;
				}
			}
		}
	}
}
   
protected void grdAssetspage_changing(object sender, GridViewPageEventArgs e)
{
 grdAssets.PageIndex = e.NewPageIndex;
 grdAssets.DataBind();
}
protected void grdAssets_Sorting(object sender, GridViewSortEventArgs e) { }
protected void grdAssets_RowCommand(object sender, GridViewCommandEventArgs e)
{
    if (e.CommandName == "Page")
        return;
    int rowIndex;
    if (Int32.TryParse(e.CommandArgument.ToString(), out rowIndex))
    {
        dtsAssets.SelectedIndex = rowIndex;
		object currentEntity = dtsAssets.Current;
        if ((currentEntity is Sage.Platform.ComponentModel.ComponentView) && !((Sage.Platform.ComponentModel.ComponentView)currentEntity).IsVirtualComponent)
            currentEntity = ((Sage.Platform.ComponentModel.ComponentView)currentEntity).Component;
		string id = String.Empty;
        //Check if this is an unpersisted entity and use its InstanceId
        if (Sage.Platform.WebPortal.PortalUtil.ObjectIsNewEntity(currentEntity))
        {
		    if (grdAssets.DataKeys[0].Values.Count > 1) {
                foreach (DictionaryEntry val in grdAssets.DataKeys[rowIndex].Values)
                {
                    if (val.Key.ToString() == "InstanceId")
                    {
                        Guid instanceId = (Guid)val.Value;
                        dtsAssets.SetCurrentEntityByInstanceId(instanceId);
                        id = instanceId.ToString();
		                currentEntity = dtsAssets.Current;
                        if ((currentEntity is Sage.Platform.ComponentModel.ComponentView) && !((Sage.Platform.ComponentModel.ComponentView)currentEntity).IsVirtualComponent)
                            currentEntity = ((Sage.Platform.ComponentModel.ComponentView)currentEntity).Component;
                    }
                }                 
            }
        }
        else
        {
            foreach (DictionaryEntry val in grdAssets.DataKeys[rowIndex].Values)
            {
                if (val.Key.ToString() != "InstanceId")
                {
                    id = val.Value.ToString();
                }
            }
        }		
		if (e.CommandName.Equals("Delete"))
		{
            Sage.Entity.Interfaces.ITicket mainentity = this.BindingSource.Current as Sage.Entity.Interfaces.ITicket;
			if (mainentity != null)
			{
			    Sage.Entity.Interfaces.ITicketAccountProduct childEntity = null;
			    if((currentEntity != null) && (currentEntity is Sage.Entity.Interfaces.ITicketAccountProduct))
			    {
			        childEntity = (Sage.Entity.Interfaces.ITicketAccountProduct)currentEntity;    
			    }
			    else if (id != null)
			    {
                    childEntity = Sage.Platform.EntityFactory.GetById<Sage.Entity.Interfaces.ITicketAccountProduct>(id);
            }
				if(childEntity != null)
				{
			         mainentity.AccountProducts.Remove(childEntity);
					 mainentity.Save();
					 if((childEntity.PersistentState & Sage.Platform.Orm.Interfaces.PersistentState.New) <= 0)
					 {
					     childEntity.Delete();
					 }
					 dtsAssets.SelectedIndex = -1;
			    }
		    }
		}
	}
    grdAssets_refresh();
}
	
	protected void grdAssets_refresh()
	{
		if (PageWorkItem != null) {
			Sage.Platform.WebPortal.Services.IPanelRefreshService refresher = PageWorkItem.Services.Get<Sage.Platform.WebPortal.Services.IPanelRefreshService>();
			if (refresher != null)
			{
				refresher.RefreshAll();
			}
			else
			{
				Response.Redirect(Request.Url.ToString());
			}
		}
	}
	
            protected void grdAssets_RowDeleting(object sender, GridViewDeleteEventArgs e)
	{
		grdAssets.SelectedIndex = -1;
	}
	</script>
 

 <SalesLogix:SmartPartToolsContainer runat="server" ID="TicketAssets_RTools" ToolbarLocation="right">
   <SalesLogix:LookupControl runat="server" ID="lueAssociateAsset"  ToolTip="<%$ resources: lueAssociateAsset.ToolTip %>" LookupEntityName="AccountProduct" LookupEntityTypeName="Sage.Entity.Interfaces.IAccountProduct, Sage.Entity.Interfaces, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" LookupDisplayMode="ButtonOnly" SeedProperty="Account.Id" AutoPostBack="true" LookupImageURL="~/ImageResource.axd?scope=global&type=Global_Images&key=plus_16x16"  >
<LookupProperties>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueAssociateAsset.LookupProperties.SerialNumber.PropertyHeader %>" PropertyName="SerialNumber" PropertyType="" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueAssociateAsset.LookupProperties.ProductName.PropertyHeader %>" PropertyName="ProductName" PropertyType="" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueAssociateAsset.LookupProperties.ActualId.PropertyHeader %>" PropertyName="ActualId" PropertyType="" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
</LookupProperties>
<LookupPreFilters>
</LookupPreFilters>
</SalesLogix:LookupControl>
                 

  <SalesLogix:PageLink ID="lnkTicketAssetsHelp" runat="server" LinkType="HelpFileName" ToolTip="<%$ resources: Portal, Help_ToolTip %>" Target="MCWebHelp" NavigateUrl="csrticketrelatedassetstab.htm" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Help_16x16"></SalesLogix:PageLink> </SalesLogix:SmartPartToolsContainer>

<script runat="server" type="text/C#">
private Sage.Platform.Security.IRoleSecurityService _roleSecurityService;
/// <summary>
/// Gets or sets the role security service.
/// </summary>
/// <value>The role security service.</value>
[Sage.Platform.Application.ServiceDependency]
public Sage.Platform.Security.IRoleSecurityService RoleSecurityService
{
   set
      {
         _roleSecurityService = Sage.Platform.Application.ApplicationContext.Current.Services.Get<Sage.Platform.Security.IRoleSecurityService>(true);
      }
      get
      {
         return _roleSecurityService;
      }
}

public override Type EntityType
{
	get { return typeof(Sage.Entity.Interfaces.ITicket); }
}

 private Sage.Platform.WebPortal.Binding.WebEntityListBindingSource _dtsAssets;
public Sage.Platform.WebPortal.Binding.WebEntityListBindingSource dtsAssets
{ 
  get 
  {
    if (_dtsAssets == null)
    {
             _dtsAssets = new Sage.Platform.WebPortal.Binding.WebEntityListBindingSource(typeof(Sage.Entity.Interfaces.ITicketAccountProduct), 
	    EntityType              ,"AccountProducts", System.Reflection.MemberTypes.Property);
                   _dtsAssets.UseSmartQuery = true;
      	   	}
 	return _dtsAssets;
  }
}

void dtsAssets_OnCurrentEntitySet(object sender, EventArgs e) 
{
      if (Visible)
    { 
		if(BindingSource.Current != null)
		{
		
      
        dtsAssets.SourceObject = BindingSource.Current;
   		}
    }
   if (Visible)
   {   
      RegisterBindingsWithClient(dtsAssets);
   }
}

 



 

protected override void OnAddEntityBindings() { 
       dtsAssets.Bindings.Add(new Sage.Platform.WebPortal.Binding.WebEntityListBinding("AccountProducts", grdAssets ));
   dtsAssets.BindFieldNames = new String[] { "Id","AccountProduct.ProductName","AccountProduct.SerialNumber","AccountProduct.ActualId","AccountProduct.Evaluation" };
     
     BindingSource.OnCurrentEntitySet += new EventHandler(dtsAssets_OnCurrentEntitySet);
     
    }
	   
protected void lueAssociateAsset_ChangeAction(object sender, EventArgs e) {
    if (lueAssociateAsset.LookupResultValue != null)
    {
        Sage.Entity.Interfaces.ITicket parentEntity = BindingSource.Current as Sage.Entity.Interfaces.ITicket;
        Sage.Entity.Interfaces.IAccountProduct relatedEntity = lueAssociateAsset.LookupResultValue as Sage.Entity.Interfaces.IAccountProduct;
        Sage.Platform.WebPortal.EntityPage page = (Sage.Platform.WebPortal.EntityPage)Page;
		// check for duplicates
        bool found = false;
        if ((parentEntity != null) && (relatedEntity != null))
        {
		        Sage.Entity.Interfaces.ITicketAccountProduct relationshipEntity = Sage.Platform.EntityFactory.Create<Sage.Entity.Interfaces.ITicketAccountProduct>();
		if (!found)
        {
            relationshipEntity.Ticket = parentEntity;
            relationshipEntity.AccountProduct = relatedEntity;
            parentEntity.AccountProducts.Add(relationshipEntity);
            dtsAssets.SelectedMember = relationshipEntity;
            if (page.ModeId.ToUpper() != "INSERT")
            {
				parentEntity.Save();
            }
		}
        }
    }

}

protected override void OnWireEventHandlers()
{
 base.OnWireEventHandlers();
 lueAssociateAsset.LookupResultValueChanged += new EventHandler(lueAssociateAsset_ChangeAction);


}

protected override void OnFormBound()
{
ClientBindingMgr.RegisterBoundControl(lueAssociateAsset);

if (dtsAssets.SourceObject == null) { dtsAssets.SourceObject = BindingSource.Current; }
if (dtsAssets.SourceObject == null) { RegisterBindingsWithClient(dtsAssets); }
dtsAssets.Bind();



}



public override Sage.Platform.Application.UI.ISmartPartInfo GetSmartPartInfo(Type smartPartInfoType)
{
	ToolsSmartPartInfo tinfo = new ToolsSmartPartInfo();
    	if (BindingSource != null)
	{
		if (BindingSource.Current != null)
		{
			tinfo.Description = BindingSource.Current.ToString();
			tinfo.Title = BindingSource.Current.ToString();
		}
	}
    	
	foreach (Control c in Controls)
	{
		SmartPartToolsContainer cont = c as SmartPartToolsContainer;
		if (cont != null)
		{
			switch (cont.ToolbarLocation)
			{
				case SmartPartToolsLocation.Right:
					foreach (Control tool in cont.Controls)
					{
											tinfo.RightTools.Add(tool);
										}
					break;
				case SmartPartToolsLocation.Center:
					foreach (Control tool in cont.Controls)
					{
						tinfo.CenterTools.Add(tool);
					}
					break;
				case SmartPartToolsLocation.Left:
					foreach (Control tool in cont.Controls)
					{
						tinfo.LeftTools.Add(tool);
					}
					break;
			}
		}
	}
	
		return tinfo;
}

private Sage.Platform.Controls.IEntityForm _formAdapter;

public Sage.Platform.Controls.IEntityForm FormAdapter
{
	get { return _formAdapter ?? (_formAdapter = new TicketAssetsAdapter(this)); }
}

public class TicketAssetsAdapter : Sage.Platform.WebPortal.Adapters.EntityFormAdapter, Sage.Form.Interfaces.ITicketAssets
{
	public TicketAssetsAdapter(Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider smartPart)
		: base(smartPart) {}

	private Sage.Platform.Controls.IDataGridControl _grdAssets;
	public Sage.Platform.Controls.IDataGridControl grdAssets
	{
		get { return FindControl(ref _grdAssets, "grdAssets"); }
	}
	private Sage.Platform.Controls.IDataSourceControl _dtsAssets;
	public Sage.Platform.Controls.IDataSourceControl dtsAssets
	{
		get { return FindControl(ref _dtsAssets, "dtsAssets"); }
	}
	private Sage.Platform.Controls.ILookupControl _lueAssociateAsset;
	public Sage.Platform.Controls.ILookupControl lueAssociateAsset
	{
		get { return FindControl(ref _lueAssociateAsset, "lueAssociateAsset"); }
	}

}

</script>

<script type="text/javascript">
</script>
