<%@ Control Language="C#" ClassName="EditOpportunityContact" Inherits="Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider" %>
<%@ Register Assembly="Sage.SalesLogix.Client.GroupBuilder" Namespace="Sage.SalesLogix.Client.GroupBuilder" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.PickList" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.DependencyLookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Lookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Timeline" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.HighLevelTypes" Namespace="Sage.SalesLogix.HighLevelTypes" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.Platform.WebPortal" Namespace="Sage.Platform.WebPortal.SmartParts" TagPrefix="SalesLogix" %>
<%//------------------------------------------------------------------------
//This file was generated by a tool.  Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//------------------------------------------------------------------------ %>
<table border="0" cellpadding="1" cellspacing="0" class="formtable">
         <col width="50%" />
            <col width="50%" />
     <tr>
            <td  >
 <div class=" lbl alignleft" >
   <asp:Label ID="txtContact_lbl" AssociatedControlID="txtContact" runat="server" Text="<%$ resources: txtContact.Caption %>" ></asp:Label>
 </div>
  <div  class="textcontrol"   >
<asp:TextBox runat="server" ID="txtContact" ReadOnly="true" Rows="1"
 />
  </div>

      </td>
                <td  >
<div class="slxlabel  alignleft checkbox">
  <SalesLogix:SLXCheckBox runat="server" ID="IsPrimary" CssClass="checkbox "
 Text="<%$ resources: IsPrimary.Caption %>" TextAlign="left"  />
</div>
      </td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft" >
   <asp:Label ID="txtTitle_lbl" AssociatedControlID="txtTitle" runat="server" Text="<%$ resources: txtTitle.Caption %>" ></asp:Label>
 </div>
  <div  class="textcontrol"   >
<asp:TextBox runat="server" ID="txtTitle" ReadOnly="true" Rows="1"
MaxLength="64"
 />
  </div>

      </td>
                <td></td>
      </tr>
<tr>
            <td  colspan="2" >
 <div class="twocollbl alignleft">
   <asp:Label ID="pklSalesRole_lbl" AssociatedControlID="pklSalesRole" runat="server" Text="<%$ resources: pklSalesRole.Caption %>" ></asp:Label>
 </div>   
   <div  class="twocoltextcontrol picklist"  > 
    <SalesLogix:PickListControl runat="server" ID="pklSalesRole" PickListId="kSYST0000363" PickListName="Role" MustExistInList="false" AlphaSort="true"  />
  </div>

      </td>
            </tr>
<tr>
            <td  colspan="2" >
 <div class="twocollbl alignleft">
   <asp:Label ID="lueCompetitorPref_lbl" AssociatedControlID="lueCompetitorPref" runat="server" Text="<%$ resources: lueCompetitorPref.Caption %>" ></asp:Label>
 </div>   
  <div  class="twocoltextcontrol lookup"  >
<SalesLogix:LookupControl runat="server" ID="lueCompetitorPref" ButtonToolTip="<%$ resources: lueCompetitorPref.ButtonToolTip %>" LookupEntityName="Competitor" LookupEntityTypeName="Sage.SalesLogix.Entities.Competitor, Sage.SalesLogix.Entities"  >
<LookupProperties>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueCompetitorPref.LookupProperties.CompetitorName.PropertyHeader %>" PropertyName="CompetitorName" PropertyType="" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueCompetitorPref.LookupProperties.Rating.PropertyHeader %>" PropertyName="Rating" PropertyType="" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="True"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueCompetitorPref.LookupProperties.Strengths.PropertyHeader %>" PropertyName="Strengths" PropertyType="" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
</LookupProperties>
<LookupPreFilters>
</LookupPreFilters>
</SalesLogix:LookupControl>
  </div>

      </td>
            </tr>
<tr>
            <td  colspan="2" >
 <div class="twocollbl alignleft">
   <asp:Label ID="txtStanding_lbl" AssociatedControlID="txtStanding" runat="server" Text="<%$ resources: txtStanding.Caption %>" ></asp:Label>
 </div>   
   <div  class="twocoltextcontrol picklist"  > 
    <SalesLogix:PickListControl runat="server" ID="txtStanding" PickListId="kSYST0000369" PickListName="Standing" NoneEditable="true"  />
  </div>

      </td>
            </tr>
<tr>
            <td  colspan="2" >
 <div class="twocollbl alignleft" >
   <asp:Label ID="txtStrategy_lbl" AssociatedControlID="txtStrategy" runat="server" Text="<%$ resources: txtStrategy.Caption %>" ></asp:Label>
 </div>
  <div  class="twocoltextcontrol"   >
<asp:TextBox runat="server" ID="txtStrategy" Rows="4"
TextMode="MultiLine" Columns="40"
MultiLineMaxLength="64" onkeyup="doTextBoxKeyUp(this);" onpaste="doTextBoxPaste(this);"  />
  </div>

      </td>
            </tr>
<tr>
            <td  >
 <div class=" lbl alignleft" >
   <asp:Label ID="txtPersonalBenefits_lbl" AssociatedControlID="txtPersonalBenefits" runat="server" Text="<%$ resources: txtPersonalBenefits.Caption %>" ></asp:Label>
 </div>
  <div  class="textcontrol"   >
<asp:TextBox runat="server" ID="txtPersonalBenefits" Rows="1"
 />
  </div>

      </td>
                <td  >
 <div class=" lbl alignleft" >
   <asp:Label ID="txtIssues_lbl" AssociatedControlID="txtIssues" runat="server" Text="<%$ resources: txtIssues.Caption %>" ></asp:Label>
 </div>
  <div  class="textcontrol"   >
<asp:TextBox runat="server" ID="txtIssues" Rows="4"
TextMode="MultiLine" Columns="40"
MultiLineMaxLength="128" onkeyup="doTextBoxKeyUp(this);" onpaste="doTextBoxPaste(this);"  />
  </div>

      </td>
      </tr>
<tr>
            <td></td>
                <td  >
<asp:Panel runat="server" ID="ctrlstButtons" CssClass="controlslist qfActionContainer"
>
   <asp:Button runat="server" ID="cmdOK"
 Text="<%$ resources: cmdOK.Caption %>" CssClass="slxbutton"  />
   
   <asp:Button runat="server" ID="cmdCancel"
 Text="<%$ resources: cmdCancel.Caption %>" CssClass="slxbutton"  />
 
</asp:Panel>
      </td>
      </tr>
</table>
 

 <SalesLogix:SmartPartToolsContainer runat="server" ID="EditOpportunityContact_RTools" ToolbarLocation="right">
  <SalesLogix:PageLink ID="lnkEditOpportunityContactHelp" runat="server" LinkType="HelpFileName" ToolTip="<%$ resources: Portal, Help_ToolTip %>" Target="MCWebHelp" NavigateUrl="oppeditcontact.htm" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Help_16x16"></SalesLogix:PageLink> </SalesLogix:SmartPartToolsContainer>

<script runat="server" type="text/C#">
private Sage.Platform.Security.IRoleSecurityService _roleSecurityService;
/// <summary>
/// Gets or sets the role security service.
/// </summary>
/// <value>The role security service.</value>
[Sage.Platform.Application.ServiceDependency]
public Sage.Platform.Security.IRoleSecurityService RoleSecurityService
{
   set
      {
         _roleSecurityService = Sage.Platform.Application.ApplicationContext.Current.Services.Get<Sage.Platform.Security.IRoleSecurityService>(true);
      }
      get
      {
         return _roleSecurityService;
      }
}

public override Type EntityType
{
	get { return typeof(Sage.Entity.Interfaces.IOpportunityContact); }
}

 

protected override void OnAddEntityBindings() { 
                    // txtContact.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtContactTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Contact.NameLF", txtContact, "Text");
        BindingSource.Bindings.Add(txtContactTextBinding);
                       // IsPrimary.Checked Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding IsPrimaryCheckedBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("IsPrimary", IsPrimary, "Checked");
        BindingSource.Bindings.Add(IsPrimaryCheckedBinding);
                       // txtTitle.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtTitleTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Contact.Title", txtTitle, "Text");
        BindingSource.Bindings.Add(txtTitleTextBinding);
                       // pklSalesRole.PickListValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding pklSalesRolePickListValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("SalesRole", pklSalesRole, "PickListValue");
        BindingSource.Bindings.Add(pklSalesRolePickListValueBinding);
                       // lueCompetitorPref.LookupResultValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding lueCompetitorPrefLookupResultValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Competitors", lueCompetitorPref, "LookupResultValue");
        BindingSource.Bindings.Add(lueCompetitorPrefLookupResultValueBinding);
                       // txtStanding.PickListValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtStandingPickListValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Standing", txtStanding, "PickListValue");
        BindingSource.Bindings.Add(txtStandingPickListValueBinding);
                       // txtStrategy.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtStrategyTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Strategy", txtStrategy, "Text");
        BindingSource.Bindings.Add(txtStrategyTextBinding);
                       // txtPersonalBenefits.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtPersonalBenefitsTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("PersonalBenefits", txtPersonalBenefits, "Text");
        BindingSource.Bindings.Add(txtPersonalBenefitsTextBinding);
                       // txtIssues.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtIssuesTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Issues", txtIssues, "Text");
        BindingSource.Bindings.Add(txtIssuesTextBinding);
       
        
        
     
   
}
	   	   	   	   	   	   	   	   	   	   	   	   
protected void cmdOK_ClickAction(object sender, EventArgs e) {
Sage.Platform.DynamicMethod.DynamicMethodLibrary lib = Sage.Platform.Orm.DynamicMethodLibraryHelper.Instance;
Object[] methodArgs = new Object[] { FormAdapter, e };
lib.Execute("EditOpportunityContact.cmdOK_OnClick", methodArgs);
}

protected override void OnWireEventHandlers()
{
 base.OnWireEventHandlers();
 cmdOK.Click += new EventHandler(cmdOK_ClickAction);
cmdOK.Click += new EventHandler(DialogService.CloseEventHappened);
cmdOK.Click += new EventHandler(Refresh);
cmdCancel.Click += new EventHandler(DialogService.CloseEventHappened);


}

protected override void OnFormBound()
{
ClientBindingMgr.RegisterSaveButton(cmdOK);

ScriptManager.RegisterStartupScript(Page, GetType(), "cleanupcontainer", "jQuery(\".controlslist > div:empty\").remove();", true);
ClientBindingMgr.RegisterDialogCancelButton(cmdCancel);


}



public override Sage.Platform.Application.UI.ISmartPartInfo GetSmartPartInfo(Type smartPartInfoType)
{
	ToolsSmartPartInfo tinfo = new ToolsSmartPartInfo();
    	
	foreach (Control c in Controls)
	{
		SmartPartToolsContainer cont = c as SmartPartToolsContainer;
		if (cont != null)
		{
			switch (cont.ToolbarLocation)
			{
				case SmartPartToolsLocation.Right:
					foreach (Control tool in cont.Controls)
					{
											tinfo.RightTools.Add(tool);
										}
					break;
				case SmartPartToolsLocation.Center:
					foreach (Control tool in cont.Controls)
					{
						tinfo.CenterTools.Add(tool);
					}
					break;
				case SmartPartToolsLocation.Left:
					foreach (Control tool in cont.Controls)
					{
						tinfo.LeftTools.Add(tool);
					}
					break;
			}
		}
	}
	
		return tinfo;
}

private Sage.Platform.Controls.IEntityForm _formAdapter;

public Sage.Platform.Controls.IEntityForm FormAdapter
{
	get { return _formAdapter ?? (_formAdapter = new EditOpportunityContactAdapter(this)); }
}

public class EditOpportunityContactAdapter : Sage.Platform.WebPortal.Adapters.EntityFormAdapter, Sage.Form.Interfaces.IEditOpportunityContact
{
	public EditOpportunityContactAdapter(Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider smartPart)
		: base(smartPart) {}

	private Sage.Platform.Controls.ITextBoxControl _txtContact;
	public Sage.Platform.Controls.ITextBoxControl txtContact
	{
		get { return FindControl(ref _txtContact, "txtContact"); }
	}
	private Sage.Platform.Controls.ITextBoxControl _txtTitle;
	public Sage.Platform.Controls.ITextBoxControl txtTitle
	{
		get { return FindControl(ref _txtTitle, "txtTitle"); }
	}
	private Sage.Platform.Controls.IPickListControl _pklSalesRole;
	public Sage.Platform.Controls.IPickListControl pklSalesRole
	{
		get { return FindControl(ref _pklSalesRole, "pklSalesRole"); }
	}
	private Sage.Platform.Controls.ILookupControl _lueCompetitorPref;
	public Sage.Platform.Controls.ILookupControl lueCompetitorPref
	{
		get { return FindControl(ref _lueCompetitorPref, "lueCompetitorPref"); }
	}
	private Sage.Platform.Controls.IPickListControl _txtStanding;
	public Sage.Platform.Controls.IPickListControl txtStanding
	{
		get { return FindControl(ref _txtStanding, "txtStanding"); }
	}
	private Sage.Platform.Controls.ITextBoxControl _txtStrategy;
	public Sage.Platform.Controls.ITextBoxControl txtStrategy
	{
		get { return FindControl(ref _txtStrategy, "txtStrategy"); }
	}
	private Sage.Platform.Controls.ITextBoxControl _txtPersonalBenefits;
	public Sage.Platform.Controls.ITextBoxControl txtPersonalBenefits
	{
		get { return FindControl(ref _txtPersonalBenefits, "txtPersonalBenefits"); }
	}
	private Sage.Platform.Controls.ICheckBoxControl _IsPrimary;
	public Sage.Platform.Controls.ICheckBoxControl IsPrimary
	{
		get { return FindControl(ref _IsPrimary, "IsPrimary"); }
	}
	private Sage.Platform.Controls.ITextBoxControl _txtIssues;
	public Sage.Platform.Controls.ITextBoxControl txtIssues
	{
		get { return FindControl(ref _txtIssues, "txtIssues"); }
	}
	private Sage.Platform.Controls.IControlsListControl _ctrlstButtons;
	public Sage.Platform.Controls.IControlsListControl ctrlstButtons
	{
		get { return FindControl(ref _ctrlstButtons, "ctrlstButtons"); }
	}
	private Sage.Platform.Controls.IButtonControl _cmdOK;
	public Sage.Platform.Controls.IButtonControl cmdOK
	{
		get { return FindControl(ref _cmdOK, "cmdOK"); }
	}
	private Sage.Platform.Controls.IButtonControl _cmdCancel;
	public Sage.Platform.Controls.IButtonControl cmdCancel
	{
		get { return FindControl(ref _cmdCancel, "cmdCancel"); }
	}

	public void cmdOK_OnClick(System.EventArgs e)
	{
		Sage.Platform.DynamicMethod.DynamicMethodLibrary lib = Sage.Platform.Orm.DynamicMethodLibraryHelper.Instance;
		Object[] methodArgs = new Object[] { this, e };
		lib.Execute("EditOpportunityContact.cmdOK_OnClick", methodArgs);
	}
}

</script>

<script type="text/javascript">
</script>
