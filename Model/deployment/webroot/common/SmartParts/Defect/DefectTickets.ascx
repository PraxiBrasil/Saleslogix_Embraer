<%@ Control Language="C#" ClassName="DefectTickets" Inherits="Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider" %>
<%@ Register Assembly="Sage.SalesLogix.Client.GroupBuilder" Namespace="Sage.SalesLogix.Client.GroupBuilder" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.PickList" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.DependencyLookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Lookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Timeline" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.HighLevelTypes" Namespace="Sage.SalesLogix.HighLevelTypes" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.Platform.WebPortal" Namespace="Sage.Platform.WebPortal.SmartParts" TagPrefix="SalesLogix" %>
<%//------------------------------------------------------------------------
//This file was generated by a tool.  Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//------------------------------------------------------------------------ %>
<table border="0" cellpadding="1" cellspacing="0" class="formtable">
         <col width="50%" />
            <col width="50%" />
     <tr>
            <td rowspan="3"  >
<SalesLogix:SlxGridView runat="server" ID="grdTickets" GridLines="None"
AutoGenerateColumns="false" CellPadding="4" CssClass="datagrid" PagerStyle-CssClass="gridPager"
AlternatingRowStyle-CssClass="rowdk" RowStyle-CssClass="rowlt" SelectedRowStyle-CssClass="rowSelected" ShowEmptyTable="true" EnableViewState="false"
 AllowPaging="true" PageSize="20" OnPageIndexChanging="grdTicketspage_changing" EmptyTableRowText="<%$ resources: grdTickets.EmptyTableRowText %>"  ExpandableRows="True" ResizableColumns="True"  OnRowCommand="grdTickets_RowCommand" 
 DataKeyNames="InstanceId,Id" 
 AllowSorting="true" OnSorting="grdTickets_Sorting"  OnRowDeleting="grdTickets_RowDeleting" OnRowDataBound="grdTickets_RowDataBound"  ShowSortIcon="true" >
<Columns>
 <asp:CommandField ShowSelectButton="true"
  SelectText="<%$ resources: grdTickets.619d19e7-5041-48c9-9235-674195608f7c.Text %>" ButtonType="link" 
             >
  	    </asp:CommandField>
    <asp:TemplateField   HeaderText="<%$ resources: grdTickets.a9e5488e-26dc-431b-94b4-18b6f1514df9.ColumnHeading %>"       SortExpression="Ticket.TicketNumber"  >
    <itemtemplate>
      <SalesLogix:PageLink runat="server" NavigateUrl="Ticket"
   EntityId='<%# dtsTickets.getPropertyValue(Container.DataItem, "Ticket.Id") %>'     Text='<%# dtsTickets.getPropertyValue(Container.DataItem, "Ticket.TicketNumber") %>' 
         LinkType="EntityAlias"></SalesLogix:PageLink>
     </itemtemplate></asp:TemplateField>
      <asp:TemplateField   HeaderText="<%$ resources: grdTickets.dc2c7ac9-9408-4400-b15f-d32d4f238399.ColumnHeading %>"       SortExpression="Ticket.ReceivedDate"  >
    <itemtemplate>
   <SalesLogix:DateTimePicker runat="server" ID="grdTicketscol3" DisplayTime="false"  DisplayMode="AsText" DateTimeValue='<%#  dtsTickets.getPropertyValue(Container.DataItem, "Ticket.ReceivedDate")  %>'  CssClass=""  />
   </itemtemplate></asp:TemplateField>
    <asp:TemplateField   HeaderText="<%$ resources: grdTickets.9bf656da-d7e7-4548-aea1-ee4f534ad6c5.ColumnHeading %>"       SortExpression="Ticket.Account.AccountName"  >
    <itemtemplate>
      <SalesLogix:PageLink runat="server" NavigateUrl="Account"
   EntityId='<%# dtsTickets.getPropertyValue(Container.DataItem, "Ticket.Account.Id") %>'     Text='<%# dtsTickets.getPropertyValue(Container.DataItem, "Ticket.Account.AccountName") %>' 
         LinkType="EntityAlias"></SalesLogix:PageLink>
     </itemtemplate></asp:TemplateField>
      <asp:TemplateField   HeaderText="<%$ resources: grdTickets.f8a85f43-b45e-4818-9384-ce7bdeb11594.ColumnHeading %>"       SortExpression="Ticket.StatusCode"  >
    <itemtemplate>
   <SalesLogix:PickListControl runat="server" ID="grdTicketscol5" PickListId="" ValueStoredAsText="False" PickListName="Ticket Status" PickListValue='<%#  dtsTickets.getPropertyValue(Container.DataItem, "Ticket.StatusCode")  %>' DisplayMode="AsText" CssClass="" />
   </itemtemplate></asp:TemplateField>
    <asp:BoundField DataField="Ticket.Urgency.Description" 
      HeaderText="<%$ resources: grdTickets.5abc88c5-6391-4eae-b924-a00f0f1ee021.ColumnHeading %>"       SortExpression="Ticket.Urgency.Description"    >
      </asp:BoundField>
    <asp:TemplateField   HeaderText="<%$ resources: grdTickets.91701bdf-1c41-4bcf-92c9-0c7158b9b91b.ColumnHeading %>"       SortExpression="Ticket.NeededByDate"  >
    <itemtemplate>
   <SalesLogix:DateTimePicker runat="server" ID="grdTicketscol7" DisplayTime="false"  DisplayMode="AsText" DateTimeValue='<%#  dtsTickets.getPropertyValue(Container.DataItem, "Ticket.NeededByDate")  %>'  CssClass=""  />
   </itemtemplate></asp:TemplateField>
   <asp:ButtonField CommandName="Delete" 
  Text="<%$ resources: grdTickets.5da526ca-9ac5-452f-9f48-74405ee66ea1.Text %>"                >
  	    </asp:ButtonField>
   </Columns>
    <PagerSettings Mode="NumericFirstLast" FirstPageImageUrl="ImageResource.axd?scope=global&type=Global_Images&key=Start_16x16" LastPageImageUrl="ImageResource.axd?scope=global&type=Global_Images&key=End_16x16" />
</SalesLogix:SlxGridView>

<script runat="server" type="text/C#">

                        private int _grdTicketsdeleteColumnIndex = -2;
protected int grdTicketsDeleteColumnIndex
{
	get
	{
		if (_grdTicketsdeleteColumnIndex == -2)
		{
			int bias = (grdTickets.ExpandableRows) ? 1 : 0;
			_grdTicketsdeleteColumnIndex = -1;
			int colcount = 0;
			foreach (DataControlField col in grdTickets.Columns)
			{
				ButtonField btn = col as ButtonField;
				if (btn != null)
				{
					if (btn.CommandName == "Delete")
					{
						_grdTicketsdeleteColumnIndex = colcount + bias;
						break;
					}
				}
				colcount++;
			}
		}
		return _grdTicketsdeleteColumnIndex;
	}
}

protected void grdTickets_RowDataBound(object sender, GridViewRowEventArgs e)
{
	if (e.Row.RowType == DataControlRowType.DataRow)
	{
		if ((grdTicketsDeleteColumnIndex >= 0) && (grdTicketsDeleteColumnIndex < e.Row.Cells.Count))
		{
			TableCell cell = e.Row.Cells[grdTicketsDeleteColumnIndex];
			foreach (Control c in cell.Controls)
			{
				LinkButton btn = c as LinkButton;
				if (btn != null)
				{
					btn.Attributes.Add("onclick", "javascript: return confirm('" + Sage.Platform.WebPortal.PortalUtil.JavaScriptEncode(GetLocalResourceObject("grdTickets.5da526ca-9ac5-452f-9f48-74405ee66ea1.ConfirmationMessage").ToString()) + "');");
					return;
				}
			}
		}
	}
}
   
protected void grdTicketspage_changing(object sender, GridViewPageEventArgs e)
{
 grdTickets.PageIndex = e.NewPageIndex;
 grdTickets.DataBind();
}
protected void grdTickets_Sorting(object sender, GridViewSortEventArgs e) { }
protected void grdTickets_RowCommand(object sender, GridViewCommandEventArgs e)
{
    if (e.CommandName == "Page")
        return;
    int rowIndex;
    if (Int32.TryParse(e.CommandArgument.ToString(), out rowIndex))
    {
        dtsTickets.SelectedIndex = rowIndex;
		object currentEntity = dtsTickets.Current;
        if ((currentEntity is Sage.Platform.ComponentModel.ComponentView) && !((Sage.Platform.ComponentModel.ComponentView)currentEntity).IsVirtualComponent)
            currentEntity = ((Sage.Platform.ComponentModel.ComponentView)currentEntity).Component;
		string id = String.Empty;
        //Check if this is an unpersisted entity and use its InstanceId
        if (Sage.Platform.WebPortal.PortalUtil.ObjectIsNewEntity(currentEntity))
        {
		    if (grdTickets.DataKeys[0].Values.Count > 1) {
                foreach (DictionaryEntry val in grdTickets.DataKeys[rowIndex].Values)
                {
                    if (val.Key.ToString() == "InstanceId")
                    {
                        Guid instanceId = (Guid)val.Value;
                        dtsTickets.SetCurrentEntityByInstanceId(instanceId);
                        id = instanceId.ToString();
		                currentEntity = dtsTickets.Current;
                        if ((currentEntity is Sage.Platform.ComponentModel.ComponentView) && !((Sage.Platform.ComponentModel.ComponentView)currentEntity).IsVirtualComponent)
                            currentEntity = ((Sage.Platform.ComponentModel.ComponentView)currentEntity).Component;
                    }
                }                 
            }
        }
        else
        {
            foreach (DictionaryEntry val in grdTickets.DataKeys[rowIndex].Values)
            {
                if (val.Key.ToString() != "InstanceId")
                {
                    id = val.Value.ToString();
                }
            }
        }		
		if (e.CommandName.Equals("Delete"))
		{
            Sage.Entity.Interfaces.IDefect mainentity = this.BindingSource.Current as Sage.Entity.Interfaces.IDefect;
			if (mainentity != null)
			{
			    Sage.Entity.Interfaces.IDefectTicket childEntity = null;
			    if((currentEntity != null) && (currentEntity is Sage.Entity.Interfaces.IDefectTicket))
			    {
			        childEntity = (Sage.Entity.Interfaces.IDefectTicket)currentEntity;    
			    }
			    else if (id != null)
			    {
                    childEntity = Sage.Platform.EntityFactory.GetById<Sage.Entity.Interfaces.IDefectTicket>(id);
            }
				if(childEntity != null)
				{
			         mainentity.DefectTickets.Remove(childEntity);
					 mainentity.Save();
					 if((childEntity.PersistentState & Sage.Platform.Orm.Interfaces.PersistentState.New) <= 0)
					 {
					     childEntity.Delete();
					 }
					 dtsTickets.SelectedIndex = -1;
			    }
		    }
		}
	}
    grdTickets_refresh();
}
	
	protected void grdTickets_refresh()
	{
		if (PageWorkItem != null) {
			Sage.Platform.WebPortal.Services.IPanelRefreshService refresher = PageWorkItem.Services.Get<Sage.Platform.WebPortal.Services.IPanelRefreshService>();
			if (refresher != null)
			{
				refresher.RefreshAll();
			}
			else
			{
				Response.Redirect(Request.Url.ToString());
			}
		}
	}
	
            protected void grdTickets_RowDeleting(object sender, GridViewDeleteEventArgs e)
	{
		grdTickets.SelectedIndex = -1;
	}
	</script>

      </td>
                <td  >
 <div class="lbltop alignleft">
   <asp:Label ID="txtSubject_lbl" AssociatedControlID="txtSubject" runat="server" Text="<%$ resources: txtSubject.Caption %>" ></asp:Label>
 </div>
  <div  class="twocoltextcontrol"   >
<asp:TextBox runat="server" ID="txtSubject" ReadOnly="true" Rows="1"
 />
  </div>

      </td>
      </tr>
<tr>
                  <td  >
 <div class="lbltop alignleft">
   <asp:Label ID="memDescription_lbl" AssociatedControlID="memDescription" runat="server" Text="<%$ resources: memDescription.Caption %>" ></asp:Label>
 </div>
  <div  class="twocoltextcontrol"   >
<asp:TextBox runat="server" ID="memDescription" ReadOnly="true" Rows="4"
TextMode="MultiLine" Columns="40"
 />
  </div>

      </td>
      </tr>
<tr>
                  <td  >
 <div class="lbltop alignleft">
   <asp:Label ID="memResolution_lbl" AssociatedControlID="memResolution" runat="server" Text="<%$ resources: memResolution.Caption %>" ></asp:Label>
 </div>
  <div  class="twocoltextcontrol"   >
<asp:TextBox runat="server" ID="memResolution" ReadOnly="true" Rows="4"
TextMode="MultiLine" Columns="40"
 />
  </div>

      </td>
      </tr>
<tr>
            <td></td>
                <td></td>
      </tr>
</table>
 

 <SalesLogix:SmartPartToolsContainer runat="server" ID="DefectTickets_RTools" ToolbarLocation="right">
   <SalesLogix:LookupControl runat="server" ID="lueAssociateTicket"  ToolTip="<%$ resources: lueAssociateTicket.ToolTip %>" LookupEntityName="Ticket" LookupEntityTypeName="Sage.Entity.Interfaces.ITicket, Sage.Entity.Interfaces, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" LookupDisplayMode="ButtonOnly" AutoPostBack="true" LookupImageURL="~/ImageResource.axd?scope=global&type=Global_Images&key=plus_16x16"  >
<LookupProperties>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueAssociateTicket.LookupProperties.TicketNumber.PropertyHeader %>" PropertyName="TicketNumber" PropertyType="" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueAssociateTicket.LookupProperties.Account.AccountName.PropertyHeader %>" PropertyName="Account.AccountName" PropertyType="" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueAssociateTicket.LookupProperties.Contact.NameLF.PropertyHeader %>" PropertyName="Contact.NameLF" PropertyType="" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueAssociateTicket.LookupProperties.Contact.WorkPhone.PropertyHeader %>" PropertyName="Contact.WorkPhone" PropertyType="System.String" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueAssociateTicket.LookupProperties.StatusCode.PropertyHeader %>" PropertyName="StatusCode" PropertyType="SalesLogix.PickList" PropertyFormat="PickList"  UseAsResult="True" ExcludeFromFilters="True"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueAssociateTicket.LookupProperties.Urgency.Description.PropertyHeader %>" PropertyName="Urgency.Description" PropertyType="System.String" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueAssociateTicket.LookupProperties.Area.PropertyHeader %>" PropertyName="Area" PropertyType="System.String" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
</LookupProperties>
<LookupPreFilters>
</LookupPreFilters>
</SalesLogix:LookupControl>
                 

  <SalesLogix:PageLink ID="lnkDefectTicketsHelp" runat="server" LinkType="HelpFileName" ToolTip="<%$ resources: Portal, Help_ToolTip %>" Target="MCWebHelp" NavigateUrl="defectticketstab.htm" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Help_16x16"></SalesLogix:PageLink> </SalesLogix:SmartPartToolsContainer>

<script runat="server" type="text/C#">
private Sage.Platform.Security.IRoleSecurityService _roleSecurityService;
/// <summary>
/// Gets or sets the role security service.
/// </summary>
/// <value>The role security service.</value>
[Sage.Platform.Application.ServiceDependency]
public Sage.Platform.Security.IRoleSecurityService RoleSecurityService
{
   set
      {
         _roleSecurityService = Sage.Platform.Application.ApplicationContext.Current.Services.Get<Sage.Platform.Security.IRoleSecurityService>(true);
      }
      get
      {
         return _roleSecurityService;
      }
}

public override Type EntityType
{
	get { return typeof(Sage.Entity.Interfaces.IDefect); }
}

 private Sage.Platform.WebPortal.Binding.WebEntityListBindingSource _dtsTickets;
public Sage.Platform.WebPortal.Binding.WebEntityListBindingSource dtsTickets
{ 
  get 
  {
    if (_dtsTickets == null)
    {
             _dtsTickets = new Sage.Platform.WebPortal.Binding.WebEntityListBindingSource(typeof(Sage.Entity.Interfaces.IDefectTicket), 
	    EntityType              ,"DefectTickets", System.Reflection.MemberTypes.Property);
            	   	}
 	return _dtsTickets;
  }
}

void dtsTickets_OnCurrentEntitySet(object sender, EventArgs e) 
{
      if (Visible)
    { 
		if(BindingSource.Current != null)
		{
		
      
        dtsTickets.SourceObject = BindingSource.Current;
   		}
    }
   if (Visible)
   {   
      RegisterBindingsWithClient(dtsTickets);
   }
}

 



 

protected override void OnAddEntityBindings() { 
       dtsTickets.Bindings.Add(new Sage.Platform.WebPortal.Binding.WebEntityListBinding("DefectTickets", grdTickets ));
   dtsTickets.BindFieldNames = new String[] { "Id","Ticket.TicketNumber","Ticket.Id","Ticket.ReceivedDate","Ticket.Account.AccountName","Ticket.Account.Id","Ticket.StatusCode","Ticket.Urgency.Description","Ticket.NeededByDate","Ticket.Subject","Ticket.TicketProblem.Notes","Ticket.TicketSolution.Notes" };
                        // txtSubject.Text Binding 
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtSubjectTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Ticket.Subject", txtSubject, "Text");
        dtsTickets.Bindings.Add(txtSubjectTextBinding);
                       // memDescription.Text Binding 
        Sage.Platform.WebPortal.Binding.WebEntityBinding memDescriptionTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Ticket.TicketProblem.Notes", memDescription, "Text");
        dtsTickets.Bindings.Add(memDescriptionTextBinding);
                       // memResolution.Text Binding 
        Sage.Platform.WebPortal.Binding.WebEntityBinding memResolutionTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Ticket.TicketSolution.Notes", memResolution, "Text");
        dtsTickets.Bindings.Add(memResolutionTextBinding);
    
     BindingSource.OnCurrentEntitySet += new EventHandler(dtsTickets_OnCurrentEntitySet);
     
    }
	   	   	   	   
protected void lueAssociateTicket_ChangeAction(object sender, EventArgs e) {
    if (lueAssociateTicket.LookupResultValue != null)
    {
        Sage.Entity.Interfaces.IDefect parentEntity = BindingSource.Current as Sage.Entity.Interfaces.IDefect;
        Sage.Entity.Interfaces.ITicket relatedEntity = lueAssociateTicket.LookupResultValue as Sage.Entity.Interfaces.ITicket;
        Sage.Platform.WebPortal.EntityPage page = (Sage.Platform.WebPortal.EntityPage)Page;
		// check for duplicates
        bool found = false;
        if ((parentEntity != null) && (relatedEntity != null))
        {
		        Sage.Entity.Interfaces.IDefectTicket relationshipEntity = Sage.Platform.EntityFactory.Create<Sage.Entity.Interfaces.IDefectTicket>();
		if (!found)
        {
            relationshipEntity.Defect = parentEntity;
            relationshipEntity.Ticket = relatedEntity;
            parentEntity.DefectTickets.Add(relationshipEntity);
            dtsTickets.SelectedMember = relationshipEntity;
            if (page.ModeId.ToUpper() != "INSERT")
            {
				parentEntity.Save();
            }
		}
        }
    }

}

protected override void OnWireEventHandlers()
{
 base.OnWireEventHandlers();
 lueAssociateTicket.LookupResultValueChanged += new EventHandler(lueAssociateTicket_ChangeAction);


}

protected override void OnFormBound()
{
ClientBindingMgr.RegisterBoundControl(lueAssociateTicket);

if (dtsTickets.SourceObject == null) { dtsTickets.SourceObject = BindingSource.Current; }
if (dtsTickets.SourceObject == null) { RegisterBindingsWithClient(dtsTickets); }
dtsTickets.Bind( true );



}



public override Sage.Platform.Application.UI.ISmartPartInfo GetSmartPartInfo(Type smartPartInfoType)
{
	ToolsSmartPartInfo tinfo = new ToolsSmartPartInfo();
    	
	foreach (Control c in Controls)
	{
		SmartPartToolsContainer cont = c as SmartPartToolsContainer;
		if (cont != null)
		{
			switch (cont.ToolbarLocation)
			{
				case SmartPartToolsLocation.Right:
					foreach (Control tool in cont.Controls)
					{
											tinfo.RightTools.Add(tool);
										}
					break;
				case SmartPartToolsLocation.Center:
					foreach (Control tool in cont.Controls)
					{
						tinfo.CenterTools.Add(tool);
					}
					break;
				case SmartPartToolsLocation.Left:
					foreach (Control tool in cont.Controls)
					{
						tinfo.LeftTools.Add(tool);
					}
					break;
			}
		}
	}
	
		return tinfo;
}

private Sage.Platform.Controls.IEntityForm _formAdapter;

public Sage.Platform.Controls.IEntityForm FormAdapter
{
	get { return _formAdapter ?? (_formAdapter = new DefectTicketsAdapter(this)); }
}

public class DefectTicketsAdapter : Sage.Platform.WebPortal.Adapters.EntityFormAdapter, Sage.Form.Interfaces.IDefectTickets
{
	public DefectTicketsAdapter(Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider smartPart)
		: base(smartPart) {}

	private Sage.Platform.Controls.IDataGridControl _grdTickets;
	public Sage.Platform.Controls.IDataGridControl grdTickets
	{
		get { return FindControl(ref _grdTickets, "grdTickets"); }
	}
	private Sage.Platform.Controls.ITextBoxControl _txtSubject;
	public Sage.Platform.Controls.ITextBoxControl txtSubject
	{
		get { return FindControl(ref _txtSubject, "txtSubject"); }
	}
	private Sage.Platform.Controls.ITextBoxControl _memDescription;
	public Sage.Platform.Controls.ITextBoxControl memDescription
	{
		get { return FindControl(ref _memDescription, "memDescription"); }
	}
	private Sage.Platform.Controls.ITextBoxControl _memResolution;
	public Sage.Platform.Controls.ITextBoxControl memResolution
	{
		get { return FindControl(ref _memResolution, "memResolution"); }
	}
	private Sage.Platform.Controls.IDataSourceControl _dtsTickets;
	public Sage.Platform.Controls.IDataSourceControl dtsTickets
	{
		get { return FindControl(ref _dtsTickets, "dtsTickets"); }
	}
	private Sage.Platform.Controls.ILookupControl _lueAssociateTicket;
	public Sage.Platform.Controls.ILookupControl lueAssociateTicket
	{
		get { return FindControl(ref _lueAssociateTicket, "lueAssociateTicket"); }
	}

}

</script>

<script type="text/javascript">
</script>
