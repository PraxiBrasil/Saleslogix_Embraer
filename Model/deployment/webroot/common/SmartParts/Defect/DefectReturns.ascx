<%@ Control Language="C#" ClassName="DefectReturns" Inherits="Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider" %>
<%@ Register Assembly="Sage.SalesLogix.Client.GroupBuilder" Namespace="Sage.SalesLogix.Client.GroupBuilder" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.PickList" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.DependencyLookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Lookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Timeline" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.HighLevelTypes" Namespace="Sage.SalesLogix.HighLevelTypes" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.Platform.WebPortal" Namespace="Sage.Platform.WebPortal.SmartParts" TagPrefix="SalesLogix" %>
<%//------------------------------------------------------------------------
//This file was generated by a tool.  Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//------------------------------------------------------------------------ %>
<table border="0" cellpadding="1" cellspacing="0" class="formtable">
         <col width="50%" />
            <col width="50%" />
     <tr>
            <td rowspan="5"  >
<SalesLogix:SlxGridView runat="server" ID="grdReturns" GridLines="None"
AutoGenerateColumns="false" CellPadding="4" CssClass="datagrid" PagerStyle-CssClass="gridPager"
AlternatingRowStyle-CssClass="rowdk" RowStyle-CssClass="rowlt" SelectedRowStyle-CssClass="rowSelected" ShowEmptyTable="true" EnableViewState="false"
 AllowPaging="true" PageSize="20" OnPageIndexChanging="grdReturnspage_changing" EmptyTableRowText="<%$ resources: grdReturns.EmptyTableRowText %>"  ExpandableRows="True" ResizableColumns="True"  OnRowCommand="grdReturns_RowCommand" 
 DataKeyNames="InstanceId,Id" 
 AllowSorting="true" OnSorting="grdReturns_Sorting"  OnRowDeleting="grdReturns_RowDeleting" OnRowDataBound="grdReturns_RowDataBound"  ShowSortIcon="true" >
<Columns>
 <asp:CommandField ShowSelectButton="true"
  SelectText="<%$ resources: grdReturns.3a20a9d8-2735-405c-a43e-284753a47f9d.Text %>" ButtonType="link" 
             >
  	    </asp:CommandField>
    <asp:TemplateField   HeaderText="<%$ resources: grdReturns.6e0ca51d-2f96-4d24-bd97-1d790387df64.ColumnHeading %>"       SortExpression="Return.ReturnNumber"  >
    <itemtemplate>
      <SalesLogix:PageLink runat="server" NavigateUrl="Return"
   EntityId='<%# dtsReturns.getPropertyValue(Container.DataItem, "Return.Id") %>'     Text='<%# dtsReturns.getPropertyValue(Container.DataItem, "Return.ReturnNumber") %>' 
         LinkType="EntityAlias"></SalesLogix:PageLink>
     </itemtemplate></asp:TemplateField>
      <asp:TemplateField   HeaderText="<%$ resources: grdReturns.80924fab-5e90-4ace-b938-0dc5b5ecfd08.ColumnHeading %>"       SortExpression="Return.CreateDate"  >
    <itemtemplate>
   <SalesLogix:DateTimePicker runat="server" ID="grdReturnscol3" DisplayTime="false"  DisplayMode="AsText" DateTimeValue='<%#  dtsReturns.getPropertyValue(Container.DataItem, "Return.CreateDate")  %>'  CssClass=""  />
   </itemtemplate></asp:TemplateField>
    <asp:TemplateField   HeaderText="<%$ resources: grdReturns.1e9a6eaa-994b-49c9-9ad5-06abf1c0c5c6.ColumnHeading %>"       SortExpression="Return.ReturnType"  >
    <itemtemplate>
   <SalesLogix:PickListControl runat="server" ID="grdReturnscol4" PickListId="kSYST0000401" ValueStoredAsText="True" PickListName="Return Type" PickListValue='<%#  dtsReturns.getPropertyValue(Container.DataItem, "Return.ReturnType")  %>' DisplayMode="AsText" CssClass="" />
   </itemtemplate></asp:TemplateField>
    <asp:TemplateField   HeaderText="<%$ resources: grdReturns.50f750f9-6ef2-4662-b84a-4f2794d49ac5.ColumnHeading %>"       SortExpression="Return.Status"  >
    <itemtemplate>
   <SalesLogix:PickListControl runat="server" ID="grdReturnscol5" PickListId="kSYST0000400" ValueStoredAsText="True" PickListName="Return Status" PickListValue='<%#  dtsReturns.getPropertyValue(Container.DataItem, "Return.Status")  %>' DisplayMode="AsText" CssClass="" />
   </itemtemplate></asp:TemplateField>
    <asp:TemplateField   HeaderText="<%$ resources: grdReturns.5f52577b-af59-4473-ab0e-d7b447f5a1d7.ColumnHeading %>"       SortExpression="Return.Priority"  >
    <itemtemplate>
   <SalesLogix:PickListControl runat="server" ID="grdReturnscol6" PickListId="kSYST0000399" ValueStoredAsText="True" PickListName="Return Priority" PickListValue='<%#  dtsReturns.getPropertyValue(Container.DataItem, "Return.Priority")  %>' DisplayMode="AsText" CssClass="" />
   </itemtemplate></asp:TemplateField>
   <asp:ButtonField CommandName="Delete" 
  Text="<%$ resources: grdReturns.33a0d242-3514-41e6-890e-27ca296c37ff.Text %>"                >
  	    </asp:ButtonField>
   </Columns>
    <PagerSettings Mode="NumericFirstLast" FirstPageImageUrl="ImageResource.axd?scope=global&type=Global_Images&key=Start_16x16" LastPageImageUrl="ImageResource.axd?scope=global&type=Global_Images&key=End_16x16" />
</SalesLogix:SlxGridView>

<script runat="server" type="text/C#">

                     private int _grdReturnsdeleteColumnIndex = -2;
protected int grdReturnsDeleteColumnIndex
{
	get
	{
		if (_grdReturnsdeleteColumnIndex == -2)
		{
			int bias = (grdReturns.ExpandableRows) ? 1 : 0;
			_grdReturnsdeleteColumnIndex = -1;
			int colcount = 0;
			foreach (DataControlField col in grdReturns.Columns)
			{
				ButtonField btn = col as ButtonField;
				if (btn != null)
				{
					if (btn.CommandName == "Delete")
					{
						_grdReturnsdeleteColumnIndex = colcount + bias;
						break;
					}
				}
				colcount++;
			}
		}
		return _grdReturnsdeleteColumnIndex;
	}
}

protected void grdReturns_RowDataBound(object sender, GridViewRowEventArgs e)
{
	if (e.Row.RowType == DataControlRowType.DataRow)
	{
		if ((grdReturnsDeleteColumnIndex >= 0) && (grdReturnsDeleteColumnIndex < e.Row.Cells.Count))
		{
			TableCell cell = e.Row.Cells[grdReturnsDeleteColumnIndex];
			foreach (Control c in cell.Controls)
			{
				LinkButton btn = c as LinkButton;
				if (btn != null)
				{
					btn.Attributes.Add("onclick", "javascript: return confirm('" + Sage.Platform.WebPortal.PortalUtil.JavaScriptEncode(GetLocalResourceObject("grdReturns.33a0d242-3514-41e6-890e-27ca296c37ff.ConfirmationMessage").ToString()) + "');");
					return;
				}
			}
		}
	}
}
   
protected void grdReturnspage_changing(object sender, GridViewPageEventArgs e)
{
 grdReturns.PageIndex = e.NewPageIndex;
 grdReturns.DataBind();
}
protected void grdReturns_Sorting(object sender, GridViewSortEventArgs e) { }
protected void grdReturns_RowCommand(object sender, GridViewCommandEventArgs e)
{
    if (e.CommandName == "Page")
        return;
    int rowIndex;
    if (Int32.TryParse(e.CommandArgument.ToString(), out rowIndex))
    {
        dtsReturns.SelectedIndex = rowIndex;
		object currentEntity = dtsReturns.Current;
        if ((currentEntity is Sage.Platform.ComponentModel.ComponentView) && !((Sage.Platform.ComponentModel.ComponentView)currentEntity).IsVirtualComponent)
            currentEntity = ((Sage.Platform.ComponentModel.ComponentView)currentEntity).Component;
		string id = String.Empty;
        //Check if this is an unpersisted entity and use its InstanceId
        if (Sage.Platform.WebPortal.PortalUtil.ObjectIsNewEntity(currentEntity))
        {
		    if (grdReturns.DataKeys[0].Values.Count > 1) {
                foreach (DictionaryEntry val in grdReturns.DataKeys[rowIndex].Values)
                {
                    if (val.Key.ToString() == "InstanceId")
                    {
                        Guid instanceId = (Guid)val.Value;
                        dtsReturns.SetCurrentEntityByInstanceId(instanceId);
                        id = instanceId.ToString();
		                currentEntity = dtsReturns.Current;
                        if ((currentEntity is Sage.Platform.ComponentModel.ComponentView) && !((Sage.Platform.ComponentModel.ComponentView)currentEntity).IsVirtualComponent)
                            currentEntity = ((Sage.Platform.ComponentModel.ComponentView)currentEntity).Component;
                    }
                }                 
            }
        }
        else
        {
            foreach (DictionaryEntry val in grdReturns.DataKeys[rowIndex].Values)
            {
                if (val.Key.ToString() != "InstanceId")
                {
                    id = val.Value.ToString();
                }
            }
        }		
		if (e.CommandName.Equals("Delete"))
		{
            Sage.Entity.Interfaces.IDefect mainentity = this.BindingSource.Current as Sage.Entity.Interfaces.IDefect;
			if (mainentity != null)
			{
			    Sage.Entity.Interfaces.IDefectReturn childEntity = null;
			    if((currentEntity != null) && (currentEntity is Sage.Entity.Interfaces.IDefectReturn))
			    {
			        childEntity = (Sage.Entity.Interfaces.IDefectReturn)currentEntity;    
			    }
			    else if (id != null)
			    {
                    childEntity = Sage.Platform.EntityFactory.GetById<Sage.Entity.Interfaces.IDefectReturn>(id);
            }
				if(childEntity != null)
				{
			         mainentity.DefectReturns.Remove(childEntity);
					 mainentity.Save();
					 if((childEntity.PersistentState & Sage.Platform.Orm.Interfaces.PersistentState.New) <= 0)
					 {
					     childEntity.Delete();
					 }
					 dtsReturns.SelectedIndex = -1;
			    }
		    }
		}
	}
    grdReturns_refresh();
}
	
	protected void grdReturns_refresh()
	{
		if (PageWorkItem != null) {
			Sage.Platform.WebPortal.Services.IPanelRefreshService refresher = PageWorkItem.Services.Get<Sage.Platform.WebPortal.Services.IPanelRefreshService>();
			if (refresher != null)
			{
				refresher.RefreshAll();
			}
			else
			{
				Response.Redirect(Request.Url.ToString());
			}
		}
	}
	
            protected void grdReturns_RowDeleting(object sender, GridViewDeleteEventArgs e)
	{
		grdReturns.SelectedIndex = -1;
	}
	</script>

      </td>
                <td  >
<asp:Panel runat="server" ID="ctrlstReturnInfo" CssClass="controlslist "
>
   <div class="slxlabel"><asp:Label runat="server" ID="lblReturnBy" Text="<%$ resources: lblReturnBy.Text %>"  />
</div>
   <div class="slxlabel"><asp:Label runat="server" ID="lblReturnedBy"  />
</div>
</asp:Panel>
      </td>
      </tr>
<tr>
                  <td  >
 <div class="lbltop alignleft">
   <asp:Label ID="txtReturnNotes_lbl" AssociatedControlID="txtReturnNotes" runat="server" Text="<%$ resources: txtReturnNotes.Caption %>" ></asp:Label>
 </div>
  <div  class="twocoltextcontrol"   >
<asp:TextBox runat="server" ID="txtReturnNotes" Enabled="false" ReadOnly="true" Rows="4"
TextMode="MultiLine" Columns="40"
 />
  </div>

      </td>
      </tr>
<tr>
                  <td  >
<asp:Panel runat="server" ID="ctrlstShipTo" CssClass="controlslist "
>
   <div class="slxlabel"><asp:Label runat="server" ID="lblShipInfo" Text="<%$ resources: lblShipInfo.Text %>"  />
</div>
   <div class="slxlabel"><asp:Label runat="server" ID="lblShipTo"  />
</div>
</asp:Panel>
      </td>
      </tr>
<tr>
                  <td  >
<asp:Panel runat="server" ID="ctrlShipToInfo" CssClass="controlslist "
>
    <div  class="textcontrol address"  >
    <SalesLogix:AddressControl runat="server" ID="adrShipTo" AddressDescriptionPickListName="Address Description (Account)" AddressDescriptionPickListId="kSYST0000014" Enabled="false" ShowButton="false" >
<AddressDescStyle Height="80"></AddressDescStyle> </SalesLogix:AddressControl>
</div>

   <div class=" lbl alignleft">
   <asp:Label ID="pklShipVia_lbl" AssociatedControlID="pklShipVia" runat="server" Text="<%$ resources: pklShipVia.Caption %>" ></asp:Label>
 </div>   
   <div  class="textcontrol picklist"  > 
    <SalesLogix:PickListControl runat="server" ID="pklShipVia" PickListName="Delivery Methods" MustExistInList="false" StorageMode="ID" DisplayMode="AsText"  />
  </div>

</asp:Panel>
      </td>
      </tr>
<tr>
                  <td  >
 <div class="lbltop alignleft">
   <asp:Label ID="memComments_lbl" AssociatedControlID="memComments" runat="server" Text="<%$ resources: memComments.Caption %>" ></asp:Label>
 </div>
  <div  class="twocoltextcontrol"   >
<asp:TextBox runat="server" ID="memComments" Enabled="false" ReadOnly="true" Rows="4"
TextMode="MultiLine" Columns="40"
 />
  </div>

      </td>
      </tr>
<tr>
            <td></td>
                <td></td>
      </tr>
</table>
 

 <SalesLogix:SmartPartToolsContainer runat="server" ID="DefectReturns_RTools" ToolbarLocation="right">
   <SalesLogix:LookupControl runat="server" ID="lueAssociateReturn"  ToolTip="<%$ resources: lueAssociateReturn.ToolTip %>" LookupEntityName="Return" LookupEntityTypeName="Sage.Entity.Interfaces.IReturn, Sage.Entity.Interfaces, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" LookupDisplayMode="ButtonOnly" AutoPostBack="true" LookupImageURL="~/ImageResource.axd?scope=global&type=Global_Images&key=plus_16x16"  >
<LookupProperties>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueAssociateReturn.LookupProperties.ReturnNumber.PropertyHeader %>" PropertyName="ReturnNumber" PropertyType="" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueAssociateReturn.LookupProperties.Account.AccountName.PropertyHeader %>" PropertyName="Account.AccountName" PropertyType="" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueAssociateReturn.LookupProperties.SubmittedBy.CreateUser.PropertyHeader %>" PropertyName="SubmittedBy.CreateUser" PropertyType="" PropertyFormat="User"  UseAsResult="True" ExcludeFromFilters="True"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueAssociateReturn.LookupProperties.ShipTo.NameLF.PropertyHeader %>" PropertyName="ShipTo.NameLF" PropertyType="" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="True"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueAssociateReturn.LookupProperties.Ticket.TicketNumber.PropertyHeader %>" PropertyName="Ticket.TicketNumber" PropertyType="" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
</LookupProperties>
<LookupPreFilters>
</LookupPreFilters>
</SalesLogix:LookupControl>
                 

  <SalesLogix:PageLink ID="lnkDefectReturnsHelp" runat="server" LinkType="HelpFileName" ToolTip="<%$ resources: Portal, Help_ToolTip %>" Target="MCWebHelp" NavigateUrl="defectreturnstab.htm" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Help_16x16"></SalesLogix:PageLink> </SalesLogix:SmartPartToolsContainer>

<script runat="server" type="text/C#">
private Sage.Platform.Security.IRoleSecurityService _roleSecurityService;
/// <summary>
/// Gets or sets the role security service.
/// </summary>
/// <value>The role security service.</value>
[Sage.Platform.Application.ServiceDependency]
public Sage.Platform.Security.IRoleSecurityService RoleSecurityService
{
   set
      {
         _roleSecurityService = Sage.Platform.Application.ApplicationContext.Current.Services.Get<Sage.Platform.Security.IRoleSecurityService>(true);
      }
      get
      {
         return _roleSecurityService;
      }
}

public override Type EntityType
{
	get { return typeof(Sage.Entity.Interfaces.IDefect); }
}

 private Sage.Platform.WebPortal.Binding.WebEntityListBindingSource _dtsReturns;
public Sage.Platform.WebPortal.Binding.WebEntityListBindingSource dtsReturns
{ 
  get 
  {
    if (_dtsReturns == null)
    {
             _dtsReturns = new Sage.Platform.WebPortal.Binding.WebEntityListBindingSource(typeof(Sage.Entity.Interfaces.IDefectReturn), 
	    EntityType              ,"DefectReturns", System.Reflection.MemberTypes.Property);
            	   	}
 	return _dtsReturns;
  }
}

void dtsReturns_OnCurrentEntitySet(object sender, EventArgs e) 
{
      if (Visible)
    { 
		if(BindingSource.Current != null)
		{
		
      
        dtsReturns.SourceObject = BindingSource.Current;
   		}
    }
   if (Visible)
   {   
      RegisterBindingsWithClient(dtsReturns);
   }
}

 



 

protected override void OnAddEntityBindings() { 
       dtsReturns.Bindings.Add(new Sage.Platform.WebPortal.Binding.WebEntityListBinding("DefectReturns", grdReturns ));
   dtsReturns.BindFieldNames = new String[] { "Id","Return.ReturnNumber","Return.Id","Return.CreateDate","Return.ReturnType","Return.Status","Return.Priority","Return.ReturnDetailNotes","Return.Notes" };
        
        
                        // lblReturnedBy.Text Binding 
        Sage.Platform.WebPortal.Binding.WebEntityBinding lblReturnedByTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Return.ReturnedBy", lblReturnedBy, "Text");
        dtsReturns.Bindings.Add(lblReturnedByTextBinding);
                       // txtReturnNotes.Text Binding 
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtReturnNotesTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Return.ReturnDetailNotes", txtReturnNotes, "Text");
        dtsReturns.Bindings.Add(txtReturnNotesTextBinding);
       
        
                        // lblShipTo.Text Binding 
        Sage.Platform.WebPortal.Binding.WebEntityBinding lblShipToTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Return.ShipTo", lblShipTo, "Text");
        dtsReturns.Bindings.Add(lblShipToTextBinding);
       
                        // adrShipTo.AddressCity Binding 
        Sage.Platform.WebPortal.Binding.WebEntityBinding adrShipToAddressCityBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Return.ReturnShippedAddress.City", adrShipTo, "AddressCity");
        dtsReturns.Bindings.Add(adrShipToAddressCityBinding);
                 // adrShipTo.AddressCountry Binding 
        Sage.Platform.WebPortal.Binding.WebEntityBinding adrShipToAddressCountryBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Return.ReturnShippedAddress.Country", adrShipTo, "AddressCountry");
        dtsReturns.Bindings.Add(adrShipToAddressCountryBinding);
                 // adrShipTo.AddressCounty Binding 
        Sage.Platform.WebPortal.Binding.WebEntityBinding adrShipToAddressCountyBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Return.ReturnShippedAddress.County", adrShipTo, "AddressCounty");
        dtsReturns.Bindings.Add(adrShipToAddressCountyBinding);
                 // adrShipTo.AddressDesc1 Binding 
        Sage.Platform.WebPortal.Binding.WebEntityBinding adrShipToAddressDesc1Binding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Return.ReturnShippedAddress.Address1", adrShipTo, "AddressDesc1");
        dtsReturns.Bindings.Add(adrShipToAddressDesc1Binding);
                 // adrShipTo.AddressDesc2 Binding 
        Sage.Platform.WebPortal.Binding.WebEntityBinding adrShipToAddressDesc2Binding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Return.ReturnShippedAddress.Address2", adrShipTo, "AddressDesc2");
        dtsReturns.Bindings.Add(adrShipToAddressDesc2Binding);
                 // adrShipTo.AddressDesc3 Binding 
        Sage.Platform.WebPortal.Binding.WebEntityBinding adrShipToAddressDesc3Binding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Return.ReturnShippedAddress.Address3", adrShipTo, "AddressDesc3");
        dtsReturns.Bindings.Add(adrShipToAddressDesc3Binding);
                 // adrShipTo.AddressDescription Binding 
        Sage.Platform.WebPortal.Binding.WebEntityBinding adrShipToAddressDescriptionBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Return.ReturnShippedAddress.Description", adrShipTo, "AddressDescription");
        dtsReturns.Bindings.Add(adrShipToAddressDescriptionBinding);
                 // adrShipTo.AddressDisplay Binding 
        Sage.Platform.WebPortal.Binding.WebEntityBinding adrShipToAddressDisplayBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Return.ReturnShippedAddress.FullAddress", adrShipTo, "AddressDisplay");
        dtsReturns.Bindings.Add(adrShipToAddressDisplayBinding);
                 // adrShipTo.AddressPostalCode Binding 
        Sage.Platform.WebPortal.Binding.WebEntityBinding adrShipToAddressPostalCodeBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Return.ReturnShippedAddress.PostalCode", adrShipTo, "AddressPostalCode");
        dtsReturns.Bindings.Add(adrShipToAddressPostalCodeBinding);
                       // pklShipVia.PickListValue Binding 
        Sage.Platform.WebPortal.Binding.WebEntityBinding pklShipViaPickListValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Return.ShipViaCode", pklShipVia, "PickListValue");
        dtsReturns.Bindings.Add(pklShipViaPickListValueBinding);
                       // memComments.Text Binding 
        Sage.Platform.WebPortal.Binding.WebEntityBinding memCommentsTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Return.Notes", memComments, "Text");
        dtsReturns.Bindings.Add(memCommentsTextBinding);
    
     BindingSource.OnCurrentEntitySet += new EventHandler(dtsReturns_OnCurrentEntitySet);
     
    }
	   	   	   	   	   	   	   	   	   	   	   	   
protected void lueAssociateReturn_ChangeAction(object sender, EventArgs e) {
    if (lueAssociateReturn.LookupResultValue != null)
    {
        Sage.Entity.Interfaces.IDefect parentEntity = BindingSource.Current as Sage.Entity.Interfaces.IDefect;
        Sage.Entity.Interfaces.IReturn relatedEntity = lueAssociateReturn.LookupResultValue as Sage.Entity.Interfaces.IReturn;
        Sage.Platform.WebPortal.EntityPage page = (Sage.Platform.WebPortal.EntityPage)Page;
		// check for duplicates
        bool found = false;
        if ((parentEntity != null) && (relatedEntity != null))
        {
		        Sage.Entity.Interfaces.IDefectReturn relationshipEntity = Sage.Platform.EntityFactory.Create<Sage.Entity.Interfaces.IDefectReturn>();
		if (!found)
        {
            relationshipEntity.Defect = parentEntity;
            relationshipEntity.Return = relatedEntity;
            parentEntity.DefectReturns.Add(relationshipEntity);
            dtsReturns.SelectedMember = relationshipEntity;
            if (page.ModeId.ToUpper() != "INSERT")
            {
				parentEntity.Save();
            }
		}
        }
    }

}

protected override void OnWireEventHandlers()
{
 base.OnWireEventHandlers();
 lueAssociateReturn.LookupResultValueChanged += new EventHandler(lueAssociateReturn_ChangeAction);


}

protected override void OnFormBound()
{
ScriptManager.RegisterStartupScript(Page, GetType(), "cleanupcontainer", "jQuery(\".controlslist > div:empty\").remove();", true);
ScriptManager.RegisterStartupScript(Page, GetType(), "cleanupcontainer", "jQuery(\".controlslist > div:empty\").remove();", true);
ScriptManager.RegisterStartupScript(Page, GetType(), "cleanupcontainer", "jQuery(\".controlslist > div:empty\").remove();", true);
ClientBindingMgr.RegisterBoundControl(lueAssociateReturn);

if (dtsReturns.SourceObject == null) { dtsReturns.SourceObject = BindingSource.Current; }
if (dtsReturns.SourceObject == null) { RegisterBindingsWithClient(dtsReturns); }
dtsReturns.Bind( true );



}



public override Sage.Platform.Application.UI.ISmartPartInfo GetSmartPartInfo(Type smartPartInfoType)
{
	ToolsSmartPartInfo tinfo = new ToolsSmartPartInfo();
    	
	foreach (Control c in Controls)
	{
		SmartPartToolsContainer cont = c as SmartPartToolsContainer;
		if (cont != null)
		{
			switch (cont.ToolbarLocation)
			{
				case SmartPartToolsLocation.Right:
					foreach (Control tool in cont.Controls)
					{
											tinfo.RightTools.Add(tool);
										}
					break;
				case SmartPartToolsLocation.Center:
					foreach (Control tool in cont.Controls)
					{
						tinfo.CenterTools.Add(tool);
					}
					break;
				case SmartPartToolsLocation.Left:
					foreach (Control tool in cont.Controls)
					{
						tinfo.LeftTools.Add(tool);
					}
					break;
			}
		}
	}
	
		return tinfo;
}

private Sage.Platform.Controls.IEntityForm _formAdapter;

public Sage.Platform.Controls.IEntityForm FormAdapter
{
	get { return _formAdapter ?? (_formAdapter = new DefectReturnsAdapter(this)); }
}

public class DefectReturnsAdapter : Sage.Platform.WebPortal.Adapters.EntityFormAdapter, Sage.Form.Interfaces.IDefectReturns
{
	public DefectReturnsAdapter(Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider smartPart)
		: base(smartPart) {}

	private Sage.Platform.Controls.IDataGridControl _grdReturns;
	public Sage.Platform.Controls.IDataGridControl grdReturns
	{
		get { return FindControl(ref _grdReturns, "grdReturns"); }
	}
	private Sage.Platform.Controls.IControlsListControl _ctrlstReturnInfo;
	public Sage.Platform.Controls.IControlsListControl ctrlstReturnInfo
	{
		get { return FindControl(ref _ctrlstReturnInfo, "ctrlstReturnInfo"); }
	}
	private Sage.Platform.Controls.ILabelControl _lblReturnBy;
	public Sage.Platform.Controls.ILabelControl lblReturnBy
	{
		get { return FindControl(ref _lblReturnBy, "lblReturnBy"); }
	}
	private Sage.Platform.Controls.ILabelControl _lblReturnedBy;
	public Sage.Platform.Controls.ILabelControl lblReturnedBy
	{
		get { return FindControl(ref _lblReturnedBy, "lblReturnedBy"); }
	}
	private Sage.Platform.Controls.ITextBoxControl _txtReturnNotes;
	public Sage.Platform.Controls.ITextBoxControl txtReturnNotes
	{
		get { return FindControl(ref _txtReturnNotes, "txtReturnNotes"); }
	}
	private Sage.Platform.Controls.IControlsListControl _ctrlstShipTo;
	public Sage.Platform.Controls.IControlsListControl ctrlstShipTo
	{
		get { return FindControl(ref _ctrlstShipTo, "ctrlstShipTo"); }
	}
	private Sage.Platform.Controls.ILabelControl _lblShipInfo;
	public Sage.Platform.Controls.ILabelControl lblShipInfo
	{
		get { return FindControl(ref _lblShipInfo, "lblShipInfo"); }
	}
	private Sage.Platform.Controls.ILabelControl _lblShipTo;
	public Sage.Platform.Controls.ILabelControl lblShipTo
	{
		get { return FindControl(ref _lblShipTo, "lblShipTo"); }
	}
	private Sage.Platform.Controls.IControlsListControl _ctrlShipToInfo;
	public Sage.Platform.Controls.IControlsListControl ctrlShipToInfo
	{
		get { return FindControl(ref _ctrlShipToInfo, "ctrlShipToInfo"); }
	}
	private Sage.Platform.Controls.IAddressControl _adrShipTo;
	public Sage.Platform.Controls.IAddressControl adrShipTo
	{
		get { return FindControl(ref _adrShipTo, "adrShipTo"); }
	}
	private Sage.Platform.Controls.IPickListControl _pklShipVia;
	public Sage.Platform.Controls.IPickListControl pklShipVia
	{
		get { return FindControl(ref _pklShipVia, "pklShipVia"); }
	}
	private Sage.Platform.Controls.ITextBoxControl _memComments;
	public Sage.Platform.Controls.ITextBoxControl memComments
	{
		get { return FindControl(ref _memComments, "memComments"); }
	}
	private Sage.Platform.Controls.IDataSourceControl _dtsReturns;
	public Sage.Platform.Controls.IDataSourceControl dtsReturns
	{
		get { return FindControl(ref _dtsReturns, "dtsReturns"); }
	}
	private Sage.Platform.Controls.ILookupControl _lueAssociateReturn;
	public Sage.Platform.Controls.ILookupControl lueAssociateReturn
	{
		get { return FindControl(ref _lueAssociateReturn, "lueAssociateReturn"); }
	}

}

</script>

<script type="text/javascript">
</script>
