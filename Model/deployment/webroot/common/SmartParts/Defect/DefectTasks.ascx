<%@ Control Language="C#" ClassName="DefectTasks" Inherits="Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider" %>
<%@ Register Assembly="Sage.SalesLogix.Client.GroupBuilder" Namespace="Sage.SalesLogix.Client.GroupBuilder" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.PickList" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.DependencyLookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Lookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Timeline" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.HighLevelTypes" Namespace="Sage.SalesLogix.HighLevelTypes" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.Platform.WebPortal" Namespace="Sage.Platform.WebPortal.SmartParts" TagPrefix="SalesLogix" %>
<%//------------------------------------------------------------------------
//This file was generated by a tool.  Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//------------------------------------------------------------------------ %>
  <SalesLogix:SlxGridView runat="server" ID="grdDefectActivities" GridLines="None"
AutoGenerateColumns="false" CellPadding="4" CssClass="datagrid" PagerStyle-CssClass="gridPager"
AlternatingRowStyle-CssClass="rowdk" RowStyle-CssClass="rowlt" SelectedRowStyle-CssClass="rowSelected" ShowEmptyTable="true" EnableViewState="false"
 AllowPaging="true" PageSize="20" OnPageIndexChanging="grdDefectActivitiespage_changing" EmptyTableRowText="<%$ resources: grdDefectActivities.EmptyTableRowText %>"  ExpandableRows="True" ResizableColumns="True"  OnRowCommand="grdDefectActivities_RowCommand" 
 DataKeyNames="InstanceId,Id" 
 AllowSorting="true" OnSorting="grdDefectActivities_Sorting"  OnRowEditing="grdDefectActivities_RowEditing"  OnRowDeleting="grdDefectActivities_RowDeleting" OnRowDataBound="grdDefectActivities_RowDataBound"  ShowSortIcon="true" >
<Columns>
   <asp:TemplateField   HeaderText="<%$ resources: grdDefectActivities.bae43115-5fa1-4202-8cdd-39101162cdd2.ColumnHeading %>"       SortExpression="DefectActivityCode"  >
    <itemtemplate>
   <SalesLogix:PickListControl runat="server" ID="grdDefectActivitiescol1" PickListId="" ValueStoredAsText="False" PickListName="Defect Activity" PickListValue='<%#  dtsDefectActivities.getPropertyValue(Container.DataItem, "DefectActivityCode")  %>' DisplayMode="AsText" CssClass="" />
   </itemtemplate></asp:TemplateField>
    <asp:TemplateField   HeaderText="<%$ resources: grdDefectActivities.fd8a60d8-4cf8-4b17-8113-feab102783f5.ColumnHeading %>"       SortExpression="User"  >
    <itemtemplate>
   <SalesLogix:SlxUserControl runat="server" ID="grdDefectActivitiescol2" DisplayMode="AsText" LookupResultValue='<%#  dtsDefectActivities.getPropertyValue(Container.DataItem, "User")  %>' CssClass=""  />
   </itemtemplate></asp:TemplateField>
    <asp:TemplateField   HeaderText="<%$ resources: grdDefectActivities.cbe5c549-56de-4149-a2df-59a8280f94f0.ColumnHeading %>"       SortExpression="PerformedDate"  >
    <itemtemplate>
   <SalesLogix:DateTimePicker runat="server" ID="grdDefectActivitiescol3" DisplayTime="false"  DisplayMode="AsText" DateTimeValue='<%#  dtsDefectActivities.getPropertyValue(Container.DataItem, "PerformedDate")  %>'  CssClass=""  />
   </itemtemplate></asp:TemplateField>
    <asp:TemplateField   HeaderText="<%$ resources: grdDefectActivities.ee7dff2f-a350-47ba-a698-e2c95fc2d368.ColumnHeading %>"       SortExpression="CompletedDate"  >
    <itemtemplate>
   <SalesLogix:DateTimePicker runat="server" ID="grdDefectActivitiescol4" DisplayTime="false"  DisplayMode="AsText" DateTimeValue='<%#  dtsDefectActivities.getPropertyValue(Container.DataItem, "CompletedDate")  %>'  CssClass=""  />
   </itemtemplate></asp:TemplateField>
    <asp:BoundField DataField="DefectActivityRate.RateTypeCode" 
      HeaderText="<%$ resources: grdDefectActivities.c1b685b3-be92-4f26-989e-9549b9e717f2.ColumnHeading %>"       SortExpression="DefectActivityRate.RateTypeCode"    >
      </asp:BoundField>
    <asp:BoundField DataField="Units" 
  DataFormatString="<%$ resources: grdDefectActivities.1cfff600-ea76-4201-8d4a-3934982e4759.FormatString %>" HtmlEncode="false"    HeaderText="<%$ resources: grdDefectActivities.1cfff600-ea76-4201-8d4a-3934982e4759.ColumnHeading %>"       SortExpression="Units"    >
      </asp:BoundField>
    <asp:BoundField DataField="ElapsedUnits" 
  DataFormatString="<%$ resources: grdDefectActivities.24725a7c-62a1-4634-8b57-6cb1508d2a9e.FormatString %>" HtmlEncode="false"    HeaderText="<%$ resources: grdDefectActivities.24725a7c-62a1-4634-8b57-6cb1508d2a9e.ColumnHeading %>"       SortExpression="ElapsedUnits"    >
      </asp:BoundField>
    <asp:TemplateField   HeaderText="<%$ resources: grdDefectActivities.2dc255fb-7fe2-4e3d-924a-f6fad08d9c62.ColumnHeading %>"       SortExpression="TotalRate"  >
    <itemtemplate>
 <SalesLogix:Currency runat="server" ID="grdDefectActivitiescol8" DisplayMode="AsText"  ExchangeRateType="BaseRate"   Text='<%#  dtsDefectActivities.getPropertyValue(Container.DataItem, "TotalRate")  %>' CssClass="" />
   </itemtemplate></asp:TemplateField>
  <asp:ButtonField CommandName="Edit" 
  Text="<%$ resources: grdDefectActivities.64b7dd6b-646d-42dc-ab0f-70eb0350100f.Text %>"               >
  	    </asp:ButtonField>
     <asp:ButtonField CommandName="Delete" 
  Text="<%$ resources: grdDefectActivities.16c4760d-83c4-4a3d-9466-65b8f77255de.Text %>"                >
  	    </asp:ButtonField>
   </Columns>
    <PagerSettings Mode="NumericFirstLast" FirstPageImageUrl="ImageResource.axd?scope=global&type=Global_Images&key=Start_16x16" LastPageImageUrl="ImageResource.axd?scope=global&type=Global_Images&key=End_16x16" />
</SalesLogix:SlxGridView>

<script runat="server" type="text/C#">

                              private int _grdDefectActivitiesdeleteColumnIndex = -2;
protected int grdDefectActivitiesDeleteColumnIndex
{
	get
	{
		if (_grdDefectActivitiesdeleteColumnIndex == -2)
		{
			int bias = (grdDefectActivities.ExpandableRows) ? 1 : 0;
			_grdDefectActivitiesdeleteColumnIndex = -1;
			int colcount = 0;
			foreach (DataControlField col in grdDefectActivities.Columns)
			{
				ButtonField btn = col as ButtonField;
				if (btn != null)
				{
					if (btn.CommandName == "Delete")
					{
						_grdDefectActivitiesdeleteColumnIndex = colcount + bias;
						break;
					}
				}
				colcount++;
			}
		}
		return _grdDefectActivitiesdeleteColumnIndex;
	}
}

protected void grdDefectActivities_RowDataBound(object sender, GridViewRowEventArgs e)
{
	if (e.Row.RowType == DataControlRowType.DataRow)
	{
		if ((grdDefectActivitiesDeleteColumnIndex >= 0) && (grdDefectActivitiesDeleteColumnIndex < e.Row.Cells.Count))
		{
			TableCell cell = e.Row.Cells[grdDefectActivitiesDeleteColumnIndex];
			foreach (Control c in cell.Controls)
			{
				LinkButton btn = c as LinkButton;
				if (btn != null)
				{
					btn.Attributes.Add("onclick", "javascript: return confirm('" + Sage.Platform.WebPortal.PortalUtil.JavaScriptEncode(GetLocalResourceObject("grdDefectActivities.16c4760d-83c4-4a3d-9466-65b8f77255de.ConfirmationMessage").ToString()) + "');");
					return;
				}
			}
		}
	}
}
   
protected void grdDefectActivitiespage_changing(object sender, GridViewPageEventArgs e)
{
 grdDefectActivities.PageIndex = e.NewPageIndex;
 grdDefectActivities.DataBind();
}
protected void grdDefectActivities_Sorting(object sender, GridViewSortEventArgs e) { }
protected void grdDefectActivities_RowCommand(object sender, GridViewCommandEventArgs e)
{
    if (e.CommandName == "Page")
        return;
    int rowIndex;
    if (Int32.TryParse(e.CommandArgument.ToString(), out rowIndex))
    {
        dtsDefectActivities.SelectedIndex = rowIndex;
		object currentEntity = dtsDefectActivities.Current;
        if ((currentEntity is Sage.Platform.ComponentModel.ComponentView) && !((Sage.Platform.ComponentModel.ComponentView)currentEntity).IsVirtualComponent)
            currentEntity = ((Sage.Platform.ComponentModel.ComponentView)currentEntity).Component;
		string id = String.Empty;
        //Check if this is an unpersisted entity and use its InstanceId
        if (Sage.Platform.WebPortal.PortalUtil.ObjectIsNewEntity(currentEntity))
        {
		    if (grdDefectActivities.DataKeys[0].Values.Count > 1) {
                foreach (DictionaryEntry val in grdDefectActivities.DataKeys[rowIndex].Values)
                {
                    if (val.Key.ToString() == "InstanceId")
                    {
                        Guid instanceId = (Guid)val.Value;
                        dtsDefectActivities.SetCurrentEntityByInstanceId(instanceId);
                        id = instanceId.ToString();
		                currentEntity = dtsDefectActivities.Current;
                        if ((currentEntity is Sage.Platform.ComponentModel.ComponentView) && !((Sage.Platform.ComponentModel.ComponentView)currentEntity).IsVirtualComponent)
                            currentEntity = ((Sage.Platform.ComponentModel.ComponentView)currentEntity).Component;
                    }
                }                 
            }
        }
        else
        {
            foreach (DictionaryEntry val in grdDefectActivities.DataKeys[rowIndex].Values)
            {
                if (val.Key.ToString() != "InstanceId")
                {
                    id = val.Value.ToString();
                }
            }
        }		
        if (e.CommandName.Equals("Edit"))
        {
            if (DialogService != null)
            {
				// QFDataGrid
							DialogService.SetSpecs(400, 600, "AddEditDefectTask", GetLocalResourceObject("b2f35643-c83b-4187-af6c-e0f640e5c466.DialogTitleOverride").ToString() );
			                DialogService.EntityType = typeof(Sage.Entity.Interfaces.IDefectActivityItem );
                DialogService.EntityID = id;
                DialogService.ShowDialog();
            }
        }
		if (e.CommandName.Equals("Delete"))
		{
            Sage.Entity.Interfaces.IDefect mainentity = this.BindingSource.Current as Sage.Entity.Interfaces.IDefect;
			if (mainentity != null)
			{
			    Sage.Entity.Interfaces.IDefectActivityItem childEntity = null;
			    if((currentEntity != null) && (currentEntity is Sage.Entity.Interfaces.IDefectActivityItem))
			    {
			        childEntity = (Sage.Entity.Interfaces.IDefectActivityItem)currentEntity;    
			    }
			    else if (id != null)
			    {
                    childEntity = Sage.Platform.EntityFactory.GetById<Sage.Entity.Interfaces.IDefectActivityItem>(id);
            }
				if(childEntity != null)
				{
			         mainentity.DefectActivities.Remove(childEntity);
					 mainentity.Save();
					 if((childEntity.PersistentState & Sage.Platform.Orm.Interfaces.PersistentState.New) <= 0)
					 {
					     childEntity.Delete();
					 }
					 dtsDefectActivities.SelectedIndex = -1;
			    }
		    }
		}
	}
    grdDefectActivities_refresh();
}
	
	protected void grdDefectActivities_refresh()
	{
		if (PageWorkItem != null) {
			Sage.Platform.WebPortal.Services.IPanelRefreshService refresher = PageWorkItem.Services.Get<Sage.Platform.WebPortal.Services.IPanelRefreshService>();
			if (refresher != null)
			{
				refresher.RefreshAll();
			}
			else
			{
				Response.Redirect(Request.Url.ToString());
			}
		}
	}
	
    	protected void grdDefectActivities_RowEditing(object sender, GridViewEditEventArgs e)
	{
		grdDefectActivities.SelectedIndex = e.NewEditIndex;
	}
            protected void grdDefectActivities_RowDeleting(object sender, GridViewDeleteEventArgs e)
	{
		grdDefectActivities.SelectedIndex = -1;
	}
	</script>
 

 <SalesLogix:SmartPartToolsContainer runat="server" ID="DefectTasks_RTools" ToolbarLocation="right">
    <asp:ImageButton runat="server" ID="cmdAddTask"
 AlternateText="<%$ resources: cmdAddTask.Caption %>"  ToolTip="<%$ resources: cmdAddTask.ToolTip %>" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=plus_16x16"  />
 
  <SalesLogix:PageLink ID="lnkDefectTasksHelp" runat="server" LinkType="HelpFileName" ToolTip="<%$ resources: Portal, Help_ToolTip %>" Target="MCWebHelp" NavigateUrl="defecttaskstab.htm" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Help_16x16"></SalesLogix:PageLink> </SalesLogix:SmartPartToolsContainer>

<script runat="server" type="text/C#">
private Sage.Platform.Security.IRoleSecurityService _roleSecurityService;
/// <summary>
/// Gets or sets the role security service.
/// </summary>
/// <value>The role security service.</value>
[Sage.Platform.Application.ServiceDependency]
public Sage.Platform.Security.IRoleSecurityService RoleSecurityService
{
   set
      {
         _roleSecurityService = Sage.Platform.Application.ApplicationContext.Current.Services.Get<Sage.Platform.Security.IRoleSecurityService>(true);
      }
      get
      {
         return _roleSecurityService;
      }
}

public override Type EntityType
{
	get { return typeof(Sage.Entity.Interfaces.IDefect); }
}

 private Sage.Platform.WebPortal.Binding.WebEntityListBindingSource _dtsDefectActivities;
public Sage.Platform.WebPortal.Binding.WebEntityListBindingSource dtsDefectActivities
{ 
  get 
  {
    if (_dtsDefectActivities == null)
    {
             _dtsDefectActivities = new Sage.Platform.WebPortal.Binding.WebEntityListBindingSource(typeof(Sage.Entity.Interfaces.IDefectActivityItem), 
	    EntityType              ,"DefectActivities", System.Reflection.MemberTypes.Property);
                   _dtsDefectActivities.UseSmartQuery = true;
      	   	}
 	return _dtsDefectActivities;
  }
}

void dtsDefectActivities_OnCurrentEntitySet(object sender, EventArgs e) 
{
      if (Visible)
    { 
		if(BindingSource.Current != null)
		{
		
      
        dtsDefectActivities.SourceObject = BindingSource.Current;
   		}
    }
   if (Visible)
   {   
      RegisterBindingsWithClient(dtsDefectActivities);
   }
}

 



 

protected override void OnAddEntityBindings() { 
       dtsDefectActivities.Bindings.Add(new Sage.Platform.WebPortal.Binding.WebEntityListBinding("DefectActivities", grdDefectActivities ));
   dtsDefectActivities.BindFieldNames = new String[] { "Id","DefectActivityCode","User","PerformedDate","CompletedDate","DefectActivityRate.RateTypeCode","Units","ElapsedUnits","TotalRate" };
     
     BindingSource.OnCurrentEntitySet += new EventHandler(dtsDefectActivities_OnCurrentEntitySet);
     
    }
	   
protected void cmdAddTask_ClickAction(object sender, EventArgs e) {
if (DialogService != null)
{
	// InsertChildDialogActionItem
	DialogService.SetSpecs(400, 600, "AddEditDefectTask", GetLocalResourceObject("b103cbb1-54c0-4921-80bb-0a4ddadcb084.DialogTitleOverride").ToString() );
  DialogService.EntityType = typeof(Sage.Entity.Interfaces.IDefectActivityItem); 
  DialogService.SetChildIsertInfo(
    typeof(Sage.Entity.Interfaces.IDefectActivityItem),
    typeof(Sage.Entity.Interfaces.IDefect),
    typeof(Sage.Entity.Interfaces.IDefectActivityItem).GetProperty("Defect"),
    typeof(Sage.Entity.Interfaces.IDefect).GetProperty("DefectActivities"));
  DialogService.ShowDialog();
}
}

protected override void OnWireEventHandlers()
{
 base.OnWireEventHandlers();
 cmdAddTask.Click += new ImageClickEventHandler(cmdAddTask_ClickAction);


}

protected override void OnFormBound()
{
if (dtsDefectActivities.SourceObject == null) { dtsDefectActivities.SourceObject = BindingSource.Current; }
if (dtsDefectActivities.SourceObject == null) { RegisterBindingsWithClient(dtsDefectActivities); }
dtsDefectActivities.Bind();



}



public override Sage.Platform.Application.UI.ISmartPartInfo GetSmartPartInfo(Type smartPartInfoType)
{
	ToolsSmartPartInfo tinfo = new ToolsSmartPartInfo();
    	
	foreach (Control c in Controls)
	{
		SmartPartToolsContainer cont = c as SmartPartToolsContainer;
		if (cont != null)
		{
			switch (cont.ToolbarLocation)
			{
				case SmartPartToolsLocation.Right:
					foreach (Control tool in cont.Controls)
					{
											tinfo.RightTools.Add(tool);
										}
					break;
				case SmartPartToolsLocation.Center:
					foreach (Control tool in cont.Controls)
					{
						tinfo.CenterTools.Add(tool);
					}
					break;
				case SmartPartToolsLocation.Left:
					foreach (Control tool in cont.Controls)
					{
						tinfo.LeftTools.Add(tool);
					}
					break;
			}
		}
	}
	
		return tinfo;
}

private Sage.Platform.Controls.IEntityForm _formAdapter;

public Sage.Platform.Controls.IEntityForm FormAdapter
{
	get { return _formAdapter ?? (_formAdapter = new DefectTasksAdapter(this)); }
}

public class DefectTasksAdapter : Sage.Platform.WebPortal.Adapters.EntityFormAdapter, Sage.Form.Interfaces.IDefectTasks
{
	public DefectTasksAdapter(Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider smartPart)
		: base(smartPart) {}

	private Sage.Platform.Controls.IDataGridControl _grdDefectActivities;
	public Sage.Platform.Controls.IDataGridControl grdDefectActivities
	{
		get { return FindControl(ref _grdDefectActivities, "grdDefectActivities"); }
	}
	private Sage.Platform.Controls.IDataSourceControl _dtsDefectActivities;
	public Sage.Platform.Controls.IDataSourceControl dtsDefectActivities
	{
		get { return FindControl(ref _dtsDefectActivities, "dtsDefectActivities"); }
	}
	private Sage.Platform.Controls.IButtonControl _cmdAddTask;
	public Sage.Platform.Controls.IButtonControl cmdAddTask
	{
		get { return FindControl(ref _cmdAddTask, "cmdAddTask"); }
	}

}

</script>

<script type="text/javascript">
</script>
