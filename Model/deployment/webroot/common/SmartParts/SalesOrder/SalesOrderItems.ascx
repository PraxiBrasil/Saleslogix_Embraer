<%@ Control Language="C#" ClassName="SalesOrderItems" Inherits="Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider" %>
<%@ Register Assembly="Sage.SalesLogix.Client.GroupBuilder" Namespace="Sage.SalesLogix.Client.GroupBuilder" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.PickList" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.DependencyLookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Lookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Timeline" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.HighLevelTypes" Namespace="Sage.SalesLogix.HighLevelTypes" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.Platform.WebPortal" Namespace="Sage.Platform.WebPortal.SmartParts" TagPrefix="SalesLogix" %>
<%//------------------------------------------------------------------------
//This file was generated by a tool.  Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//------------------------------------------------------------------------ %>
  <SalesLogix:SlxGridView runat="server" ID="grdProducts" GridLines="None"
AutoGenerateColumns="false" CellPadding="4" CssClass="datagrid" PagerStyle-CssClass="gridPager"
AlternatingRowStyle-CssClass="rowdk" RowStyle-CssClass="rowlt" SelectedRowStyle-CssClass="rowSelected" ShowEmptyTable="true" EnableViewState="false"
EmptyTableRowText="<%$ resources: grdProducts.EmptyTableRowText %>"  ExpandableRows="True" ResizableColumns="True"  OnRowCommand="grdProducts_RowCommand" 
 DataKeyNames="InstanceId,Id" 
 AllowSorting="true" OnSorting="grdProducts_Sorting"  OnRowEditing="grdProducts_RowEditing"  OnRowDeleting="grdProducts_RowDeleting" OnRowDataBound="grdProducts_RowDataBound"  ShowSortIcon="true" >
<Columns>
   <asp:BoundField DataField="Product" 
      HeaderText="<%$ resources: grdProducts.48282616-489c-498c-8566-e5670ff711a1.ColumnHeading %>"       SortExpression="Product"    >
      </asp:BoundField>
    <asp:TemplateField   HeaderText="<%$ resources: grdProducts.e6c2e07f-22ee-4e79-8d56-d8bf777ddef6.ColumnHeading %>"       SortExpression="Family"  >
    <itemtemplate>
   <SalesLogix:PickListControl runat="server" ID="grdProductscol2" PickListId="" ValueStoredAsText="True" PickListName="Product Family" PickListValue='<%#  dtsProducts.getPropertyValue(Container.DataItem, "Family")  %>' DisplayMode="AsText" CssClass="" />
   </itemtemplate></asp:TemplateField>
    <asp:BoundField DataField="Program" 
      HeaderText="<%$ resources: grdProducts.b3a37060-4745-445a-8a6f-00cd2ce62148.ColumnHeading %>"       SortExpression="Program"    >
      </asp:BoundField>
    <asp:TemplateField   HeaderText="<%$ resources: grdProducts.c3755aed-5ccb-4e42-bc58-0a19355c21b3.ColumnHeading %>"   itemstyle-horizontalalign="Right"     SortExpression="Price"  >
    <itemtemplate>
 <SalesLogix:Currency runat="server" ID="grdProductscol4" DisplayMode="AsText"  ExchangeRateType="BaseRate"   Text='<%#  dtsProducts.getPropertyValue(Container.DataItem, "Price")  %>' CssClass="" />
   </itemtemplate></asp:TemplateField>
    <asp:BoundField DataField="Discount" 
  DataFormatString="<%$ resources: grdProducts.3e5e382b-2a2c-432a-ba4c-b85e9b05ae60.FormatString %>" HtmlEncode="false"    HeaderText="<%$ resources: grdProducts.3e5e382b-2a2c-432a-ba4c-b85e9b05ae60.ColumnHeading %>"   itemstyle-horizontalalign="Right"     SortExpression="Discount"    >
      </asp:BoundField>
    <asp:TemplateField   HeaderText="<%$ resources: grdProducts.ad6147e8-770a-4ed1-9c51-513560814025.ColumnHeading %>"   itemstyle-horizontalalign="Right"     SortExpression="CalculatedPrice"  >
    <itemtemplate>
 <SalesLogix:Currency runat="server" ID="grdProductscol6" DisplayMode="AsText"  ExchangeRateType="BaseRate"   Text='<%#  dtsProducts.getPropertyValue(Container.DataItem, "CalculatedPrice")  %>' CssClass="" />
   </itemtemplate></asp:TemplateField>
    <asp:TemplateField   HeaderText="<%$ resources: grdProducts.aea91882-ef52-445c-9d83-c67254807772.ColumnHeading %>"   itemstyle-horizontalalign="Right"     SortExpression="CalculatedPrice"  >
    <itemtemplate>
 <SalesLogix:Currency runat="server" ID="grdProductscol7" DisplayMode="AsText" ExchangeRate='<%# dtsProducts.getPropertyValue(Container.DataItem, "SalesOrder.ExchangeRate") %>'  ExchangeRateType="SalesOrderRate" CurrentCode='<%# dtsProducts.getPropertyValue(Container.DataItem, "SalesOrder.CurrencyCode") %>'   Text='<%#  dtsProducts.getPropertyValue(Container.DataItem, "CalculatedPrice")  %>' CssClass="" />
   </itemtemplate></asp:TemplateField>
    <asp:BoundField DataField="Quantity" 
      HeaderText="<%$ resources: grdProducts.77cf4baf-95d8-4977-bccd-240ad733e497.ColumnHeading %>"       SortExpression="Quantity"    >
      </asp:BoundField>
    <asp:TemplateField   HeaderText="<%$ resources: grdProducts.81925816-0e60-472f-b8a8-bc719ff8dbe5.ColumnHeading %>"   itemstyle-horizontalalign="Right"     SortExpression="ExtendedPrice"  >
    <itemtemplate>
 <SalesLogix:Currency runat="server" ID="grdProductscol9" DisplayMode="AsText" ExchangeRate='<%# dtsProducts.getPropertyValue(Container.DataItem, "SalesOrder.ExchangeRate") %>'  ExchangeRateType="SalesOrderRate" CurrentCode='<%# dtsProducts.getPropertyValue(Container.DataItem, "SalesOrder.CurrencyCode") %>'   Text='<%#  dtsProducts.getPropertyValue(Container.DataItem, "ExtendedPrice")  %>' CssClass="" />
   </itemtemplate></asp:TemplateField>
  <asp:ButtonField CommandName="Edit" 
  Text="<%$ resources: grdProducts.b70f44c0-38a4-4172-8a76-fc8857ad7d87.Text %>"               >
  	    </asp:ButtonField>
     <asp:ButtonField CommandName="Delete" 
  Text="<%$ resources: grdProducts.7d5d0c2c-622c-44d0-a9a2-e2ae8494890e.Text %>"                >
  	    </asp:ButtonField>
   </Columns>
</SalesLogix:SlxGridView>

<script runat="server" type="text/C#">

                                 private int _grdProductsdeleteColumnIndex = -2;
protected int grdProductsDeleteColumnIndex
{
	get
	{
		if (_grdProductsdeleteColumnIndex == -2)
		{
			int bias = (grdProducts.ExpandableRows) ? 1 : 0;
			_grdProductsdeleteColumnIndex = -1;
			int colcount = 0;
			foreach (DataControlField col in grdProducts.Columns)
			{
				ButtonField btn = col as ButtonField;
				if (btn != null)
				{
					if (btn.CommandName == "Delete")
					{
						_grdProductsdeleteColumnIndex = colcount + bias;
						break;
					}
				}
				colcount++;
			}
		}
		return _grdProductsdeleteColumnIndex;
	}
}

protected void grdProducts_RowDataBound(object sender, GridViewRowEventArgs e)
{
	if (e.Row.RowType == DataControlRowType.DataRow)
	{
		if ((grdProductsDeleteColumnIndex >= 0) && (grdProductsDeleteColumnIndex < e.Row.Cells.Count))
		{
			TableCell cell = e.Row.Cells[grdProductsDeleteColumnIndex];
			foreach (Control c in cell.Controls)
			{
				LinkButton btn = c as LinkButton;
				if (btn != null)
				{
					btn.Attributes.Add("onclick", "javascript: return confirm('" + Sage.Platform.WebPortal.PortalUtil.JavaScriptEncode(GetLocalResourceObject("grdProducts.7d5d0c2c-622c-44d0-a9a2-e2ae8494890e.ConfirmationMessage").ToString()) + "');");
					return;
				}
			}
		}
	}
}
   
protected void grdProducts_Sorting(object sender, GridViewSortEventArgs e) { }
protected void grdProducts_RowCommand(object sender, GridViewCommandEventArgs e)
{
    if (e.CommandName == "Page")
        return;
    int rowIndex;
    if (Int32.TryParse(e.CommandArgument.ToString(), out rowIndex))
    {
        dtsProducts.SelectedIndex = rowIndex;
		object currentEntity = dtsProducts.Current;
        if ((currentEntity is Sage.Platform.ComponentModel.ComponentView) && !((Sage.Platform.ComponentModel.ComponentView)currentEntity).IsVirtualComponent)
            currentEntity = ((Sage.Platform.ComponentModel.ComponentView)currentEntity).Component;
		string id = String.Empty;
        //Check if this is an unpersisted entity and use its InstanceId
        if (Sage.Platform.WebPortal.PortalUtil.ObjectIsNewEntity(currentEntity))
        {
		    if (grdProducts.DataKeys[0].Values.Count > 1) {
                foreach (DictionaryEntry val in grdProducts.DataKeys[rowIndex].Values)
                {
                    if (val.Key.ToString() == "InstanceId")
                    {
                        Guid instanceId = (Guid)val.Value;
                        dtsProducts.SetCurrentEntityByInstanceId(instanceId);
                        id = instanceId.ToString();
		                currentEntity = dtsProducts.Current;
                        if ((currentEntity is Sage.Platform.ComponentModel.ComponentView) && !((Sage.Platform.ComponentModel.ComponentView)currentEntity).IsVirtualComponent)
                            currentEntity = ((Sage.Platform.ComponentModel.ComponentView)currentEntity).Component;
                    }
                }                 
            }
        }
        else
        {
            foreach (DictionaryEntry val in grdProducts.DataKeys[rowIndex].Values)
            {
                if (val.Key.ToString() != "InstanceId")
                {
                    id = val.Value.ToString();
                }
            }
        }		
        if (e.CommandName.Equals("Edit"))
        {
            if (DialogService != null)
            {
				// QFDataGrid
							DialogService.SetSpecs(300, 600, "EditSalesOrderItem", string.Empty );
			                DialogService.EntityType = typeof(Sage.Entity.Interfaces.ISalesOrderItem );
                DialogService.EntityID = id;
                DialogService.ShowDialog();
            }
        }
		if (e.CommandName.Equals("Delete"))
		{
            Sage.Entity.Interfaces.ISalesOrder mainentity = this.BindingSource.Current as Sage.Entity.Interfaces.ISalesOrder;
			if (mainentity != null)
			{
			    Sage.Entity.Interfaces.ISalesOrderItem childEntity = null;
			    if((currentEntity != null) && (currentEntity is Sage.Entity.Interfaces.ISalesOrderItem))
			    {
			        childEntity = (Sage.Entity.Interfaces.ISalesOrderItem)currentEntity;    
			    }
			    else if (id != null)
			    {
                    childEntity = Sage.Platform.EntityFactory.GetById<Sage.Entity.Interfaces.ISalesOrderItem>(id);
            }
				if(childEntity != null)
				{
			         mainentity.SalesOrderItems.Remove(childEntity);
					 mainentity.Save();
					 if((childEntity.PersistentState & Sage.Platform.Orm.Interfaces.PersistentState.New) <= 0)
					 {
					     childEntity.Delete();
					 }
					 dtsProducts.SelectedIndex = -1;
			    }
		    }
		}
	}
    grdProducts_refresh();
}
	
	protected void grdProducts_refresh()
	{
		if (PageWorkItem != null) {
			Sage.Platform.WebPortal.Services.IPanelRefreshService refresher = PageWorkItem.Services.Get<Sage.Platform.WebPortal.Services.IPanelRefreshService>();
			if (refresher != null)
			{
				refresher.RefreshAll();
			}
			else
			{
				Response.Redirect(Request.Url.ToString());
			}
		}
	}
	
    	protected void grdProducts_RowEditing(object sender, GridViewEditEventArgs e)
	{
		grdProducts.SelectedIndex = e.NewEditIndex;
	}
            protected void grdProducts_RowDeleting(object sender, GridViewDeleteEventArgs e)
	{
		grdProducts.SelectedIndex = -1;
	}
	</script>
 

 <SalesLogix:SmartPartToolsContainer runat="server" ID="SalesOrderItems_RTools" ToolbarLocation="right">
    <asp:ImageButton runat="server" ID="btnAddItem"
 AlternateText="<%$ resources: btnAddItem.Caption %>"  ToolTip="<%$ resources: btnAddItem.ToolTip %>" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=plus_16x16"  />
 
  <SalesLogix:PageLink ID="lnkSalesOrderItemsHelp" runat="server" LinkType="HelpFileName" ToolTip="<%$ resources: Portal, Help_ToolTip %>" Target="MCWebHelp" NavigateUrl="salesorderproductstab.htm" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Help_16x16"></SalesLogix:PageLink> </SalesLogix:SmartPartToolsContainer>

<script runat="server" type="text/C#">
private Sage.Platform.Security.IRoleSecurityService _roleSecurityService;
/// <summary>
/// Gets or sets the role security service.
/// </summary>
/// <value>The role security service.</value>
[Sage.Platform.Application.ServiceDependency]
public Sage.Platform.Security.IRoleSecurityService RoleSecurityService
{
   set
      {
         _roleSecurityService = Sage.Platform.Application.ApplicationContext.Current.Services.Get<Sage.Platform.Security.IRoleSecurityService>(true);
      }
      get
      {
         return _roleSecurityService;
      }
}

public override Type EntityType
{
	get { return typeof(Sage.Entity.Interfaces.ISalesOrder); }
}

 private Sage.Platform.WebPortal.Binding.WebEntityListBindingSource _dtsProducts;
public Sage.Platform.WebPortal.Binding.WebEntityListBindingSource dtsProducts
{ 
  get 
  {
    if (_dtsProducts == null)
    {
             _dtsProducts = new Sage.Platform.WebPortal.Binding.WebEntityListBindingSource(typeof(Sage.Entity.Interfaces.ISalesOrderItem), 
	    EntityType              ,"SalesOrderItems", System.Reflection.MemberTypes.Property);
            	   	}
 	return _dtsProducts;
  }
}

void dtsProducts_OnCurrentEntitySet(object sender, EventArgs e) 
{
      if (Visible)
    { 
		if(BindingSource.Current != null)
		{
		
      
        dtsProducts.SourceObject = BindingSource.Current;
   		}
    }
   if (Visible)
   {   
      RegisterBindingsWithClient(dtsProducts);
   }
}

 



 

protected override void OnAddEntityBindings() { 
       dtsProducts.Bindings.Add(new Sage.Platform.WebPortal.Binding.WebEntityListBinding("SalesOrderItems", grdProducts ));
   dtsProducts.BindFieldNames = new String[] { "Id","Product","Family","Program","Price","Discount","CalculatedPrice","Quantity","ExtendedPrice" };
     
     BindingSource.OnCurrentEntitySet += new EventHandler(dtsProducts_OnCurrentEntitySet);
     
    }
	   
protected void btnAddItem_ClickAction(object sender, EventArgs e) {
if (DialogService != null) {
	// DialogActionItem
	DialogService.SetSpecs(550, 950, "AddSalesOrderProduct", string.Empty );
    DialogService.ShowDialog();
}
}

protected override void OnWireEventHandlers()
{
 base.OnWireEventHandlers();
 btnAddItem.Click += new ImageClickEventHandler(btnAddItem_ClickAction);


}

protected void quickformload0(object sender, EventArgs e) {
Sage.Entity.Interfaces.ISalesOrder salesOrder = this.BindingSource.Current as Sage.Entity.Interfaces.ISalesOrder;
if (salesOrder != null)
{
	if (Sage.SalesLogix.BusinessRules.BusinessRuleHelper.IsMultiCurrencyEnabled())
	{
		grdProducts.Columns[6].Visible = true;
	}
	else
		grdProducts.Columns[6].Visible = false;
	if (salesOrder.Status.Equals(GetLocalResourceObject("SalesOrderStatus_Closed")))
	{
		grdProducts.Enabled = false;
    	btnAddItem.Visible = false;
	}
	else
	{
		grdProducts.Enabled = true;
    	btnAddItem.Visible = true;
	}
}
}
protected override void OnFormBound()
{
if (dtsProducts.SourceObject == null) { dtsProducts.SourceObject = BindingSource.Current; }
if (dtsProducts.SourceObject == null) { RegisterBindingsWithClient(dtsProducts); }
dtsProducts.Bind();

quickformload0(this, EventArgs.Empty);


}



public override Sage.Platform.Application.UI.ISmartPartInfo GetSmartPartInfo(Type smartPartInfoType)
{
	ToolsSmartPartInfo tinfo = new ToolsSmartPartInfo();
    	if (BindingSource != null)
	{
		if (BindingSource.Current != null)
		{
			tinfo.Description = BindingSource.Current.ToString();
			tinfo.Title = BindingSource.Current.ToString();
		}
	}
    	
	foreach (Control c in Controls)
	{
		SmartPartToolsContainer cont = c as SmartPartToolsContainer;
		if (cont != null)
		{
			switch (cont.ToolbarLocation)
			{
				case SmartPartToolsLocation.Right:
					foreach (Control tool in cont.Controls)
					{
											tinfo.RightTools.Add(tool);
										}
					break;
				case SmartPartToolsLocation.Center:
					foreach (Control tool in cont.Controls)
					{
						tinfo.CenterTools.Add(tool);
					}
					break;
				case SmartPartToolsLocation.Left:
					foreach (Control tool in cont.Controls)
					{
						tinfo.LeftTools.Add(tool);
					}
					break;
			}
		}
	}
	
		return tinfo;
}

private Sage.Platform.Controls.IEntityForm _formAdapter;

public Sage.Platform.Controls.IEntityForm FormAdapter
{
	get { return _formAdapter ?? (_formAdapter = new SalesOrderItemsAdapter(this)); }
}

public class SalesOrderItemsAdapter : Sage.Platform.WebPortal.Adapters.EntityFormAdapter, Sage.Form.Interfaces.ISalesOrderItems
{
	public SalesOrderItemsAdapter(Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider smartPart)
		: base(smartPart) {}

	private Sage.Platform.Controls.IDataGridControl _grdProducts;
	public Sage.Platform.Controls.IDataGridControl grdProducts
	{
		get { return FindControl(ref _grdProducts, "grdProducts"); }
	}
	private Sage.Platform.Controls.IDataSourceControl _dtsProducts;
	public Sage.Platform.Controls.IDataSourceControl dtsProducts
	{
		get { return FindControl(ref _dtsProducts, "dtsProducts"); }
	}
	private Sage.Platform.Controls.IButtonControl _btnAddItem;
	public Sage.Platform.Controls.IButtonControl btnAddItem
	{
		get { return FindControl(ref _btnAddItem, "btnAddItem"); }
	}

}

</script>

<script type="text/javascript">
</script>
