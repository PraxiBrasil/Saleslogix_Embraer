<%@ Control Language="C#" ClassName="EditSalesOrderDetail" Inherits="Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider" %>
<%@ Register Assembly="Sage.SalesLogix.Client.GroupBuilder" Namespace="Sage.SalesLogix.Client.GroupBuilder" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.PickList" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.DependencyLookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Lookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Timeline" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.HighLevelTypes" Namespace="Sage.SalesLogix.HighLevelTypes" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.Platform.WebPortal" Namespace="Sage.Platform.WebPortal.SmartParts" TagPrefix="SalesLogix" %>
<%//------------------------------------------------------------------------
//This file was generated by a tool.  Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//------------------------------------------------------------------------ %>
<table border="0" cellpadding="1" cellspacing="0" class="formtable">
         <col width="100%" />
     <tr>
            <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="numDiscountRate_lbl" AssociatedControlID="numDiscountRate" runat="server" Text="<%$ resources: numDiscountRate.Caption %>" ></asp:Label>
 </div>   
   <div  class="textcontrol numeric"  > 
    <SalesLogix:NumericControl runat="server" ID="numDiscountRate"
FormatType="Percent" AutoPostBack="true"  />
  </div>

      </td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="curDiscountAmount_lbl" AssociatedControlID="curDiscountAmount" runat="server" Text="<%$ resources: curDiscountAmount.Caption %>" ></asp:Label>
 </div>
   <div  class="textcontrol currency"  >
    <SalesLogix:Currency runat="server" ID="curDiscountAmount" ExchangeRateType="BaseRate"
ReadOnly="true" Enabled="false" AutoPostBack="true"  />
</div>

      </td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="curShipping_lbl" AssociatedControlID="curShipping" runat="server" Text="<%$ resources: curShipping.Caption %>" ></asp:Label>
 </div>
   <div  class="textcontrol currency"  >
    <SalesLogix:Currency runat="server" ID="curShipping" ExchangeRateType="BaseRate"
 />
</div>

      </td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="numTaxRate_lbl" AssociatedControlID="numTaxRate" runat="server" Text="<%$ resources: numTaxRate.Caption %>" ></asp:Label>
 </div>   
   <div  class="textcontrol numeric"  > 
    <SalesLogix:NumericControl runat="server" ID="numTaxRate"
FormatType="Percent" AutoPostBack="true"  />
  </div>

      </td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="curTaxAmount_lbl" AssociatedControlID="curTaxAmount" runat="server" Text="<%$ resources: curTaxAmount.Caption %>" ></asp:Label>
 </div>
   <div  class="textcontrol currency"  >
    <SalesLogix:Currency runat="server" ID="curTaxAmount" ExchangeRateType="BaseRate"
ReadOnly="true" Enabled="false"  />
</div>

      </td>
      </tr>
<tr>
            <td  >
<asp:Panel runat="server" ID="ctrlstButtons" CssClass="controlslist qfActionContainer"
>
   <asp:Button runat="server" ID="btnOK"
 Text="<%$ resources: btnOK.Caption %>" CssClass="slxbutton"  />
   
   <asp:Button runat="server" ID="btnCancel"
 Text="<%$ resources: btnCancel.Caption %>" CssClass="slxbutton"  />
 
</asp:Panel>
      </td>
      </tr>
</table>
 

 <SalesLogix:SmartPartToolsContainer runat="server" ID="EditSalesOrderDetail_RTools" ToolbarLocation="right">
  <SalesLogix:PageLink ID="lnkEditSalesOrderDetailHelp" runat="server" LinkType="HelpFileName" ToolTip="<%$ resources: Portal, Help_ToolTip %>" Target="MCWebHelp" NavigateUrl="salesordereditsnapshot.htm" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Help_16x16"></SalesLogix:PageLink> </SalesLogix:SmartPartToolsContainer>

<script runat="server" type="text/C#">
private Sage.Platform.Security.IRoleSecurityService _roleSecurityService;
/// <summary>
/// Gets or sets the role security service.
/// </summary>
/// <value>The role security service.</value>
[Sage.Platform.Application.ServiceDependency]
public Sage.Platform.Security.IRoleSecurityService RoleSecurityService
{
   set
      {
         _roleSecurityService = Sage.Platform.Application.ApplicationContext.Current.Services.Get<Sage.Platform.Security.IRoleSecurityService>(true);
      }
      get
      {
         return _roleSecurityService;
      }
}

public override Type EntityType
{
	get { return typeof(Sage.Entity.Interfaces.ISalesOrder); }
}

 

protected override void OnAddEntityBindings() { 
                    // numDiscountRate.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding numDiscountRateTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Discount", numDiscountRate, "Text");
        BindingSource.Bindings.Add(numDiscountRateTextBinding);
       
                        // curShipping.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding curShippingTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Freight", curShipping, "Text");
        BindingSource.Bindings.Add(curShippingTextBinding);
                       // numTaxRate.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding numTaxRateTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Tax", numTaxRate, "Text");
        BindingSource.Bindings.Add(numTaxRateTextBinding);
       
        
        
        
     
   
}
	   	   	   	   	   	   	   	   
protected void numDiscountRate_ChangeAction(object sender, EventArgs e) {
Sage.Entity.Interfaces.ISalesOrder salesOrder = BindingSource.Current as Sage.Entity.Interfaces.ISalesOrder;
if (salesOrder != null)
{
    double orderTotal = (salesOrder.OrderTotal.HasValue ? salesOrder.OrderTotal.Value : 0);
    double discountAmount = orderTotal * Convert.ToDouble(String.IsNullOrEmpty(numDiscountRate.Text) ? "0" : numDiscountRate.Text);
    double adjustedTotal = orderTotal - discountAmount;
    curTaxAmount.Text = Convert.ToString((salesOrder.Tax.HasValue ? salesOrder.Tax.Value : 0) * adjustedTotal);
    curDiscountAmount.Text = discountAmount.ToString();
}
}
protected void curDiscountAmount_ChangeAction(object sender, EventArgs e) {
Sage.Entity.Interfaces.ISalesOrder salesOrder = BindingSource.Current as Sage.Entity.Interfaces.ISalesOrder;
if (salesOrder != null)
{
    double discount = Convert.ToDouble(String.IsNullOrEmpty(curDiscountAmount.Text) ? "0" : curDiscountAmount.Text);
    salesOrder.SetDiscountRate(discount);
    double adjustedTotal = (salesOrder.OrderTotal.HasValue ? salesOrder.OrderTotal.Value : 0) - (discount);
    curTaxAmount.Text = Convert.ToString((salesOrder.Tax.HasValue ? salesOrder.Tax.Value : 0) * adjustedTotal);
}
}
protected void numTaxRate_ChangeAction(object sender, EventArgs e) {
Sage.Entity.Interfaces.ISalesOrder salesOrder = BindingSource.Current as Sage.Entity.Interfaces.ISalesOrder;
if (salesOrder != null)
{
	double discountAmount = (salesOrder.OrderTotal.HasValue ? salesOrder.OrderTotal.Value : 0) * (salesOrder.Discount.HasValue ? salesOrder.Discount.Value : 0);
    double adjustedTotal = (salesOrder.OrderTotal.HasValue ? salesOrder.OrderTotal.Value : 0) - (discountAmount);
    curTaxAmount.Text = Convert.ToString((salesOrder.Tax.HasValue ? salesOrder.Tax.Value : 0) * adjustedTotal);
}
}
protected void btnOK_ClickAction(object sender, EventArgs e) {
  Sage.Entity.Interfaces.ISalesOrder _entity = BindingSource.Current as Sage.Entity.Interfaces.ISalesOrder;
  if (_entity != null) 
  {
    object _parent = GetParentEntity(); 
    if (DialogService.ChildInsertInfo != null) 
    {
      if (_parent != null) 
      {
        if (DialogService.ChildInsertInfo.ParentReferenceProperty != null) 
        {
          DialogService.ChildInsertInfo.ParentReferenceProperty.SetValue(_entity, _parent, null);
        }        
      }
    }
    bool shouldSave = true;
    Sage.Platform.WebPortal.EntityPage page = Page as Sage.Platform.WebPortal.EntityPage;
	if (page != null)
	{
       if(IsInDialog() && page.ModeId.ToUpper() == "INSERT")
       {
         shouldSave = false;
       }
	}

    if(shouldSave)
    {
       _entity.Save();
    }
    
    if (_parent != null)
    {
        if (DialogService.ChildInsertInfo != null)
        {
           if (DialogService.ChildInsertInfo.ParentsCollectionProperty != null) 
           {
              System.Reflection.MethodInfo _add = DialogService.ChildInsertInfo.ParentsCollectionProperty.PropertyType.GetMethod("Add");
              _add.Invoke(DialogService.ChildInsertInfo.ParentsCollectionProperty.GetValue(_parent, null), new object[] { _entity });
           }
        }
     }        
  }
          btnOK_ClickActionBRC(sender, e);
    
  
}
protected void btnOK_ClickActionBRC(object sender, EventArgs e) {
Sage.Platform.WebPortal.Services.IPanelRefreshService refresher = PageWorkItem.Services.Get<Sage.Platform.WebPortal.Services.IPanelRefreshService>();
if (refresher != null) {
  refresher.RefreshAll();
}
else {  
  Response.Redirect(Request.Url.ToString());
}
}

protected override void OnWireEventHandlers()
{
 base.OnWireEventHandlers();
 numDiscountRate.TextChanged += new EventHandler(numDiscountRate_ChangeAction);
curDiscountAmount.TextChanged += new EventHandler(curDiscountAmount_ChangeAction);
numTaxRate.TextChanged += new EventHandler(numTaxRate_ChangeAction);
btnOK.Click += new EventHandler(btnOK_ClickAction);
btnOK.Click += new EventHandler(DialogService.CloseEventHappened);
btnOK.Click += new EventHandler(Refresh);
btnCancel.Click += new EventHandler(DialogService.CloseEventHappened);


}

protected void quickformload0(object sender, EventArgs e) {
Sage.Entity.Interfaces.ISalesOrder salesOrder = BindingSource.Current as Sage.Entity.Interfaces.ISalesOrder;
if (salesOrder != null)
{
    curTaxAmount.Text = Convert.ToString((salesOrder.OrderTotal.HasValue ? salesOrder.OrderTotal.Value : 0) * (salesOrder.Tax.HasValue ? salesOrder.Tax.Value : 0));
    curDiscountAmount.Text = Convert.ToString((salesOrder.OrderTotal.HasValue ? salesOrder.OrderTotal.Value : 0) * (salesOrder.Discount.HasValue ? salesOrder.Discount.Value : 0));
}
}
private bool _runActivating;
protected override void OnActivating()
{
_runActivating = true;
}
private void DoActivating()
{
quickformload0(this, EventArgs.Empty);

}
protected override void OnFormBound()
{
Sage.Platform.WebPortal.EntityPage epage = Page as Sage.Platform.WebPortal.EntityPage;
        if (epage != null)
            _runActivating = (epage.IsNewEntity || _runActivating);
if (_runActivating) DoActivating();
ClientBindingMgr.RegisterSaveButton(btnOK);

ScriptManager.RegisterStartupScript(Page, GetType(), "cleanupcontainer", "jQuery(\".controlslist > div:empty\").remove();", true);
ClientBindingMgr.RegisterDialogCancelButton(btnCancel);


}



public override Sage.Platform.Application.UI.ISmartPartInfo GetSmartPartInfo(Type smartPartInfoType)
{
	ToolsSmartPartInfo tinfo = new ToolsSmartPartInfo();
    	
	foreach (Control c in Controls)
	{
		SmartPartToolsContainer cont = c as SmartPartToolsContainer;
		if (cont != null)
		{
			switch (cont.ToolbarLocation)
			{
				case SmartPartToolsLocation.Right:
					foreach (Control tool in cont.Controls)
					{
											tinfo.RightTools.Add(tool);
										}
					break;
				case SmartPartToolsLocation.Center:
					foreach (Control tool in cont.Controls)
					{
						tinfo.CenterTools.Add(tool);
					}
					break;
				case SmartPartToolsLocation.Left:
					foreach (Control tool in cont.Controls)
					{
						tinfo.LeftTools.Add(tool);
					}
					break;
			}
		}
	}
	
		return tinfo;
}

private Sage.Platform.Controls.IEntityForm _formAdapter;

public Sage.Platform.Controls.IEntityForm FormAdapter
{
	get { return _formAdapter ?? (_formAdapter = new EditSalesOrderDetailAdapter(this)); }
}

public class EditSalesOrderDetailAdapter : Sage.Platform.WebPortal.Adapters.EntityFormAdapter, Sage.Form.Interfaces.IEditSalesOrderDetail
{
	public EditSalesOrderDetailAdapter(Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider smartPart)
		: base(smartPart) {}

	private Sage.Platform.Controls.INumericControl _numDiscountRate;
	public Sage.Platform.Controls.INumericControl numDiscountRate
	{
		get { return FindControl(ref _numDiscountRate, "numDiscountRate"); }
	}
	private Sage.Platform.Controls.ICurrencyControl _curDiscountAmount;
	public Sage.Platform.Controls.ICurrencyControl curDiscountAmount
	{
		get { return FindControl(ref _curDiscountAmount, "curDiscountAmount"); }
	}
	private Sage.Platform.Controls.ICurrencyControl _curShipping;
	public Sage.Platform.Controls.ICurrencyControl curShipping
	{
		get { return FindControl(ref _curShipping, "curShipping"); }
	}
	private Sage.Platform.Controls.INumericControl _numTaxRate;
	public Sage.Platform.Controls.INumericControl numTaxRate
	{
		get { return FindControl(ref _numTaxRate, "numTaxRate"); }
	}
	private Sage.Platform.Controls.ICurrencyControl _curTaxAmount;
	public Sage.Platform.Controls.ICurrencyControl curTaxAmount
	{
		get { return FindControl(ref _curTaxAmount, "curTaxAmount"); }
	}
	private Sage.Platform.Controls.IControlsListControl _ctrlstButtons;
	public Sage.Platform.Controls.IControlsListControl ctrlstButtons
	{
		get { return FindControl(ref _ctrlstButtons, "ctrlstButtons"); }
	}
	private Sage.Platform.Controls.IButtonControl _btnOK;
	public Sage.Platform.Controls.IButtonControl btnOK
	{
		get { return FindControl(ref _btnOK, "btnOK"); }
	}
	private Sage.Platform.Controls.IButtonControl _btnCancel;
	public Sage.Platform.Controls.IButtonControl btnCancel
	{
		get { return FindControl(ref _btnCancel, "btnCancel"); }
	}

}

</script>

<script type="text/javascript">
</script>
