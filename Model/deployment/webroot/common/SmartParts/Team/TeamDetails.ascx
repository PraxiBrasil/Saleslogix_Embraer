<%@ Control Language="C#" ClassName="TeamDetails" Inherits="Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider" %>
<%@ Register Assembly="Sage.SalesLogix.Client.GroupBuilder" Namespace="Sage.SalesLogix.Client.GroupBuilder" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.PickList" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.DependencyLookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Lookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Timeline" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.HighLevelTypes" Namespace="Sage.SalesLogix.HighLevelTypes" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.Platform.WebPortal" Namespace="Sage.Platform.WebPortal.SmartParts" TagPrefix="SalesLogix" %>
<%//------------------------------------------------------------------------
//This file was generated by a tool.  Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//------------------------------------------------------------------------ %>
<table border="0" cellpadding="1" cellspacing="0" class="formtable">
         <col width="50%" />
            <col width="50%" />
     <tr>
            <td  >
 <div class=" lbl alignleft" >
   <asp:Label ID="OwnerDescription_lbl" AssociatedControlID="OwnerDescription" runat="server" Text="<%$ resources: OwnerDescription.Caption %>" ></asp:Label>
 </div>
  <div  class="textcontrol"   >
<asp:TextBox runat="server" ID="OwnerDescription" Rows="1"
MaxLength="64"
 />
  </div>

      </td>
                <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="createDate_lbl" AssociatedControlID="createDate" runat="server" Text="<%$ resources: createDate.Caption %>" ></asp:Label>
 </div>
   <div  class="textcontrol datepicker"  >
    <SalesLogix:DateTimePicker runat="server" ID="createDate" ReadOnly="true" />
  </div>

      </td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="securityProfileLookup_lbl" AssociatedControlID="securityProfileLookup" runat="server" Text="<%$ resources: securityProfileLookup.Caption %>" ></asp:Label>
 </div>   
  <div  class="textcontrol lookup"  >
<SalesLogix:LookupControl runat="server" ID="securityProfileLookup" LookupEntityName="OwnerSecurityProfile" LookupEntityTypeName="Sage.Entity.Interfaces.IOwnerSecurityProfile, Sage.Entity.Interfaces, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" LookupDisplayMode="DropDownList" Required="true" AddEmptyListItem="false" DialogTitle="<%$ resources: securityProfileLookup.LookupDialogTitle %>"  >
<LookupProperties>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: securityProfileLookup.LookupProperties.ProfileDescription.PropertyHeader %>" PropertyName="ProfileDescription" PropertyType="System.String" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
</LookupProperties>
<LookupPreFilters>
</LookupPreFilters>
</SalesLogix:LookupControl>
  </div>
                 

      </td>
                <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="LastModified_lbl" AssociatedControlID="LastModified" runat="server" Text="<%$ resources: LastModified.Caption %>" ></asp:Label>
 </div>
   <div  class="textcontrol datepicker"  >
    <SalesLogix:DateTimePicker runat="server" ID="LastModified" ReadOnly="true" />
  </div>

      </td>
      </tr>
<tr>
            <td></td>
                <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="QFTextBox3_lbl" AssociatedControlID="QFTextBox3" runat="server" Text="<%$ resources: QFTextBox3.Caption %>" ></asp:Label>
 </div>   
   <div  class="textcontrol user"  > 
    <SalesLogix:SlxUserControl runat="server" ID="QFTextBox3" ReadOnly="true" LookupBindingMode="String"  />
  </div>

      </td>
      </tr>
</table>
 

 <SalesLogix:SmartPartToolsContainer runat="server" ID="TeamDetails_RTools" ToolbarLocation="right">
   <SalesLogix:GroupNavigator runat="server" ID="QFSLXGroupNavigator" ></SalesLogix:GroupNavigator>
    <asp:ImageButton runat="server" ID="saveButton"
 ToolTip="<%$ resources: saveButton.ToolTip %>" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Save_16x16"  />
   
    <asp:ImageButton runat="server" ID="deleteButton"
 ToolTip="<%$ resources: deleteButton.ToolTip %>" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Delete_16x16" 
 />
 
  <SalesLogix:PageLink ID="lnkTeamDetailsHelp" runat="server" LinkType="HelpFileName" ToolTip="<%$ resources: Portal, Help_ToolTip %>" Target="MCWebHelp" NavigateUrl="Team_Detail_View" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Help_16x16"></SalesLogix:PageLink> </SalesLogix:SmartPartToolsContainer>

<script runat="server" type="text/C#">
private Sage.Platform.Security.IRoleSecurityService _roleSecurityService;
/// <summary>
/// Gets or sets the role security service.
/// </summary>
/// <value>The role security service.</value>
[Sage.Platform.Application.ServiceDependency]
public Sage.Platform.Security.IRoleSecurityService RoleSecurityService
{
   set
      {
         _roleSecurityService = Sage.Platform.Application.ApplicationContext.Current.Services.Get<Sage.Platform.Security.IRoleSecurityService>(true);
      }
      get
      {
         return _roleSecurityService;
      }
}

public override Type EntityType
{
	get { return typeof(Sage.Entity.Interfaces.ITeam); }
}

 

protected override void OnAddEntityBindings() { 
                    // OwnerDescription.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding OwnerDescriptionTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Owner.OwnerDescription", OwnerDescription, "Text");
        BindingSource.Bindings.Add(OwnerDescriptionTextBinding);
                       // createDate.DateTimeValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding createDateDateTimeValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Owner.CreateDate", createDate, "DateTimeValue");
        BindingSource.Bindings.Add(createDateDateTimeValueBinding);
       
                        // LastModified.DateTimeValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding LastModifiedDateTimeValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Owner.ModifyDate", LastModified, "DateTimeValue");
        BindingSource.Bindings.Add(LastModifiedDateTimeValueBinding);
                       // QFTextBox3.LookupResultValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding QFTextBox3LookupResultValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Owner.ModifyUser", QFTextBox3, "LookupResultValue");
        BindingSource.Bindings.Add(QFTextBox3LookupResultValueBinding);
    
   
            }
	   	   	   	   	   
protected void saveButton_ClickAction(object sender, EventArgs e) {
Sage.Entity.Interfaces.ITeam entity = (Sage.Entity.Interfaces.ITeam) this.BindingSource.Current;
if (entity.ValidateTeamDetails()) {
            saveButton_ClickActionS(sender, e);
      
      }
else {
            saveButton_ClickActionF(sender, e);
      
      }
}
protected void saveButton_ClickActionS(object sender, EventArgs e) {
Sage.Platform.DynamicMethod.DynamicMethodLibrary lib = Sage.Platform.Orm.DynamicMethodLibraryHelper.Instance;
Object[] methodArgs = new Object[] { FormAdapter, e };
lib.Execute("TeamDetails.SaveButtonOnClick", methodArgs);
}
protected void saveButton_ClickActionF(object sender, EventArgs e) {
  if (DialogService != null) {
    DialogService.ShowMessage(base.GetLocalResourceObject("6c526093-861d-46d7-969a-8a7e6f173de9.Message").ToString(), base.GetLocalResourceObject("6c526093-861d-46d7-969a-8a7e6f173de9.Title").ToString());
  }

}
protected void deleteButton_ClickAction(object sender, EventArgs e) {
Sage.Entity.Interfaces.ITeam entity = (Sage.Entity.Interfaces.ITeam) this.BindingSource.Current;
if (entity.CanDelete()) {
            deleteButton_ClickActionS(sender, e);
      
      }
else {
            deleteButton_ClickActionF(sender, e);
      
      }
}
protected void deleteButton_ClickActionS(object sender, EventArgs e) {
      object[] objarray = new object[] { this.BindingSource.Current };
     Sage.Platform.EntityFactory.Execute<Sage.Entity.Interfaces.ITeam>("Team.DeleteTeam", objarray);
          deleteButton_ClickActionSBRC(sender, e);
    
  
}
protected void deleteButton_ClickActionF(object sender, EventArgs e) {
  if (DialogService != null) {
    DialogService.ShowMessage(base.GetLocalResourceObject("8d19220b-99ab-4f83-a2ea-a155ce19a0fc.Message").ToString(), base.GetLocalResourceObject("8d19220b-99ab-4f83-a2ea-a155ce19a0fc.Title").ToString());
  }

}
protected void deleteButton_ClickActionSBRC(object sender, EventArgs e) {
      Response.Redirect("Team.aspx");
  
}

protected override void OnWireEventHandlers()
{
 base.OnWireEventHandlers();
 saveButton.Click += new ImageClickEventHandler(saveButton_ClickAction);
deleteButton.Click += new ImageClickEventHandler(deleteButton_ClickAction);


}

protected void quickformload0(object sender, EventArgs e) {
Sage.Platform.DynamicMethod.DynamicMethodLibrary lib = Sage.Platform.Orm.DynamicMethodLibraryHelper.Instance;
Object[] methodArgs = new Object[] { FormAdapter, e };
lib.Execute("TeamDetails.OnLoad1", methodArgs);
}
private bool _runActivating;
protected override void OnActivating()
{
_runActivating = true;
}
private void DoActivating()
{
quickformload0(this, EventArgs.Empty);

}
protected override void OnFormBound()
{
Sage.Platform.WebPortal.EntityPage epage = Page as Sage.Platform.WebPortal.EntityPage;
        if (epage != null)
            _runActivating = (epage.IsNewEntity || _runActivating);
if (_runActivating) DoActivating();
ClientBindingMgr.RegisterBoundControl(securityProfileLookup);

ClientBindingMgr.RegisterSaveButton(saveButton);

deleteButton.OnClientClick = string.Format("return confirm('{0}');", Sage.Platform.WebPortal.PortalUtil.JavaScriptEncode(GetLocalResourceObject("deleteButton.ActionConfirmationMessage").ToString()));

ClientBindingMgr.SetFocusTo(OwnerDescription);


}



public override Sage.Platform.Application.UI.ISmartPartInfo GetSmartPartInfo(Type smartPartInfoType)
{
	ToolsSmartPartInfo tinfo = new ToolsSmartPartInfo();
    	
	foreach (Control c in Controls)
	{
		SmartPartToolsContainer cont = c as SmartPartToolsContainer;
		if (cont != null)
		{
			switch (cont.ToolbarLocation)
			{
				case SmartPartToolsLocation.Right:
					foreach (Control tool in cont.Controls)
					{
											tinfo.RightTools.Add(tool);
										}
					break;
				case SmartPartToolsLocation.Center:
					foreach (Control tool in cont.Controls)
					{
						tinfo.CenterTools.Add(tool);
					}
					break;
				case SmartPartToolsLocation.Left:
					foreach (Control tool in cont.Controls)
					{
						tinfo.LeftTools.Add(tool);
					}
					break;
			}
		}
	}
	
		return tinfo;
}

private Sage.Platform.Controls.IEntityForm _formAdapter;

public Sage.Platform.Controls.IEntityForm FormAdapter
{
	get { return _formAdapter ?? (_formAdapter = new TeamDetailsAdapter(this)); }
}

public class TeamDetailsAdapter : Sage.Platform.WebPortal.Adapters.EntityFormAdapter, Sage.Form.Interfaces.ITeamDetails
{
	public TeamDetailsAdapter(Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider smartPart)
		: base(smartPart) {}

	private Sage.Platform.Controls.ITextBoxControl _OwnerDescription;
	public Sage.Platform.Controls.ITextBoxControl OwnerDescription
	{
		get { return FindControl(ref _OwnerDescription, "OwnerDescription"); }
	}
	private Sage.Platform.Controls.ILookupControl _securityProfileLookup;
	public Sage.Platform.Controls.ILookupControl securityProfileLookup
	{
		get { return FindControl(ref _securityProfileLookup, "securityProfileLookup"); }
	}
	private Sage.Platform.Controls.IDateTimePickerControl _createDate;
	public Sage.Platform.Controls.IDateTimePickerControl createDate
	{
		get { return FindControl(ref _createDate, "createDate"); }
	}
	private Sage.Platform.Controls.IDateTimePickerControl _LastModified;
	public Sage.Platform.Controls.IDateTimePickerControl LastModified
	{
		get { return FindControl(ref _LastModified, "LastModified"); }
	}
	private Sage.Platform.Controls.IUserControl _QFTextBox3;
	public Sage.Platform.Controls.IUserControl QFTextBox3
	{
		get { return FindControl(ref _QFTextBox3, "QFTextBox3"); }
	}
	private Sage.Platform.Controls.IGroupNavigatorControl _QFSLXGroupNavigator;
	public Sage.Platform.Controls.IGroupNavigatorControl QFSLXGroupNavigator
	{
		get { return FindControl(ref _QFSLXGroupNavigator, "QFSLXGroupNavigator"); }
	}
	private Sage.Platform.Controls.IButtonControl _saveButton;
	public Sage.Platform.Controls.IButtonControl saveButton
	{
		get { return FindControl(ref _saveButton, "saveButton"); }
	}
	private Sage.Platform.Controls.IButtonControl _deleteButton;
	public Sage.Platform.Controls.IButtonControl deleteButton
	{
		get { return FindControl(ref _deleteButton, "deleteButton"); }
	}

	public void OnLoad1(System.EventArgs e)
	{
		Sage.Platform.DynamicMethod.DynamicMethodLibrary lib = Sage.Platform.Orm.DynamicMethodLibraryHelper.Instance;
		Object[] methodArgs = new Object[] { this, e };
		lib.Execute("TeamDetails.OnLoad1", methodArgs);
	}
	public void SaveButtonOnClick(System.EventArgs e)
	{
		Sage.Platform.DynamicMethod.DynamicMethodLibrary lib = Sage.Platform.Orm.DynamicMethodLibraryHelper.Instance;
		Object[] methodArgs = new Object[] { this, e };
		lib.Execute("TeamDetails.SaveButtonOnClick", methodArgs);
	}
}

</script>

<script type="text/javascript">
</script>
