<%@ Control Language="C#" ClassName="LeadHistoryDetails" Inherits="Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider" %>
<%@ Register Assembly="Sage.SalesLogix.Client.GroupBuilder" Namespace="Sage.SalesLogix.Client.GroupBuilder" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.PickList" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.DependencyLookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Lookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Timeline" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.HighLevelTypes" Namespace="Sage.SalesLogix.HighLevelTypes" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.Platform.WebPortal" Namespace="Sage.Platform.WebPortal.SmartParts" TagPrefix="SalesLogix" %>
<%//------------------------------------------------------------------------
//This file was generated by a tool.  Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//------------------------------------------------------------------------ %>
<table border="0" cellpadding="1" cellspacing="0" class="formtable">
         <col width="25%" />
            <col width="25%" />
            <col width="25%" />
            <col width="25%" />
     <tr>
            <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="CompletedDate_lbl" AssociatedControlID="CompletedDate" runat="server" Text="<%$ resources: CompletedDate.Caption %>" ></asp:Label>
 </div>
   <div  class="textcontrol datepicker"  >
    <SalesLogix:DateTimePicker runat="server" ID="CompletedDate" ReadOnly="true" AccessKey="s" ToolTip="<%$ resources: CompletedDate.ToolTip %>" />
  </div>

      </td>
                <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="StartDate_lbl" AssociatedControlID="StartDate" runat="server" Text="<%$ resources: StartDate.Caption %>" ></asp:Label>
 </div>
   <div  class="textcontrol datepicker"  >
    <SalesLogix:DateTimePicker runat="server" ID="StartDate" ReadOnly="true" ToolTip="<%$ resources: StartDate.ToolTip %>" />
  </div>

      </td>
                <td></td>
                <td></td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="Duration_lbl" AssociatedControlID="Duration" runat="server" Text="<%$ resources: Duration.Caption %>" ></asp:Label>
 </div>   
   <div class="duration"> 
<SalesLogix:DurationPicker runat="server" ID="Duration" Enabled="false"  Width="55%" AccessKey="d"  />
  </div>

      </td>
                <td  >
<div class="slxlabel  alignleft checkbox">
  <SalesLogix:SLXCheckBox runat="server" ID="Timeless" CssClass="checkbox "
 Text="<%$ resources: Timeless.Caption %>" Enabled="false" AccessKey="d" AutoPostBack="true"  />
</div>
      </td>
                <td></td>
                <td></td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="Result_lbl" AssociatedControlID="Result" runat="server" Text="<%$ resources: Result.Caption %>" ></asp:Label>
 </div>   
   <div  class="textcontrol picklist"  > 
    <SalesLogix:PickListControl runat="server" ID="Result" PickListId="kSYST0000019" PickListName="Meeting Result Codes" MustExistInList="false" StorageMode="ID"  />
  </div>

      </td>
                <td></td>
                <td></td>
                <td></td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="FollowUpActivity_lbl" AssociatedControlID="FollowUpActivity" runat="server" Text="<%$ resources: FollowUpActivity.Caption %>" ></asp:Label>
 </div>   
   <div  class="textcontrol select"  > 
<asp:ListBox runat="server" ID="FollowUpActivity" Enabled="false"  SelectionMode="Single" Rows="1"  >
<asp:ListItem  Selected="true" Text="<%$ resources: FollowUpActivity_item0.Text %>"
Value="None" />
<asp:ListItem  Text="<%$ resources: FollowUpActivity_item1.Text %>"
Value="atPhoneCall" />
<asp:ListItem  Text="<%$ resources: FollowUpActivity_item2.Text %>"
Value="atMeeting" />
<asp:ListItem  Text="<%$ resources: FollowUpActivity_item3.Text %>"
Value="atToDo" />
</asp:ListBox>
  </div>

      </td>
                <td  >
<div class="slxlabel  alignleft checkbox">
  <SalesLogix:SLXCheckBox runat="server" ID="CarryOverNotes" CssClass="checkbox "
 Text="<%$ resources: CarryOverNotes.Caption %>" Enabled="false"  />
</div>
      </td>
                <td></td>
                <td></td>
      </tr>
<tr>
            <td  colspan="4" >
  <hr />
 

      </td>
                        </tr>
<tr>
            <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="LeadId_lbl" AssociatedControlID="LeadId" runat="server" Text="<%$ resources: LeadId.Caption %>" ></asp:Label>
 </div>   
  <div  class="textcontrol lookup"  >
<SalesLogix:LookupControl runat="server" ID="LeadId" ReadOnly="true" EnableLookup="false" LookupEntityName="Lead" LookupEntityTypeName="Sage.Entity.Interfaces.ILead, Sage.Entity.Interfaces, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" LookupBindingMode="String"  >
<LookupProperties>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: LeadId.LookupProperties.FirstName.PropertyHeader %>" PropertyName="FirstName" PropertyType="" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: LeadId.LookupProperties.LastName.PropertyHeader %>" PropertyName="LastName" PropertyType="" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
</LookupProperties>
<LookupPreFilters>
</LookupPreFilters>
</SalesLogix:LookupControl>
  </div>

      </td>
                <td></td>
                <td></td>
                <td></td>
      </tr>
<tr>
            <td  colspan="4" >
  <hr />
 

      </td>
                        </tr>
<tr>
            <td  colspan="2" >
 <div class="twocollbl alignleft">
   <asp:Label ID="Description_lbl" AssociatedControlID="Description" runat="server" Text="<%$ resources: Description.Caption %>" ></asp:Label>
 </div>   
   <div  class="twocoltextcontrol picklist"  > 
    <SalesLogix:PickListControl runat="server" ID="Description" PickListId="kSYST0000027" PickListName="Note Regarding" MustExistInList="false" AlphaSort="true"  />
  </div>

      </td>
                      <td></td>
                <td></td>
      </tr>
<tr>
            <td  colspan="2" >
 <div class="twocollbl alignleft" >
   <asp:Label ID="Notes_lbl" AssociatedControlID="Notes" runat="server" Text="<%$ resources: Notes.Caption %>" ></asp:Label>
 </div>
  <div  class="twocoltextcontrol"   >
<asp:TextBox runat="server" ID="Notes" Rows="4"
TextMode="MultiLine" Columns="40"
 />
  </div>

      </td>
                      <td></td>
                <td></td>
      </tr>
<tr>
            <td></td>
                <td></td>
                <td></td>
                <td></td>
      </tr>
<tr>
            <td  colspan="2" >
 <div class="twocollbl alignleft">
   <asp:Label ID="Priority_lbl" AssociatedControlID="Priority" runat="server" Text="<%$ resources: Priority.Caption %>" ></asp:Label>
 </div>   
   <div  class="twocoltextcontrol picklist"  > 
    <SalesLogix:PickListControl runat="server" ID="Priority" ReadOnly="true" PickListId="kSYST0000028" PickListName="Priorities" MustExistInList="false"  />
  </div>

      </td>
                      <td  colspan="2" >
 <div class="twocollbl alignleft">
   <asp:Label ID="Category_lbl" AssociatedControlID="Category" runat="server" Text="<%$ resources: Category.Caption %>" ></asp:Label>
 </div>   
   <div  class="twocoltextcontrol picklist"  > 
    <SalesLogix:PickListControl runat="server" ID="Category" PickListId="kSYST0000015" PickListName="Meeting Category Codes" MustExistInList="false" AlphaSort="true"  />
  </div>

      </td>
            </tr>
<tr>
            <td  colspan="2" >
 <div class="twocollbl alignleft">
   <asp:Label ID="UserId_lbl" AssociatedControlID="UserId" runat="server" Text="<%$ resources: UserId.Caption %>" ></asp:Label>
 </div>   
   <div  class="twocoltextcontrol user"  > 
    <SalesLogix:SlxUserControl runat="server" ID="UserId" ReadOnly="true" LookupBindingMode="String"  ToolTip="<%$ resources: UserId.ToolTip %>"  />
  </div>

      </td>
                      <td  colspan="2" >
 <div class="slxlabel"><asp:Label runat="server" ID="CreateUser"  />
</div>
      </td>
            </tr>
</table>
 

 <SalesLogix:SmartPartToolsContainer runat="server" ID="LeadHistoryDetails_RTools" ToolbarLocation="right">
    <asp:ImageButton runat="server" ID="btnSave"
 AlternateText="<%$ resources: btnSave.Caption %>"  ToolTip="<%$ resources: btnSave.ToolTip %>" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Save_16x16"  />
   
    <asp:ImageButton runat="server" ID="btnDelete"
 AlternateText="<%$ resources: btnDelete.Caption %>"  ToolTip="<%$ resources: btnDelete.ToolTip %>" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Delete_16x16" 
 />
 
  <SalesLogix:PageLink ID="lnkLeadHistoryDetailsHelp" runat="server" LinkType="HelpFileName" ToolTip="<%$ resources: Portal, Help_ToolTip %>" Target="MCWebHelp" NavigateUrl="histedit.htm" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Help_16x16"></SalesLogix:PageLink> </SalesLogix:SmartPartToolsContainer>

<script runat="server" type="text/C#">
private Sage.Platform.Security.IRoleSecurityService _roleSecurityService;
/// <summary>
/// Gets or sets the role security service.
/// </summary>
/// <value>The role security service.</value>
[Sage.Platform.Application.ServiceDependency]
public Sage.Platform.Security.IRoleSecurityService RoleSecurityService
{
   set
      {
         _roleSecurityService = Sage.Platform.Application.ApplicationContext.Current.Services.Get<Sage.Platform.Security.IRoleSecurityService>(true);
      }
      get
      {
         return _roleSecurityService;
      }
}

public override Type EntityType
{
	get { return typeof(Sage.Entity.Interfaces.IHistory); }
}

 

protected override void OnAddEntityBindings() { 
                    // CompletedDate.DateOnly Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding CompletedDateDateOnlyBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Timeless", CompletedDate, "DateOnly");
        CompletedDateDateOnlyBinding.IgnoreFLSDisabling = true;
        
        BindingSource.Bindings.Add(CompletedDateDateOnlyBinding);
                 // CompletedDate.DateTimeValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding CompletedDateDateTimeValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("CompletedDate", CompletedDate, "DateTimeValue");
        BindingSource.Bindings.Add(CompletedDateDateTimeValueBinding);
                 // CompletedDate.Timeless Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding CompletedDateTimelessBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Timeless", CompletedDate, "Timeless");
        CompletedDateTimelessBinding.IgnoreFLSDisabling = true;
        
        BindingSource.Bindings.Add(CompletedDateTimelessBinding);
                       // StartDate.DateOnly Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding StartDateDateOnlyBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Timeless", StartDate, "DateOnly");
        StartDateDateOnlyBinding.IgnoreFLSDisabling = true;
        
        BindingSource.Bindings.Add(StartDateDateOnlyBinding);
                 // StartDate.DateTimeValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding StartDateDateTimeValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("StartDate", StartDate, "DateTimeValue");
        BindingSource.Bindings.Add(StartDateDateTimeValueBinding);
                 // StartDate.Timeless Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding StartDateTimelessBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Timeless", StartDate, "Timeless");
        StartDateTimelessBinding.IgnoreFLSDisabling = true;
        
        BindingSource.Bindings.Add(StartDateTimelessBinding);
                       // Duration.Value Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding DurationValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Duration", Duration, "Value");
        BindingSource.Bindings.Add(DurationValueBinding);
                       // Timeless.Checked Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding TimelessCheckedBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Timeless", Timeless, "Checked");
        BindingSource.Bindings.Add(TimelessCheckedBinding);
                       // Result.PickListValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding ResultPickListValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Result", Result, "PickListValue");
        BindingSource.Bindings.Add(ResultPickListValueBinding);
       
                       
                        // LeadId.LookupResultValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding LeadIdLookupResultValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("LeadId", LeadId, "LookupResultValue");
        BindingSource.Bindings.Add(LeadIdLookupResultValueBinding);
       
                        // Description.PickListValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding DescriptionPickListValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Description", Description, "PickListValue");
        BindingSource.Bindings.Add(DescriptionPickListValueBinding);
                       // Notes.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding NotesTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("LongNotes", Notes, "Text");
        BindingSource.Bindings.Add(NotesTextBinding);
                       // Priority.PickListValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding PriorityPickListValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Priority", Priority, "PickListValue");
        BindingSource.Bindings.Add(PriorityPickListValueBinding);
                       // Category.PickListValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding CategoryPickListValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Category", Category, "PickListValue");
        BindingSource.Bindings.Add(CategoryPickListValueBinding);
                       // UserId.LookupResultValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding UserIdLookupResultValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("UserId", UserId, "LookupResultValue");
        BindingSource.Bindings.Add(UserIdLookupResultValueBinding);
                       // CreateUser.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding CreateUserTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("CreateUser", CreateUser, "Text");
        BindingSource.Bindings.Add(CreateUserTextBinding);
    
   
        }
	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   
protected void Timeless_ChangeAction(object sender, EventArgs e) {
string activityID = EntityContext.EntityID.ToString(); 
Sage.SalesLogix.Activity.Activity activity = this.BindingSource.Current as Sage.SalesLogix.Activity.Activity; 
Duration.Enabled = !activity.Timeless;
}
protected void btnSave_ClickAction(object sender, EventArgs e) {
  Sage.Entity.Interfaces.IHistory _entity = BindingSource.Current as Sage.Entity.Interfaces.IHistory;
  if (_entity != null) 
  {
    object _parent = GetParentEntity(); 
    if (DialogService.ChildInsertInfo != null) 
    {
      if (_parent != null) 
      {
        if (DialogService.ChildInsertInfo.ParentReferenceProperty != null) 
        {
          DialogService.ChildInsertInfo.ParentReferenceProperty.SetValue(_entity, _parent, null);
        }        
      }
    }
    bool shouldSave = true;
    Sage.Platform.WebPortal.EntityPage page = Page as Sage.Platform.WebPortal.EntityPage;
	if (page != null)
	{
       if(IsInDialog() && page.ModeId.ToUpper() == "INSERT")
       {
         shouldSave = false;
       }
	}

    if(shouldSave)
    {
       _entity.Save();
    }
    
    if (_parent != null)
    {
        if (DialogService.ChildInsertInfo != null)
        {
           if (DialogService.ChildInsertInfo.ParentsCollectionProperty != null) 
           {
              System.Reflection.MethodInfo _add = DialogService.ChildInsertInfo.ParentsCollectionProperty.PropertyType.GetMethod("Add");
              _add.Invoke(DialogService.ChildInsertInfo.ParentsCollectionProperty.GetValue(_parent, null), new object[] { _entity });
           }
        }
     }        
  }
  
}
protected void btnDelete_ClickAction(object sender, EventArgs e) {
Sage.SalesLogix.Activity.History history = this.BindingSource.Current as Sage.SalesLogix.Activity.History;
if (history != null)
{
    history.Delete();
}

foreach (Sage.Platform.Application.EntityHistory hist in EntityContext.EntityHistory)
{
    string entityName = hist.EntityType.Name.Substring(1).ToLower();
    if (entityName == "lead")
    {
        Response.Redirect("~/lead.aspx?entityid=" + hist.EntityId);
        break;
    }
}
Response.Redirect("~/Calendar.aspx");
}

protected override void OnWireEventHandlers()
{
 base.OnWireEventHandlers();
 Timeless.CheckedChanged += new EventHandler(Timeless_ChangeAction);
btnSave.Click += new ImageClickEventHandler(btnSave_ClickAction);
btnDelete.Click += new ImageClickEventHandler(btnDelete_ClickAction);


}

protected void quickformload0(object sender, EventArgs e) {
Sage.SalesLogix.Activity.History history = this.BindingSource.Current as Sage.SalesLogix.Activity.History;

Sage.Platform.Application.IContextService context = Sage.Platform.Application.ApplicationContext.Current.Services.Get<Sage.Platform.Application.IContextService>(true);
Sage.Platform.TimeZone tz = context["TimeZone"] as Sage.Platform.TimeZone;

string startDate = tz.UTCDateTimeToLocalTime(history.StartDate).Date.ToShortDateString();
string createdate = tz.UTCDateTimeToLocalTime(history.CreateDate).Date.ToShortDateString();
if (history.Timeless)
{
    startDate = history.StartDate.Date.ToShortDateString();
    createdate = history.CreateDate.Date.ToShortDateString();
}
           
string userName = history.CreateUser;
Sage.Entity.Interfaces.IUser createUser = Sage.Platform.EntityFactory.GetById<Sage.Entity.Interfaces.IUser>(history.CreateUser);
if (createUser != null)
    userName = createUser.UserInfo.UserName;
else
{
    if (history.CreateUser.ToUpper().Trim() == "PROCESS")
    {
        userName = "Process Manager";
    }
    else
    {
        userName = "Unknown User";
    }
}

CreateUser.Text = GetLocalResourceObject("rsScheduledOn") + " " + createdate + " " + GetLocalResourceObject("rsBy") + " " + userName + " " + GetLocalResourceObject("rsOriginallyFor") + " " + startDate;

Sage.SalesLogix.Security.SLXUserService slxUserService = Sage.Platform.Application.ApplicationContext.Current.Services.Get<Sage.Platform.Security.IUserService>() as Sage.SalesLogix.Security.SLXUserService;
string currentUserId = slxUserService.GetUser().Id.ToString();

if ((currentUserId == history.UserId) || (currentUserId.ToUpper().Trim() != "ADMIN"))
{
	btnDelete.Visible = false;
    btnSave.Visible = false;
    Result.Enabled = false;
    Notes.Enabled = false;
    Description.Enabled = false;
    Category.Enabled = false;
}

// always disable
LeadId.EnableLookup = false;

Sage.Platform.Application.Services.IUserOptionsService userOption = Sage.Platform.Application.ApplicationContext.Current.Services.Get<Sage.Platform.Application.Services.IUserOptionsService>();

string carryOverNotes = userOption.GetCommonOption("CarryOverNotes", "ActivityAlarm");
CarryOverNotes.Checked = (carryOverNotes == "Yes");
}
private bool _runActivating;
protected override void OnActivating()
{
_runActivating = true;
}
private void DoActivating()
{
quickformload0(this, EventArgs.Empty);

}
protected override void OnFormBound()
{
Sage.Platform.WebPortal.EntityPage epage = Page as Sage.Platform.WebPortal.EntityPage;
        if (epage != null)
            _runActivating = (epage.IsNewEntity || _runActivating);
if (_runActivating) DoActivating();
ClientBindingMgr.RegisterSaveButton(btnSave);

btnDelete.OnClientClick = string.Format("return confirm('{0}');", Sage.Platform.WebPortal.PortalUtil.JavaScriptEncode(GetLocalResourceObject("2f82e3c8-250e-4f5a-affa-02a331012c26.ActionConfirmationMessage").ToString()));



}



public override Sage.Platform.Application.UI.ISmartPartInfo GetSmartPartInfo(Type smartPartInfoType)
{
	ToolsSmartPartInfo tinfo = new ToolsSmartPartInfo();
    	
	foreach (Control c in Controls)
	{
		SmartPartToolsContainer cont = c as SmartPartToolsContainer;
		if (cont != null)
		{
			switch (cont.ToolbarLocation)
			{
				case SmartPartToolsLocation.Right:
					foreach (Control tool in cont.Controls)
					{
											tinfo.RightTools.Add(tool);
										}
					break;
				case SmartPartToolsLocation.Center:
					foreach (Control tool in cont.Controls)
					{
						tinfo.CenterTools.Add(tool);
					}
					break;
				case SmartPartToolsLocation.Left:
					foreach (Control tool in cont.Controls)
					{
						tinfo.LeftTools.Add(tool);
					}
					break;
			}
		}
	}
	
		return tinfo;
}

private Sage.Platform.Controls.IEntityForm _formAdapter;

public Sage.Platform.Controls.IEntityForm FormAdapter
{
	get { return _formAdapter ?? (_formAdapter = new LeadHistoryDetailsAdapter(this)); }
}

public class LeadHistoryDetailsAdapter : Sage.Platform.WebPortal.Adapters.EntityFormAdapter, Sage.Form.Interfaces.ILeadHistoryDetails
{
	public LeadHistoryDetailsAdapter(Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider smartPart)
		: base(smartPart) {}

	private Sage.Platform.Controls.IDateTimePickerControl _CompletedDate;
	public Sage.Platform.Controls.IDateTimePickerControl CompletedDate
	{
		get { return FindControl(ref _CompletedDate, "CompletedDate"); }
	}
	private Sage.Platform.Controls.IDurationPickerControl _Duration;
	public Sage.Platform.Controls.IDurationPickerControl Duration
	{
		get { return FindControl(ref _Duration, "Duration"); }
	}
	private Sage.Platform.Controls.IPickListControl _Result;
	public Sage.Platform.Controls.IPickListControl Result
	{
		get { return FindControl(ref _Result, "Result"); }
	}
	private Sage.Platform.Controls.IListBoxControl _FollowUpActivity;
	public Sage.Platform.Controls.IListBoxControl FollowUpActivity
	{
		get { return FindControl(ref _FollowUpActivity, "FollowUpActivity"); }
	}
	private Sage.Platform.Controls.ILookupControl _LeadId;
	public Sage.Platform.Controls.ILookupControl LeadId
	{
		get { return FindControl(ref _LeadId, "LeadId"); }
	}
	private Sage.Platform.Controls.IPickListControl _Description;
	public Sage.Platform.Controls.IPickListControl Description
	{
		get { return FindControl(ref _Description, "Description"); }
	}
	private Sage.Platform.Controls.ITextBoxControl _Notes;
	public Sage.Platform.Controls.ITextBoxControl Notes
	{
		get { return FindControl(ref _Notes, "Notes"); }
	}
	private Sage.Platform.Controls.IPickListControl _Priority;
	public Sage.Platform.Controls.IPickListControl Priority
	{
		get { return FindControl(ref _Priority, "Priority"); }
	}
	private Sage.Platform.Controls.IUserControl _UserId;
	public Sage.Platform.Controls.IUserControl UserId
	{
		get { return FindControl(ref _UserId, "UserId"); }
	}
	private Sage.Platform.Controls.IDateTimePickerControl _StartDate;
	public Sage.Platform.Controls.IDateTimePickerControl StartDate
	{
		get { return FindControl(ref _StartDate, "StartDate"); }
	}
	private Sage.Platform.Controls.ICheckBoxControl _Timeless;
	public Sage.Platform.Controls.ICheckBoxControl Timeless
	{
		get { return FindControl(ref _Timeless, "Timeless"); }
	}
	private Sage.Platform.Controls.ICheckBoxControl _CarryOverNotes;
	public Sage.Platform.Controls.ICheckBoxControl CarryOverNotes
	{
		get { return FindControl(ref _CarryOverNotes, "CarryOverNotes"); }
	}
	private Sage.Platform.Controls.IPickListControl _Category;
	public Sage.Platform.Controls.IPickListControl Category
	{
		get { return FindControl(ref _Category, "Category"); }
	}
	private Sage.Platform.Controls.ILabelControl _CreateUser;
	public Sage.Platform.Controls.ILabelControl CreateUser
	{
		get { return FindControl(ref _CreateUser, "CreateUser"); }
	}
	private Sage.Platform.Controls.IButtonControl _btnSave;
	public Sage.Platform.Controls.IButtonControl btnSave
	{
		get { return FindControl(ref _btnSave, "btnSave"); }
	}
	private Sage.Platform.Controls.IButtonControl _btnDelete;
	public Sage.Platform.Controls.IButtonControl btnDelete
	{
		get { return FindControl(ref _btnDelete, "btnDelete"); }
	}

}

</script>

<script type="text/javascript">
</script>
