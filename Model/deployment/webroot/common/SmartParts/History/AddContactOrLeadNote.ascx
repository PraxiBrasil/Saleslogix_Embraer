<%@ Control Language="C#" ClassName="AddContactOrLeadNote" Inherits="Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider" %>
<%@ Register Assembly="Sage.SalesLogix.Client.GroupBuilder" Namespace="Sage.SalesLogix.Client.GroupBuilder" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.PickList" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.DependencyLookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Lookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Timeline" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.HighLevelTypes" Namespace="Sage.SalesLogix.HighLevelTypes" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.Platform.WebPortal" Namespace="Sage.Platform.WebPortal.SmartParts" TagPrefix="SalesLogix" %>
<%//------------------------------------------------------------------------
//This file was generated by a tool.  Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//------------------------------------------------------------------------ %>
<table border="0" cellpadding="1" cellspacing="0" class="formtable">
         <col width="50%" />
            <col width="50%" />
            <col width="33.33333%" />
     <tr>
            <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="StartDate_lbl" AssociatedControlID="StartDate" runat="server" Text="<%$ resources: StartDate.Caption %>" ></asp:Label>
 </div>
   <div  class="textcontrol datepicker"  >
    <SalesLogix:DateTimePicker runat="server" ID="StartDate" ToolTip="<%$ resources: StartDate.ToolTip %>" />
  </div>

      </td>
                <td  >
<div class="slxlabel  alignleft checkbox">
  <SalesLogix:SLXCheckBox runat="server" ID="Timeless" CssClass="checkbox "
 Text="<%$ resources: Timeless.Caption %>" TextAlign="left" AutoPostBack="true"  />
</div>
      </td>
                <td></td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="Duration_lbl" AssociatedControlID="Duration" runat="server" Text="<%$ resources: Duration.Caption %>" ></asp:Label>
 </div>   
   <div class="duration"> 
<SalesLogix:DurationPicker runat="server" ID="Duration"  Width="55%"  />
  </div>

      </td>
                <td></td>
                <td></td>
      </tr>
<tr>
            <td  colspan="3" >
  <hr />
 

      </td>
                  </tr>
<tr>
            <td  >
<fieldset class="slxlabel radio"  style="width: 53%;" >
<asp:RadioButtonList runat="server" ID="ContactOrLead" RepeatDirection="Horizontal" AutoPostBack="true"  >
<asp:ListItem Text="<%$ resources: ContactOrLead_item0.Text %>"
Value="Contact"
 />
<asp:ListItem Text="<%$ resources: ContactOrLead_item1.Text %>"
Value="Lead"
 />
</asp:RadioButtonList>
</fieldset>
      </td>
                <td></td>
                <td></td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="Contact_lbl" AssociatedControlID="Contact" runat="server" Text="<%$ resources: Contact.Caption %>" ></asp:Label>
 </div>   
  <div  class="textcontrol lookup"  >
<SalesLogix:LookupControl runat="server" ID="Contact"  ToolTip="<%$ resources: Contact.ToolTip %>" LookupEntityName="Contact" LookupEntityTypeName="Sage.Entity.Interfaces.IContact, Sage.Entity.Interfaces, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" LookupBindingMode="String" SeedProperty="Account.Id" AutoPostBack="true" AllowClearingResult="true" OverrideSeedOnSearch="true"  >
<LookupProperties>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: Contact.LookupProperties.NameLF.PropertyHeader %>" PropertyName="NameLF" PropertyType="System.String" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: Contact.LookupProperties.Account.AccountName.PropertyHeader %>" PropertyName="Account.AccountName" PropertyType="" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: Contact.LookupProperties.Address.City.PropertyHeader %>" PropertyName="Address.City" PropertyType="System.String" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: Contact.LookupProperties.Address.State.PropertyHeader %>" PropertyName="Address.State" PropertyType="System.String" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: Contact.LookupProperties.WorkPhone.PropertyHeader %>" PropertyName="WorkPhone" PropertyType="Phone" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: Contact.LookupProperties.Email.PropertyHeader %>" PropertyName="Email" PropertyType="System.String" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
</LookupProperties>
<LookupPreFilters>
</LookupPreFilters>
</SalesLogix:LookupControl>
  </div>

      </td>
                <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="Opportunity_lbl" AssociatedControlID="Opportunity" runat="server" Text="<%$ resources: Opportunity.Caption %>" ></asp:Label>
 </div>   
  <div  class="textcontrol lookup"  >
<SalesLogix:LookupControl runat="server" ID="Opportunity"  ToolTip="<%$ resources: Opportunity.ToolTip %>" LookupEntityName="Opportunity" LookupEntityTypeName="Sage.Entity.Interfaces.IOpportunity, Sage.Entity.Interfaces, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" LookupBindingMode="String" SeedProperty="Account.Id" AutoPostBack="true" AllowClearingResult="true" OverrideSeedOnSearch="true"  >
<LookupProperties>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: Opportunity.LookupProperties.AccountManager.UserInfo.UserName.PropertyHeader %>" PropertyName="AccountManager.UserInfo.UserName" PropertyType="" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: Opportunity.LookupProperties.Description.PropertyHeader %>" PropertyName="Description" PropertyType="" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: Opportunity.LookupProperties.Account.AccountName.PropertyHeader %>" PropertyName="Account.AccountName" PropertyType="" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: Opportunity.LookupProperties.Stage.PropertyHeader %>" PropertyName="Stage" PropertyType="System.String" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: Opportunity.LookupProperties.Status.PropertyHeader %>" PropertyName="Status" PropertyType="" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: Opportunity.LookupProperties.Owner.OwnerDescription.PropertyHeader %>" PropertyName="Owner.OwnerDescription" PropertyType="System.String" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
</LookupProperties>
<LookupPreFilters>
</LookupPreFilters>
</SalesLogix:LookupControl>
  </div>

      </td>
                <td></td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="Account_lbl" AssociatedControlID="Account" runat="server" Text="<%$ resources: Account.Caption %>" ></asp:Label>
 </div>   
  <div  class="textcontrol lookup"  >
<SalesLogix:LookupControl runat="server" ID="Account"  ToolTip="<%$ resources: Account.ToolTip %>" LookupEntityName="Account" LookupEntityTypeName="Sage.Entity.Interfaces.IAccount, Sage.Entity.Interfaces, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" LookupBindingMode="String" AutoPostBack="true" AllowClearingResult="true"  >
<LookupProperties>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: Account.LookupProperties.AccountName.PropertyHeader %>" PropertyName="AccountName" PropertyType="" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: Account.LookupProperties.Address.City.PropertyHeader %>" PropertyName="Address.City" PropertyType="" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: Account.LookupProperties.Address.State.PropertyHeader %>" PropertyName="Address.State" PropertyType="" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: Account.LookupProperties.MainPhone.PropertyHeader %>" PropertyName="MainPhone" PropertyType="System.String" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: Account.LookupProperties.Type.PropertyHeader %>" PropertyName="Type" PropertyType="" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: Account.LookupProperties.SubType.PropertyHeader %>" PropertyName="SubType" PropertyType="System.String" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: Account.LookupProperties.Status.PropertyHeader %>" PropertyName="Status" PropertyType="System.String" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: Account.LookupProperties.AccountManager.UserInfo.UserName.PropertyHeader %>" PropertyName="AccountManager.UserInfo.UserName" PropertyType="System.String" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: Account.LookupProperties.Owner.OwnerDescription.PropertyHeader %>" PropertyName="Owner.OwnerDescription" PropertyType="System.String" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
</LookupProperties>
<LookupPreFilters>
</LookupPreFilters>
</SalesLogix:LookupControl>
  </div>

      </td>
                <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="Ticket_lbl" AssociatedControlID="Ticket" runat="server" Text="<%$ resources: Ticket.Caption %>" ></asp:Label>
 </div>   
  <div  class="textcontrol lookup"  >
<SalesLogix:LookupControl runat="server" ID="Ticket"  ToolTip="<%$ resources: Ticket.ToolTip %>" LookupEntityName="Ticket" LookupEntityTypeName="Sage.Entity.Interfaces.ITicket, Sage.Entity.Interfaces, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" LookupBindingMode="String" SeedProperty="Account.Id" AutoPostBack="true" AllowClearingResult="true" OverrideSeedOnSearch="true"  >
<LookupProperties>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: Ticket.LookupProperties.TicketNumber.PropertyHeader %>" PropertyName="TicketNumber" PropertyType="System.String" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: Ticket.LookupProperties.Account.AccountName.PropertyHeader %>" PropertyName="Account.AccountName" PropertyType="" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: Ticket.LookupProperties.Contact.NameLF.PropertyHeader %>" PropertyName="Contact.NameLF" PropertyType="System.String" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: Ticket.LookupProperties.Contact.WorkPhone.PropertyHeader %>" PropertyName="Contact.WorkPhone" PropertyType="System.String" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: Ticket.LookupProperties.StatusCode.PropertyHeader %>" PropertyName="StatusCode" PropertyType="SalesLogix.PickList" PropertyFormat="PickList"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: Ticket.LookupProperties.Urgency.Description.PropertyHeader %>" PropertyName="Urgency.Description" PropertyType="System.String" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: Ticket.LookupProperties.Area.PropertyHeader %>" PropertyName="Area" PropertyType="" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
</LookupProperties>
<LookupPreFilters>
</LookupPreFilters>
</SalesLogix:LookupControl>
  </div>

      </td>
                <td></td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="Lead_lbl" AssociatedControlID="Lead" runat="server" Text="<%$ resources: Lead.Caption %>" Visible="false" ></asp:Label>
 </div>   
  <div  class="textcontrol lookup"  >
<SalesLogix:LookupControl runat="server" ID="Lead"  ToolTip="<%$ resources: Lead.ToolTip %>" LookupEntityName="Lead" LookupEntityTypeName="Sage.Entity.Interfaces.ILead, Sage.Entity.Interfaces, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" LookupBindingMode="String" AutoPostBack="true" AllowClearingResult="true" Visible="false"  >
<LookupProperties>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: Lead.LookupProperties.LastName.PropertyHeader %>" PropertyName="LastName" PropertyType="" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: Lead.LookupProperties.FirstName.PropertyHeader %>" PropertyName="FirstName" PropertyType="" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: Lead.LookupProperties.WorkPhone.PropertyHeader %>" PropertyName="WorkPhone" PropertyType="" PropertyFormat="Phone"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
</LookupProperties>
<LookupPreFilters>
</LookupPreFilters>
</SalesLogix:LookupControl>
  </div>

      </td>
                <td></td>
                <td></td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft" >
   <asp:Label ID="Company_lbl" AssociatedControlID="Company" runat="server" Text="<%$ resources: Company.Caption %>" Visible="false" ></asp:Label>
 </div>
  <div  class="textcontrol"   >
<asp:TextBox runat="server" ID="Company" Enabled="false" ReadOnly="true" Rows="1"
Visible="false"  />
  </div>

      </td>
                <td></td>
                <td></td>
      </tr>
<tr>
            <td  colspan="3" >
  <hr />
 

      </td>
                  </tr>
<tr>
            <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="Description_lbl" AssociatedControlID="Description" runat="server" Text="<%$ resources: Description.Caption %>" ></asp:Label>
 </div>   
   <div  class="textcontrol picklist"  > 
    <SalesLogix:PickListControl runat="server" ID="Description" PickListId="kSYST0000027" PickListName="Note Regarding" MustExistInList="false" AlphaSort="true"  />
  </div>

      </td>
                <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="Category_lbl" AssociatedControlID="Category" runat="server" Text="<%$ resources: Category.Caption %>" ></asp:Label>
 </div>   
   <div  class="textcontrol picklist"  > 
    <SalesLogix:PickListControl runat="server" ID="Category" PickListId="kSYST0000015" PickListName="Note Category Codes" MustExistInList="false" AlphaSort="true"  />
  </div>

      </td>
                <td></td>
      </tr>
<tr>
            <td></td>
                <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="UserId_lbl" AssociatedControlID="UserId" runat="server" Text="<%$ resources: UserId.Caption %>" ></asp:Label>
 </div>   
   <div  class="textcontrol select"  > 
<asp:ListBox runat="server" ID="UserId"  SelectionMode="Single" Rows="1"  >
</asp:ListBox>
  </div>

      </td>
                <td></td>
      </tr>
<tr>
            <td  colspan="3" >
  <hr />
 

      </td>
                  </tr>
<tr>
            <td rowspan="4"  colspan="2" >
 <div class="twocollbl aligncenter" >
   <asp:Label ID="Notes_lbl" AssociatedControlID="Notes" runat="server" Text="<%$ resources: Notes.Caption %>" ></asp:Label>
 </div>
  <div  class="twocoltextcontrol"   >
<asp:TextBox runat="server" ID="Notes" Rows="4"
TextMode="MultiLine" Columns="40"
 />
  </div>

      </td>
                      <td></td>
      </tr>
<tr>
                        <td></td>
      </tr>
<tr>
                        <td></td>
      </tr>
<tr>
                        <td></td>
      </tr>
</table>
 

 <SalesLogix:SmartPartToolsContainer runat="server" ID="AddContactOrLeadNote_RTools" ToolbarLocation="right">
    <asp:ImageButton runat="server" ID="Save"
 AlternateText="<%$ resources: Save.Caption %>"  ToolTip="<%$ resources: Save.ToolTip %>" Visible="false" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Save_16x16"  />
   
  <SalesLogix:PageLink ID="lnkAddContactOrLeadNoteHelp" runat="server" LinkType="HelpFileName" ToolTip="<%$ resources: Portal, Help_ToolTip %>" Target="MCWebHelp" NavigateUrl="noteadd.htm" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Help_16x16"></SalesLogix:PageLink> </SalesLogix:SmartPartToolsContainer>

<script runat="server" type="text/C#">
private Sage.Platform.Security.IRoleSecurityService _roleSecurityService;
/// <summary>
/// Gets or sets the role security service.
/// </summary>
/// <value>The role security service.</value>
[Sage.Platform.Application.ServiceDependency]
public Sage.Platform.Security.IRoleSecurityService RoleSecurityService
{
   set
      {
         _roleSecurityService = Sage.Platform.Application.ApplicationContext.Current.Services.Get<Sage.Platform.Security.IRoleSecurityService>(true);
      }
      get
      {
         return _roleSecurityService;
      }
}

public override Type EntityType
{
	get { return typeof(Sage.Entity.Interfaces.IHistory); }
}

 

protected override void OnAddEntityBindings() { 
                    // StartDate.DateTimeValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding StartDateDateTimeValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("StartDate", StartDate, "DateTimeValue");
        BindingSource.Bindings.Add(StartDateDateTimeValueBinding);
                       // Timeless.Checked Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding TimelessCheckedBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Timeless", Timeless, "Checked");
        BindingSource.Bindings.Add(TimelessCheckedBinding);
                       // Duration.Value Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding DurationValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Duration", Duration, "Value");
        BindingSource.Bindings.Add(DurationValueBinding);
       
        
                        // Contact.InitializeLookup Binding 
        Sage.Platform.EntityBinding.ExpressionBinding ContactInitializeLookupBinding = new Sage.Platform.EntityBinding.ExpressionBinding("(AccountId <> null)", Contact, "InitializeLookup");
        ContactInitializeLookupBinding.CompileExpression = false;
        ContactInitializeLookupBinding.NegateBooleanValue = false;
        ContactInitializeLookupBinding.NullValue = "";
        BindingSource.Bindings.Add(ContactInitializeLookupBinding);
                 // Contact.LookupResultValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding ContactLookupResultValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("ContactId", Contact, "LookupResultValue");
        BindingSource.Bindings.Add(ContactLookupResultValueBinding);
                 // Contact.SeedValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding ContactSeedValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("AccountId", Contact, "SeedValue");
        ContactSeedValueBinding.IgnoreFLSDisabling = true;
        
        BindingSource.Bindings.Add(ContactSeedValueBinding);
                       // Opportunity.InitializeLookup Binding 
        Sage.Platform.EntityBinding.ExpressionBinding OpportunityInitializeLookupBinding = new Sage.Platform.EntityBinding.ExpressionBinding("(AccountId <> null)", Opportunity, "InitializeLookup");
        OpportunityInitializeLookupBinding.CompileExpression = false;
        OpportunityInitializeLookupBinding.NegateBooleanValue = false;
        OpportunityInitializeLookupBinding.NullValue = "";
        BindingSource.Bindings.Add(OpportunityInitializeLookupBinding);
                 // Opportunity.LookupResultValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding OpportunityLookupResultValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("OpportunityId", Opportunity, "LookupResultValue");
        BindingSource.Bindings.Add(OpportunityLookupResultValueBinding);
                 // Opportunity.SeedValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding OpportunitySeedValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("AccountId", Opportunity, "SeedValue");
        OpportunitySeedValueBinding.IgnoreFLSDisabling = true;
        
        BindingSource.Bindings.Add(OpportunitySeedValueBinding);
                       // Account.LookupResultValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding AccountLookupResultValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("AccountId", Account, "LookupResultValue");
        BindingSource.Bindings.Add(AccountLookupResultValueBinding);
                       // Ticket.InitializeLookup Binding 
        Sage.Platform.EntityBinding.ExpressionBinding TicketInitializeLookupBinding = new Sage.Platform.EntityBinding.ExpressionBinding("(AccountId <> null)", Ticket, "InitializeLookup");
        TicketInitializeLookupBinding.CompileExpression = false;
        TicketInitializeLookupBinding.NegateBooleanValue = false;
        TicketInitializeLookupBinding.NullValue = "";
        BindingSource.Bindings.Add(TicketInitializeLookupBinding);
                 // Ticket.LookupResultValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding TicketLookupResultValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("TicketId", Ticket, "LookupResultValue");
        BindingSource.Bindings.Add(TicketLookupResultValueBinding);
                 // Ticket.SeedValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding TicketSeedValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("AccountId", Ticket, "SeedValue");
        TicketSeedValueBinding.IgnoreFLSDisabling = true;
        
        BindingSource.Bindings.Add(TicketSeedValueBinding);
                       // Lead.LookupResultValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding LeadLookupResultValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("LeadId", Lead, "LookupResultValue");
        BindingSource.Bindings.Add(LeadLookupResultValueBinding);
       
        
                        // Description.PickListValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding DescriptionPickListValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Description", Description, "PickListValue");
        BindingSource.Bindings.Add(DescriptionPickListValueBinding);
                       // Category.PickListValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding CategoryPickListValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Category", Category, "PickListValue");
        BindingSource.Bindings.Add(CategoryPickListValueBinding);
                       // UserId.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding UserIdTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("UserId", UserId, "Text");
        UserIdTextBinding.IgnoreFLSDisabling = true;
        
        BindingSource.Bindings.Add(UserIdTextBinding);
       
                        // Notes.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding NotesTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("LongNotes", Notes, "Text");
        BindingSource.Bindings.Add(NotesTextBinding);
    
   
    }
	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   
protected void Timeless_ChangeAction(object sender, EventArgs e) {
Sage.SalesLogix.Activity.History history = this.BindingSource.Current as Sage.SalesLogix.Activity.History;

Duration.Enabled = !history.Timeless;
StartDate.DisplayTime = !history.Timeless;
StartDate.Timeless = history.Timeless;
}
protected void ContactOrLead_ChangeAction(object sender, EventArgs e) {
	Sage.SalesLogix.Activity.History history = this.BindingSource.Current as Sage.SalesLogix.Activity.History;
	Duration.Enabled = !history.Timeless;
    StartDate.DisplayTime = !history.Timeless;
    StartDate.Timeless = history.Timeless; 
	bool bLead = (ContactOrLead.SelectedValue == "Lead");
    Lead.Visible = bLead;
    Lead_lbl.Visible = bLead;
    Company.Visible = bLead;
    Company_lbl.Visible = bLead;
    Contact.Visible = !bLead;
    Contact_lbl.Visible = !bLead;
    Account.Visible = !bLead;
    Account_lbl.Visible = !bLead;
    Opportunity_lbl.Visible = !bLead;
    Opportunity.Visible = !bLead;
    Ticket.Visible = !bLead;
    Ticket_lbl.Visible = !bLead;

}
protected void Contact_ChangeAction(object sender, EventArgs e) {
Sage.SalesLogix.Activity.History history = this.BindingSource.Current as Sage.SalesLogix.Activity.History;
Duration.Enabled = !history.Timeless;
StartDate.DisplayTime = !history.Timeless;
StartDate.Timeless = history.Timeless; 	    
string contactID = Contact.LookupResultValue.ToString();
Sage.Entity.Interfaces.IContact contact = Sage.Platform.EntityFactory.GetById<Sage.Entity.Interfaces.IContact>(contactID);
if (contact != null)
{
	history.AccountId = contact.Account.Id.ToString();
	history.LeadId = "";
	Company.Text = "";
}
}
protected void Opportunity_ChangeAction(object sender, EventArgs e) {
Sage.SalesLogix.Activity.History history = this.BindingSource.Current as Sage.SalesLogix.Activity.History;
Duration.Enabled = !history.Timeless;
StartDate.DisplayTime = !history.Timeless;
StartDate.Timeless = history.Timeless; 		
string opportunityId = Opportunity.LookupResultValue.ToString();
Sage.Entity.Interfaces.IOpportunity opportunity = Sage.Platform.EntityFactory.GetById<Sage.Entity.Interfaces.IOpportunity>(opportunityId);
if (opportunity != null)
{
    if (history.AccountId != opportunity.Account.Id.ToString())
    {
        history.AccountId = opportunity.Account.Id.ToString();
        foreach (Sage.SalesLogix.Entities.Contact c in opportunity.Account.Contacts)
        {
            if (System.Convert.ToBoolean(c.IsPrimary))
            {
                history.ContactId = c.Id.ToString();
                break;
            }
        }
    }
	history.LeadId = "";
	Company.Text = "";
}
}
protected void Account_ChangeAction(object sender, EventArgs e) {
Sage.SalesLogix.Activity.History history = this.BindingSource.Current as Sage.SalesLogix.Activity.History;
Duration.Enabled = !history.Timeless;
StartDate.DisplayTime = !history.Timeless;
StartDate.Timeless = history.Timeless; 	
string accountID = Account.LookupResultValue.ToString();
Sage.Entity.Interfaces.IAccount account = Sage.Platform.EntityFactory.GetById<Sage.Entity.Interfaces.IAccount>(accountID);
if (account != null)
{
	history.ContactId = "";
    foreach (Sage.SalesLogix.Entities.Contact c in account.Contacts)
    {
        if (System.Convert.ToBoolean(c.IsPrimary))
        {
            history.ContactId = c.Id.ToString();
            break;
        }
    }
	history.LeadId = "";
	Company.Text = "";
}
}
protected void Ticket_ChangeAction(object sender, EventArgs e) {
Sage.SalesLogix.Activity.History history = this.BindingSource.Current as Sage.SalesLogix.Activity.History;
Duration.Enabled = !history.Timeless;
StartDate.DisplayTime = !history.Timeless;
StartDate.Timeless = history.Timeless; 	
string ticketId = Ticket.LookupResultValue.ToString();
Sage.Entity.Interfaces.ITicket ticket = Sage.Platform.EntityFactory.GetById<Sage.Entity.Interfaces.ITicket>(ticketId);
if (ticket != null)
{
    if (history.AccountId != ticket.Account.Id.ToString())
    {
        history.AccountId = ticket.Account.Id.ToString();
        foreach (Sage.SalesLogix.Entities.Contact c in ticket.Account.Contacts)
        {
            if (System.Convert.ToBoolean(c.IsPrimary))
            {
                history.ContactId = c.Id.ToString();
                break;
            }
        }
    }
	history.LeadId = "";
	Company.Text = "";
}
}
protected void Lead_ChangeAction(object sender, EventArgs e) {
	Sage.SalesLogix.Activity.History history = this.BindingSource.Current as Sage.SalesLogix.Activity.History;
	Duration.Enabled = !history.Timeless;
    StartDate.DisplayTime = !history.Timeless;
    StartDate.Timeless = history.Timeless; 	
	string leadId = Lead.LookupResultValue.ToString();
	Sage.Entity.Interfaces.ILead lead = Sage.Platform.EntityFactory.GetById<Sage.Entity.Interfaces.ILead>(leadId);
	
	if (lead != null)
    {
	    Company.Text = lead.Company;
		history.ContactId = "";
		history.AccountId = "";
		history.OpportunityId = "";
		history.TicketId = "";
    } else {
	    Company.Text = "";
    }

}
protected void Save_ClickAction(object sender, EventArgs e) {
  Sage.Entity.Interfaces.IHistory _entity = BindingSource.Current as Sage.Entity.Interfaces.IHistory;
  if (_entity != null) 
  {
    object _parent = GetParentEntity(); 
    if (DialogService.ChildInsertInfo != null) 
    {
      if (_parent != null) 
      {
        if (DialogService.ChildInsertInfo.ParentReferenceProperty != null) 
        {
          DialogService.ChildInsertInfo.ParentReferenceProperty.SetValue(_entity, _parent, null);
        }        
      }
    }
    bool shouldSave = true;
    Sage.Platform.WebPortal.EntityPage page = Page as Sage.Platform.WebPortal.EntityPage;
	if (page != null)
	{
       if(IsInDialog() && page.ModeId.ToUpper() == "INSERT")
       {
         shouldSave = false;
       }
	}

    if(shouldSave)
    {
       _entity.Save();
    }
    
    if (_parent != null)
    {
        if (DialogService.ChildInsertInfo != null)
        {
           if (DialogService.ChildInsertInfo.ParentsCollectionProperty != null) 
           {
              System.Reflection.MethodInfo _add = DialogService.ChildInsertInfo.ParentsCollectionProperty.PropertyType.GetMethod("Add");
              _add.Invoke(DialogService.ChildInsertInfo.ParentsCollectionProperty.GetValue(_parent, null), new object[] { _entity });
           }
        }
     }        
  }
          Save_ClickActionBRC(sender, e);
    
  
}
protected void Save_ClickActionBRC(object sender, EventArgs e) {
Sage.SalesLogix.Activity.History history = this.BindingSource.Current as Sage.SalesLogix.Activity.History;
if (history != null)
{
    /* Update any attachment records that were created in Insert mode. */
    Sage.Platform.WebPortal.EntityPage page = (Sage.Platform.WebPortal.EntityPage)Page;
    if (page.ModeId.ToUpper().Equals("INSERT"))
    {
        // Sage.Platform.Application.UI.Web.PageWorkItem;
        Sage.Platform.Application.WorkItem workItem = PageWorkItem;
        if (workItem != null)
        {
            object oStrTempAssociationID = workItem.State["TempAssociationID"];
            if (oStrTempAssociationID != null)
            {
                string strTempAssociationID = oStrTempAssociationID.ToString();
                Type typ = EntityContext.EntityType;
                System.Collections.Generic.IList<Sage.Entity.Interfaces.IAttachment> attachments = Sage.SalesLogix.Attachment.Rules.GetAttachmentsFor(typ, strTempAssociationID);
                if (attachments != null)
                {
                    foreach (Sage.Entity.Interfaces.IAttachment attach in attachments)
                    {
                        attach.HistoryId = history.Id;
                        attach.Save();
                        /* Move the attachment from the \Attachment\_temporary path to the \Attachment path. */
                        Sage.SalesLogix.Attachment.Rules.MoveTempAttachment(attach);
                    }
                }
                workItem.State.Remove("TempAssociationID");
            }
        }
    }
	if (ContactOrLead.SelectedValue == "Contact")
	{
		history.LeadId = "";
	}
	else
	{
		history.ContactId = "";
		history.AccountId = "";
		history.OpportunityId = "";
		history.TicketId = "";
	}
    if (Lead.LookupResultValue.ToString().Length == 12)
    {
        history.AccountName = Sage.Platform.EntityFactory.GetById<Sage.Entity.Interfaces.ILead>(history.LeadId).Company;
        history.ContactName = Sage.Platform.EntityFactory.GetById<Sage.Entity.Interfaces.ILead>(history.LeadId).LeadFullName;
    }
    history.Save();
}
// Redirect to appropriate main view
string entityPage = "account.aspx";
string entityid = "";
bool blnContinue = true;
        
if (Contact.LookupResultValue != null)
{
    if (Contact.LookupResultValue.ToString().Length == 12)
    {
        entityPage = "contact.aspx";
        entityid = Contact.LookupResultValue.ToString();
        blnContinue = false;
    }
}
if ((Account.LookupResultValue != null) && blnContinue)
{
    if (Account.LookupResultValue.ToString().Length == 12)
    {
        entityPage = "account.aspx";
        entityid = Account.LookupResultValue.ToString();
        blnContinue = false;
    }
}
if ((Opportunity.LookupResultValue != null) && blnContinue)
{
    if (Opportunity.LookupResultValue.ToString().Length == 12)
    {
        entityPage = "opportunity.aspx";
        entityid = Opportunity.LookupResultValue.ToString();
        blnContinue = false;
    }
}

if ((Lead.LookupResultValue != null) && blnContinue)
{
    if (Lead.LookupResultValue.ToString().Length == 12)
    {
        entityPage = "lead.aspx";
        entityid = Lead.LookupResultValue.ToString();
        blnContinue = false;
    }
}

if (entityid.Length == 12)
    Response.Redirect(string.Format("{0}?entityid={1}", entityPage, entityid));
else
    Response.Redirect("~/calendar.aspx");
}

protected override void OnWireEventHandlers()
{
 base.OnWireEventHandlers();
 Timeless.CheckedChanged += new EventHandler(Timeless_ChangeAction);
ContactOrLead.TextChanged += new EventHandler(ContactOrLead_ChangeAction);
Contact.LookupResultValueChanged += new EventHandler(Contact_ChangeAction);
Opportunity.LookupResultValueChanged += new EventHandler(Opportunity_ChangeAction);
Account.LookupResultValueChanged += new EventHandler(Account_ChangeAction);
Ticket.LookupResultValueChanged += new EventHandler(Ticket_ChangeAction);
Lead.LookupResultValueChanged += new EventHandler(Lead_ChangeAction);
Save.Click += new ImageClickEventHandler(Save_ClickAction);


}

protected void quickformload0(object sender, EventArgs e) {
Sage.SalesLogix.Activity.History note = this.BindingSource.Current as Sage.SalesLogix.Activity.History;
if (note == null) return;

note.Type = Sage.Entity.Interfaces.HistoryType.atNote;
                
bool found = false;

Sage.SalesLogix.Security.SLXUserService slxUserService = Sage.Platform.Application.ApplicationContext.Current.Services.Get<Sage.Platform.Security.IUserService>() as Sage.SalesLogix.Security.SLXUserService;
if (slxUserService != null) note.UserId = slxUserService.GetUser().Id.ToString();
	
foreach (Sage.Platform.Application.EntityHistory hist in EntityContext.EntityHistory)
{
    string entityType = hist.EntityType.Name;
    switch (entityType)
    {
        case "IAccount":
            found = true;
			ContactOrLead.SelectedValue = "Contact";
            Sage.Entity.Interfaces.IAccount account = Sage.Platform.EntityFactory.GetById<Sage.Entity.Interfaces.IAccount>(hist.EntityId.ToString());

            note.AccountId = account.Id.ToString();
            note.AccountName = account.AccountName;
            foreach (Sage.Entity.Interfaces.IContact accountContact in account.Contacts)
            {
                if (System.Convert.ToBoolean(accountContact.IsPrimary))
                {
                    note.ContactId = accountContact.Id.ToString();
                    note.ContactName = accountContact.LastName + ", " + accountContact.FirstName;
                    break;
                }
            }
            break;
        case "IContact":
            found = true;
			      ContactOrLead.SelectedValue = "Contact";
            Sage.Entity.Interfaces.IContact contact = Sage.Platform.EntityFactory.GetById<Sage.Entity.Interfaces.IContact>(hist.EntityId.ToString());
            note.ContactId = contact.Id.ToString();
            note.ContactName = contact.LastName + ", " + contact.FirstName;
            note.AccountId = contact.Account.Id.ToString();
            note.AccountName = contact.Account.AccountName;
            break;
        case "IOpportunity":
            found = true;
			      ContactOrLead.SelectedValue = "Contact";
            Sage.Entity.Interfaces.IOpportunity opportunity = Sage.Platform.EntityFactory.GetById<Sage.Entity.Interfaces.IOpportunity>(hist.EntityId.ToString());
            note.OpportunityId = opportunity.Id.ToString();
            note.OpportunityName = opportunity.Description;
            note.AccountId = opportunity.Account.Id.ToString();
            note.AccountName = opportunity.Account.AccountName;
            foreach (Sage.Entity.Interfaces.IOpportunityContact oppContact in opportunity.Contacts)
            {
                if (System.Convert.ToBoolean(oppContact.IsPrimary))
                {
                    note.ContactId = oppContact.Contact.Id.ToString();
                    note.ContactName = oppContact.Contact.LastName + ", " + oppContact.Contact.FirstName;
                    break;
                }
            }
            break;
        case "ITicket":
            found = true;
			ContactOrLead.SelectedValue = "Contact";
            Sage.Entity.Interfaces.ITicket ticket = Sage.Platform.EntityFactory.GetById<Sage.Entity.Interfaces.ITicket>(hist.EntityId.ToString());
            note.TicketId = ticket.Id.ToString();
            note.TicketNumber = ticket.AlternateKeyPrefix + "-" + ticket.AlternateKeySuffix;
            note.AccountId = ticket.Account.Id.ToString();
            note.AccountName = ticket.Account.AccountName;
            note.ContactId = ticket.Contact.Id.ToString();
            note.ContactName = ticket.Contact.LastName + ", " + ticket.Contact.FirstName;
            break;
		case "ILead":
			found = true;
			bool bLead = found;
			ContactOrLead.SelectedValue = "Lead";
			Lead.Visible = bLead;
			Lead_lbl.Visible = bLead;
			Company.Visible = bLead;
			Company_lbl.Visible = bLead;
			Contact.Visible = !bLead;
			Contact_lbl.Visible = !bLead;
			Account.Visible = !bLead;
			Account_lbl.Visible = !bLead;
			Opportunity_lbl.Visible = !bLead;
			Opportunity.Visible = !bLead;
			Ticket.Visible = !bLead;
			Ticket_lbl.Visible = !bLead;
			
			Sage.Entity.Interfaces.ILead lead = Sage.Platform.EntityFactory.GetById<Sage.Entity.Interfaces.ILead>(hist.EntityId.ToString());		
			if (lead != null)
			{
				note.LeadId = lead.Id.ToString();
				note.LeadName = lead.LeadFullName;
				Company.Text = lead.Company;
				note.AccountName = lead.Company;
                note.ContactName = lead.LeadFullName;
				note.ContactId = "";
				note.ContactName = "";
				note.AccountId = "";
				note.OpportunityId = "";
				note.TicketId = "";
			} else {
				Company.Text = "";
			}
			break;
    }
    if (found) break;
} 

if (String.IsNullOrEmpty(ContactOrLead.SelectedValue))
    ContactOrLead.SelectedIndex = 0;

	// Populate UserId dropdown based on calendar security
	UserId.Items.Clear();
	foreach (Sage.SalesLogix.Activity.UserCalendar uc in 
		Sage.SalesLogix.Activity.UserCalendar.GetCurrentUserCalendarList())
	{
		// Must have Add access to add Note for user
		if (uc.AllowAdd == true)
			UserId.Items.Add(new ListItem(uc.UserName, uc.CalUser.Id.ToString()));
	}

    if(UserId.Items.FindByValue(note.UserId.TrimEnd()) != null)
        UserId.SelectedValue = note.UserId.TrimEnd();
}
private bool _runActivating;
protected override void OnActivating()
{
_runActivating = true;
}
private void DoActivating()
{
quickformload0(this, EventArgs.Empty);

}
protected override void OnFormBound()
{
Sage.Platform.WebPortal.EntityPage epage = Page as Sage.Platform.WebPortal.EntityPage;
        if (epage != null)
            _runActivating = (epage.IsNewEntity || _runActivating);
if (_runActivating) DoActivating();
ClientBindingMgr.RegisterSaveButton(Save);



}



public override Sage.Platform.Application.UI.ISmartPartInfo GetSmartPartInfo(Type smartPartInfoType)
{
	ToolsSmartPartInfo tinfo = new ToolsSmartPartInfo();
    	
	foreach (Control c in Controls)
	{
		SmartPartToolsContainer cont = c as SmartPartToolsContainer;
		if (cont != null)
		{
			switch (cont.ToolbarLocation)
			{
				case SmartPartToolsLocation.Right:
					foreach (Control tool in cont.Controls)
					{
											tinfo.RightTools.Add(tool);
										}
					break;
				case SmartPartToolsLocation.Center:
					foreach (Control tool in cont.Controls)
					{
						tinfo.CenterTools.Add(tool);
					}
					break;
				case SmartPartToolsLocation.Left:
					foreach (Control tool in cont.Controls)
					{
						tinfo.LeftTools.Add(tool);
					}
					break;
			}
		}
	}
	
		return tinfo;
}

private Sage.Platform.Controls.IEntityForm _formAdapter;

public Sage.Platform.Controls.IEntityForm FormAdapter
{
	get { return _formAdapter ?? (_formAdapter = new AddContactOrLeadNoteAdapter(this)); }
}

public class AddContactOrLeadNoteAdapter : Sage.Platform.WebPortal.Adapters.EntityFormAdapter, Sage.Form.Interfaces.IAddContactOrLeadNote
{
	public AddContactOrLeadNoteAdapter(Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider smartPart)
		: base(smartPart) {}

	private Sage.Platform.Controls.IDateTimePickerControl _StartDate;
	public Sage.Platform.Controls.IDateTimePickerControl StartDate
	{
		get { return FindControl(ref _StartDate, "StartDate"); }
	}
	private Sage.Platform.Controls.IDurationPickerControl _Duration;
	public Sage.Platform.Controls.IDurationPickerControl Duration
	{
		get { return FindControl(ref _Duration, "Duration"); }
	}
	private Sage.Platform.Controls.IRadioGroupControl _ContactOrLead;
	public Sage.Platform.Controls.IRadioGroupControl ContactOrLead
	{
		get { return FindControl(ref _ContactOrLead, "ContactOrLead"); }
	}
	private Sage.Platform.Controls.ILookupControl _Contact;
	public Sage.Platform.Controls.ILookupControl Contact
	{
		get { return FindControl(ref _Contact, "Contact"); }
	}
	private Sage.Platform.Controls.ILookupControl _Account;
	public Sage.Platform.Controls.ILookupControl Account
	{
		get { return FindControl(ref _Account, "Account"); }
	}
	private Sage.Platform.Controls.ILookupControl _Lead;
	public Sage.Platform.Controls.ILookupControl Lead
	{
		get { return FindControl(ref _Lead, "Lead"); }
	}
	private Sage.Platform.Controls.ITextBoxControl _Company;
	public Sage.Platform.Controls.ITextBoxControl Company
	{
		get { return FindControl(ref _Company, "Company"); }
	}
	private Sage.Platform.Controls.IPickListControl _Description;
	public Sage.Platform.Controls.IPickListControl Description
	{
		get { return FindControl(ref _Description, "Description"); }
	}
	private Sage.Platform.Controls.ITextBoxControl _Notes;
	public Sage.Platform.Controls.ITextBoxControl Notes
	{
		get { return FindControl(ref _Notes, "Notes"); }
	}
	private Sage.Platform.Controls.ICheckBoxControl _Timeless;
	public Sage.Platform.Controls.ICheckBoxControl Timeless
	{
		get { return FindControl(ref _Timeless, "Timeless"); }
	}
	private Sage.Platform.Controls.ILookupControl _Opportunity;
	public Sage.Platform.Controls.ILookupControl Opportunity
	{
		get { return FindControl(ref _Opportunity, "Opportunity"); }
	}
	private Sage.Platform.Controls.ILookupControl _Ticket;
	public Sage.Platform.Controls.ILookupControl Ticket
	{
		get { return FindControl(ref _Ticket, "Ticket"); }
	}
	private Sage.Platform.Controls.IPickListControl _Category;
	public Sage.Platform.Controls.IPickListControl Category
	{
		get { return FindControl(ref _Category, "Category"); }
	}
	private Sage.Platform.Controls.IListBoxControl _UserId;
	public Sage.Platform.Controls.IListBoxControl UserId
	{
		get { return FindControl(ref _UserId, "UserId"); }
	}
	private Sage.Platform.Controls.IButtonControl _Save;
	public Sage.Platform.Controls.IButtonControl Save
	{
		get { return FindControl(ref _Save, "Save"); }
	}

}

</script>

<script type="text/javascript">
</script>
