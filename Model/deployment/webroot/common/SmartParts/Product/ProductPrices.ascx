<%@ Control Language="C#" ClassName="ProductPrices" Inherits="Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider" %>
<%@ Register Assembly="Sage.SalesLogix.Client.GroupBuilder" Namespace="Sage.SalesLogix.Client.GroupBuilder" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.PickList" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.DependencyLookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Lookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Timeline" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.HighLevelTypes" Namespace="Sage.SalesLogix.HighLevelTypes" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.Platform.WebPortal" Namespace="Sage.Platform.WebPortal.SmartParts" TagPrefix="SalesLogix" %>
<%//------------------------------------------------------------------------
//This file was generated by a tool.  Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//------------------------------------------------------------------------ %>
  <SalesLogix:SlxGridView runat="server" ID="grdProductPrices" GridLines="None"
AutoGenerateColumns="false" CellPadding="4" CssClass="datagrid" PagerStyle-CssClass="gridPager"
AlternatingRowStyle-CssClass="rowdk" RowStyle-CssClass="rowlt" SelectedRowStyle-CssClass="rowSelected" ShowEmptyTable="true" EnableViewState="false"
 AllowPaging="true" PageSize="20" OnPageIndexChanging="grdProductPricespage_changing" EmptyTableRowText="<%$ resources: grdProductPrices.EmptyTableRowText %>"  ExpandableRows="True" ResizableColumns="True"  OnRowCommand="grdProductPrices_RowCommand" 
 DataKeyNames="InstanceId,Id" 
 AllowSorting="true" OnSorting="grdProductPrices_Sorting"  OnRowEditing="grdProductPrices_RowEditing"  OnRowDeleting="grdProductPrices_RowDeleting" OnRowDataBound="grdProductPrices_RowDataBound"  ShowSortIcon="true" >
<Columns>
   <asp:BoundField DataField="Program" 
      HeaderText="<%$ resources: grdProductPrices.3fa043c6-3e39-4368-96dc-380859c5f1c0.ColumnHeading %>"       SortExpression="Program"    >
      </asp:BoundField>
    <asp:TemplateField   HeaderText="<%$ resources: grdProductPrices.989f5556-e033-4d69-a3a7-4326fc1255c1.ColumnHeading %>"   itemstyle-horizontalalign="Right"     SortExpression="Price"  >
    <itemtemplate>
 <SalesLogix:Currency runat="server" ID="grdProductPricescol2" DisplayMode="AsText"  ExchangeRateType="BaseRate"   Text='<%#  dtsProductPrices.getPropertyValue(Container.DataItem, "Price")  %>' CssClass="" />
   </itemtemplate></asp:TemplateField>
    <asp:CheckBoxField DataField="DefaultProgram" ReadOnly="True" 
      HeaderText="<%$ resources: grdProductPrices.fbdce40e-6e4c-4e85-8ed5-40ce81929291.ColumnHeading %>"       SortExpression="DefaultProgram"  >
  	    </asp:CheckBoxField>
  <asp:ButtonField CommandName="Edit" 
  Text="<%$ resources: grdProductPrices.f86dcea1-bc34-4b39-a3b6-54451ed9a51c.Text %>"               >
  	    </asp:ButtonField>
     <asp:ButtonField CommandName="Delete" 
  Text="<%$ resources: grdProductPrices.0b6ba2a3-c52e-4509-807b-b5c0139cd826.Text %>"                >
  	    </asp:ButtonField>
   </Columns>
    <PagerSettings Mode="NumericFirstLast" FirstPageImageUrl="ImageResource.axd?scope=global&type=Global_Images&key=Start_16x16" LastPageImageUrl="ImageResource.axd?scope=global&type=Global_Images&key=End_16x16" />
</SalesLogix:SlxGridView>

<script runat="server" type="text/C#">

               private int _grdProductPricesdeleteColumnIndex = -2;
protected int grdProductPricesDeleteColumnIndex
{
	get
	{
		if (_grdProductPricesdeleteColumnIndex == -2)
		{
			int bias = (grdProductPrices.ExpandableRows) ? 1 : 0;
			_grdProductPricesdeleteColumnIndex = -1;
			int colcount = 0;
			foreach (DataControlField col in grdProductPrices.Columns)
			{
				ButtonField btn = col as ButtonField;
				if (btn != null)
				{
					if (btn.CommandName == "Delete")
					{
						_grdProductPricesdeleteColumnIndex = colcount + bias;
						break;
					}
				}
				colcount++;
			}
		}
		return _grdProductPricesdeleteColumnIndex;
	}
}

protected void grdProductPrices_RowDataBound(object sender, GridViewRowEventArgs e)
{
	if (e.Row.RowType == DataControlRowType.DataRow)
	{
		if ((grdProductPricesDeleteColumnIndex >= 0) && (grdProductPricesDeleteColumnIndex < e.Row.Cells.Count))
		{
			TableCell cell = e.Row.Cells[grdProductPricesDeleteColumnIndex];
			foreach (Control c in cell.Controls)
			{
				LinkButton btn = c as LinkButton;
				if (btn != null)
				{
					btn.Attributes.Add("onclick", "javascript: return confirm('" + Sage.Platform.WebPortal.PortalUtil.JavaScriptEncode(GetLocalResourceObject("grdProductPrices.0b6ba2a3-c52e-4509-807b-b5c0139cd826.ConfirmationMessage").ToString()) + "');");
					return;
				}
			}
		}
	}
}
   
protected void grdProductPricespage_changing(object sender, GridViewPageEventArgs e)
{
 grdProductPrices.PageIndex = e.NewPageIndex;
 grdProductPrices.DataBind();
}
protected void grdProductPrices_Sorting(object sender, GridViewSortEventArgs e) { }
protected void grdProductPrices_RowCommand(object sender, GridViewCommandEventArgs e)
{
    if (e.CommandName == "Page")
        return;
    int rowIndex;
    if (Int32.TryParse(e.CommandArgument.ToString(), out rowIndex))
    {
        dtsProductPrices.SelectedIndex = rowIndex;
		object currentEntity = dtsProductPrices.Current;
        if ((currentEntity is Sage.Platform.ComponentModel.ComponentView) && !((Sage.Platform.ComponentModel.ComponentView)currentEntity).IsVirtualComponent)
            currentEntity = ((Sage.Platform.ComponentModel.ComponentView)currentEntity).Component;
		string id = String.Empty;
        //Check if this is an unpersisted entity and use its InstanceId
        if (Sage.Platform.WebPortal.PortalUtil.ObjectIsNewEntity(currentEntity))
        {
		    if (grdProductPrices.DataKeys[0].Values.Count > 1) {
                foreach (DictionaryEntry val in grdProductPrices.DataKeys[rowIndex].Values)
                {
                    if (val.Key.ToString() == "InstanceId")
                    {
                        Guid instanceId = (Guid)val.Value;
                        dtsProductPrices.SetCurrentEntityByInstanceId(instanceId);
                        id = instanceId.ToString();
		                currentEntity = dtsProductPrices.Current;
                        if ((currentEntity is Sage.Platform.ComponentModel.ComponentView) && !((Sage.Platform.ComponentModel.ComponentView)currentEntity).IsVirtualComponent)
                            currentEntity = ((Sage.Platform.ComponentModel.ComponentView)currentEntity).Component;
                    }
                }                 
            }
        }
        else
        {
            foreach (DictionaryEntry val in grdProductPrices.DataKeys[rowIndex].Values)
            {
                if (val.Key.ToString() != "InstanceId")
                {
                    id = val.Value.ToString();
                }
            }
        }		
        if (e.CommandName.Equals("Edit"))
        {
            if (DialogService != null)
            {
				// QFDataGrid
							DialogService.SetSpecs(200, 550, "AddEditProductPrice", GetLocalResourceObject("52b6dfe8-d316-4aa5-a7d3-f0c74b14505f.DialogTitleOverride").ToString() );
			                DialogService.EntityType = typeof(Sage.Entity.Interfaces.IProductProgram );
                DialogService.EntityID = id;
                DialogService.ShowDialog();
            }
        }
		if (e.CommandName.Equals("Delete"))
		{
            Sage.Entity.Interfaces.IProduct mainentity = this.BindingSource.Current as Sage.Entity.Interfaces.IProduct;
			if (mainentity != null)
			{
			    Sage.Entity.Interfaces.IProductProgram childEntity = null;
			    if((currentEntity != null) && (currentEntity is Sage.Entity.Interfaces.IProductProgram))
			    {
			        childEntity = (Sage.Entity.Interfaces.IProductProgram)currentEntity;    
			    }
			    else if (id != null)
			    {
                    childEntity = Sage.Platform.EntityFactory.GetById<Sage.Entity.Interfaces.IProductProgram>(id);
            }
				if(childEntity != null)
				{
			         mainentity.ProductProgram.Remove(childEntity);
					 mainentity.Save();
					 if((childEntity.PersistentState & Sage.Platform.Orm.Interfaces.PersistentState.New) <= 0)
					 {
					     childEntity.Delete();
					 }
					 dtsProductPrices.SelectedIndex = -1;
			    }
		    }
		}
	}
    grdProductPrices_refresh();
}
	
	protected void grdProductPrices_refresh()
	{
		if (PageWorkItem != null) {
			Sage.Platform.WebPortal.Services.IPanelRefreshService refresher = PageWorkItem.Services.Get<Sage.Platform.WebPortal.Services.IPanelRefreshService>();
			if (refresher != null)
			{
				refresher.RefreshAll();
			}
			else
			{
				Response.Redirect(Request.Url.ToString());
			}
		}
	}
	
    	protected void grdProductPrices_RowEditing(object sender, GridViewEditEventArgs e)
	{
		grdProductPrices.SelectedIndex = e.NewEditIndex;
	}
            protected void grdProductPrices_RowDeleting(object sender, GridViewDeleteEventArgs e)
	{
		grdProductPrices.SelectedIndex = -1;
	}
	</script>
 

 <SalesLogix:SmartPartToolsContainer runat="server" ID="ProductPrices_RTools" ToolbarLocation="right">
    <asp:ImageButton runat="server" ID="btnAddPrice"
 ToolTip="<%$ resources: btnAddPrice.ToolTip %>" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=plus_16x16"  />
 
  <SalesLogix:PageLink ID="lnkProductPricesHelp" runat="server" LinkType="HelpFileName" ToolTip="<%$ resources: Portal, Help_ToolTip %>" Target="MCWebHelp" NavigateUrl="productpricingtab" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Help_16x16"></SalesLogix:PageLink> </SalesLogix:SmartPartToolsContainer>

<script runat="server" type="text/C#">
private Sage.Platform.Security.IRoleSecurityService _roleSecurityService;
/// <summary>
/// Gets or sets the role security service.
/// </summary>
/// <value>The role security service.</value>
[Sage.Platform.Application.ServiceDependency]
public Sage.Platform.Security.IRoleSecurityService RoleSecurityService
{
   set
      {
         _roleSecurityService = Sage.Platform.Application.ApplicationContext.Current.Services.Get<Sage.Platform.Security.IRoleSecurityService>(true);
      }
      get
      {
         return _roleSecurityService;
      }
}

public override Type EntityType
{
	get { return typeof(Sage.Entity.Interfaces.IProduct); }
}

 private Sage.Platform.WebPortal.Binding.WebEntityListBindingSource _dtsProductPrices;
public Sage.Platform.WebPortal.Binding.WebEntityListBindingSource dtsProductPrices
{ 
  get 
  {
    if (_dtsProductPrices == null)
    {
             _dtsProductPrices = new Sage.Platform.WebPortal.Binding.WebEntityListBindingSource(typeof(Sage.Entity.Interfaces.IProductProgram), 
	    EntityType              ,"ProductProgram", System.Reflection.MemberTypes.Property);
                   _dtsProductPrices.UseSmartQuery = true;
      	   	}
 	return _dtsProductPrices;
  }
}

void dtsProductPrices_OnCurrentEntitySet(object sender, EventArgs e) 
{
      if (Visible)
    { 
		if(BindingSource.Current != null)
		{
		
      
        dtsProductPrices.SourceObject = BindingSource.Current;
   		}
    }
   if (Visible)
   {   
      RegisterBindingsWithClient(dtsProductPrices);
   }
}

 



 

protected override void OnAddEntityBindings() { 
       dtsProductPrices.Bindings.Add(new Sage.Platform.WebPortal.Binding.WebEntityListBinding("ProductProgram", grdProductPrices ));
   dtsProductPrices.BindFieldNames = new String[] { "Id","Program","Price","DefaultProgram" };
     
     BindingSource.OnCurrentEntitySet += new EventHandler(dtsProductPrices_OnCurrentEntitySet);
     
    }
	   
protected void btnAddPrice_ClickAction(object sender, EventArgs e) {
if (DialogService != null)
{
	// InsertChildDialogActionItem
	DialogService.SetSpecs(200, 550, "AddEditProductPrice", GetLocalResourceObject("946ba7b9-0666-4796-99ae-c1bf0455b8ab.DialogTitleOverride").ToString() );
  DialogService.EntityType = typeof(Sage.Entity.Interfaces.IProductProgram); 
  DialogService.SetChildIsertInfo(
    typeof(Sage.Entity.Interfaces.IProductProgram),
    typeof(Sage.Entity.Interfaces.IProduct),
    typeof(Sage.Entity.Interfaces.IProductProgram).GetProperty("Product"),
    typeof(Sage.Entity.Interfaces.IProduct).GetProperty("ProductProgram"));
  DialogService.ShowDialog();
}
}

protected override void OnWireEventHandlers()
{
 base.OnWireEventHandlers();
 btnAddPrice.Click += new ImageClickEventHandler(btnAddPrice_ClickAction);


}

protected override void OnFormBound()
{
if (dtsProductPrices.SourceObject == null) { dtsProductPrices.SourceObject = BindingSource.Current; }
if (dtsProductPrices.SourceObject == null) { RegisterBindingsWithClient(dtsProductPrices); }
dtsProductPrices.Bind();



}



public override Sage.Platform.Application.UI.ISmartPartInfo GetSmartPartInfo(Type smartPartInfoType)
{
	ToolsSmartPartInfo tinfo = new ToolsSmartPartInfo();
    	
	foreach (Control c in Controls)
	{
		SmartPartToolsContainer cont = c as SmartPartToolsContainer;
		if (cont != null)
		{
			switch (cont.ToolbarLocation)
			{
				case SmartPartToolsLocation.Right:
					foreach (Control tool in cont.Controls)
					{
											tinfo.RightTools.Add(tool);
										}
					break;
				case SmartPartToolsLocation.Center:
					foreach (Control tool in cont.Controls)
					{
						tinfo.CenterTools.Add(tool);
					}
					break;
				case SmartPartToolsLocation.Left:
					foreach (Control tool in cont.Controls)
					{
						tinfo.LeftTools.Add(tool);
					}
					break;
			}
		}
	}
	
		return tinfo;
}

private Sage.Platform.Controls.IEntityForm _formAdapter;

public Sage.Platform.Controls.IEntityForm FormAdapter
{
	get { return _formAdapter ?? (_formAdapter = new ProductPricesAdapter(this)); }
}

public class ProductPricesAdapter : Sage.Platform.WebPortal.Adapters.EntityFormAdapter, Sage.Form.Interfaces.IProductPrices
{
	public ProductPricesAdapter(Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider smartPart)
		: base(smartPart) {}

	private Sage.Platform.Controls.IDataGridControl _grdProductPrices;
	public Sage.Platform.Controls.IDataGridControl grdProductPrices
	{
		get { return FindControl(ref _grdProductPrices, "grdProductPrices"); }
	}
	private Sage.Platform.Controls.IDataSourceControl _dtsProductPrices;
	public Sage.Platform.Controls.IDataSourceControl dtsProductPrices
	{
		get { return FindControl(ref _dtsProductPrices, "dtsProductPrices"); }
	}
	private Sage.Platform.Controls.IButtonControl _btnAddPrice;
	public Sage.Platform.Controls.IButtonControl btnAddPrice
	{
		get { return FindControl(ref _btnAddPrice, "btnAddPrice"); }
	}

}

</script>

<script type="text/javascript">
</script>
