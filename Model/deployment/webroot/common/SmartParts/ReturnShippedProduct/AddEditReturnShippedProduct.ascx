<%@ Control Language="C#" ClassName="AddEditReturnShippedProduct" Inherits="Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider" %>
<%@ Register Assembly="Sage.SalesLogix.Client.GroupBuilder" Namespace="Sage.SalesLogix.Client.GroupBuilder" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.PickList" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.DependencyLookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Lookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Timeline" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.HighLevelTypes" Namespace="Sage.SalesLogix.HighLevelTypes" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.Platform.WebPortal" Namespace="Sage.Platform.WebPortal.SmartParts" TagPrefix="SalesLogix" %>
<%//------------------------------------------------------------------------
//This file was generated by a tool.  Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//------------------------------------------------------------------------ %>
<table border="0" cellpadding="1" cellspacing="0" class="formtable">
         <col width="100%" />
     <tr>
            <td  >
<div class="mainContentHeader2"><span id="hsRecProduct"  >
<asp:Localize runat="server" Text="<%$ resources: hsRecProduct.Caption %>"   >Received Product</asp:Localize></span></div>


      </td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="lueReceivedProduct_lbl" AssociatedControlID="lueReceivedProduct" runat="server" Text="<%$ resources: lueReceivedProduct.Caption %>" ></asp:Label>
 </div>   
  <div  class="textcontrol lookup"  >
<SalesLogix:LookupControl runat="server" ID="lueReceivedProduct" ButtonToolTip="<%$ resources: lueReceivedProduct.ButtonToolTip %>" LookupEntityName="ReturnReceivedProduct" LookupEntityTypeName="Sage.Entity.Interfaces.IReturnReceivedProduct, Sage.Entity.Interfaces, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" SeedProperty="Return.Id" AutoPostBack="true"  >
<LookupProperties>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueReceivedProduct.LookupProperties.AccountProduct.ProductName.PropertyHeader %>" PropertyName="AccountProduct.ProductName" PropertyType="System.String" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueReceivedProduct.LookupProperties.AccountProduct.ActualId.PropertyHeader %>" PropertyName="AccountProduct.ActualId" PropertyType="System.String" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueReceivedProduct.LookupProperties.AccountProduct.SerialNumber.PropertyHeader %>" PropertyName="AccountProduct.SerialNumber" PropertyType="System.String" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
</LookupProperties>
<LookupPreFilters>
</LookupPreFilters>
</SalesLogix:LookupControl>
  </div>

      </td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft" >
   <asp:Label ID="txtRecSKU_lbl" AssociatedControlID="txtRecSKU" runat="server" Text="<%$ resources: txtRecSKU.Caption %>" ></asp:Label>
 </div>
  <div  class="textcontrol"   >
<asp:TextBox runat="server" ID="txtRecSKU" ReadOnly="true" Rows="1"
 />
  </div>

      </td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft" >
   <asp:Label ID="txtRecSerialNumber_lbl" AssociatedControlID="txtRecSerialNumber" runat="server" Text="<%$ resources: txtRecSerialNumber.Caption %>" ></asp:Label>
 </div>
  <div  class="textcontrol"   >
<asp:TextBox runat="server" ID="txtRecSerialNumber" ReadOnly="true" Rows="1"
 />
  </div>

      </td>
      </tr>
<tr>
            <td  >
<div class="mainContentHeader2"><span id="hsShippedProduct"  >
<asp:Localize runat="server" Text="<%$ resources: hsShippedProduct.Caption %>"   >Shipped Product</asp:Localize></span></div>


      </td>
      </tr>
<tr>
            <td  >
<div class="slxlabel  alignleft checkbox">
  <SalesLogix:SLXCheckBox runat="server" ID="chkExists" CssClass="checkbox "
 Text="<%$ resources: chkExists.Caption %>" TextAlign="left" AutoPostBack="true"  />
</div>
      </td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="lueProduct_lbl" AssociatedControlID="lueProduct" runat="server" Text="<%$ resources: lueProduct.Caption %>" ></asp:Label>
 </div>   
  <div  class="textcontrol lookup"  >
<SalesLogix:LookupControl runat="server" ID="lueProduct" ButtonToolTip="<%$ resources: lueProduct.ButtonToolTip %>" LookupEntityName="Product" LookupEntityTypeName="Sage.Entity.Interfaces.IProduct, Sage.Entity.Interfaces, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" AutoPostBack="true"  >
<LookupProperties>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueProduct.LookupProperties.ActualId.PropertyHeader %>" PropertyName="ActualId" PropertyType="System.String" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueProduct.LookupProperties.Name.PropertyHeader %>" PropertyName="Name" PropertyType="System.String" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueProduct.LookupProperties.Type.PropertyHeader %>" PropertyName="Type" PropertyType="System.String" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueProduct.LookupProperties.Status.PropertyHeader %>" PropertyName="Status" PropertyType="System.String" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
</LookupProperties>
<LookupPreFilters>
</LookupPreFilters>
</SalesLogix:LookupControl>
  </div>

      </td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft" >
   <asp:Label ID="txtProductSKU_lbl" AssociatedControlID="txtProductSKU" runat="server" Text="<%$ resources: txtProductSKU.Caption %>" ></asp:Label>
 </div>
  <div  class="textcontrol"   >
<asp:TextBox runat="server" ID="txtProductSKU" ReadOnly="true" Rows="1"
 />
  </div>

      </td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft" >
   <asp:Label ID="txtSerialNumber_lbl" AssociatedControlID="txtSerialNumber" runat="server" Text="<%$ resources: txtSerialNumber.Caption %>" ></asp:Label>
 </div>
  <div  class="textcontrol"   >
<asp:TextBox runat="server" ID="txtSerialNumber" Rows="1"
 />
  </div>

      </td>
      </tr>
<tr>
            <td  >
<div class="slxlabel  alignleft checkbox">
  <SalesLogix:SLXCheckBox runat="server" ID="chkShipped" CssClass="checkbox "
 Text="<%$ resources: chkShipped.Caption %>" TextAlign="left" AutoPostBack="true"  />
</div>
      </td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="dpShipDate_lbl" AssociatedControlID="dpShipDate" runat="server" Text="<%$ resources: dpShipDate.Caption %>" ></asp:Label>
 </div>
   <div  class="textcontrol datepicker"  >
    <SalesLogix:DateTimePicker runat="server" ID="dpShipDate" ButtonToolTip="<%$ resources: dpShipDate.ButtonToolTip %>" DisplayTime="false" Timeless="true" />
  </div>

      </td>
      </tr>
<tr>
            <td  >
<asp:Panel runat="server" ID="ctrlButtons" CssClass="controlslist qfActionContainer"
>
   <asp:Button runat="server" ID="cmdOK"
 Text="<%$ resources: cmdOK.Caption %>" CssClass="slxbutton"  />
   
   <asp:Button runat="server" ID="cmdClose"
 Text="<%$ resources: cmdClose.Caption %>" CssClass="slxbutton"  />
 
</asp:Panel>
      </td>
      </tr>
</table>
 

 <SalesLogix:SmartPartToolsContainer runat="server" ID="AddEditReturnShippedProduct_RTools" ToolbarLocation="right">
  <SalesLogix:PageLink ID="lnkAddEditReturnShippedProductHelp" runat="server" LinkType="HelpFileName" ToolTip="<%$ resources: Portal, Help_ToolTip %>" Target="MCWebHelp" NavigateUrl="returnshippedproductinfo.htm" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Help_16x16"></SalesLogix:PageLink> </SalesLogix:SmartPartToolsContainer>

<script runat="server" type="text/C#">
private Sage.Platform.Security.IRoleSecurityService _roleSecurityService;
/// <summary>
/// Gets or sets the role security service.
/// </summary>
/// <value>The role security service.</value>
[Sage.Platform.Application.ServiceDependency]
public Sage.Platform.Security.IRoleSecurityService RoleSecurityService
{
   set
      {
         _roleSecurityService = Sage.Platform.Application.ApplicationContext.Current.Services.Get<Sage.Platform.Security.IRoleSecurityService>(true);
      }
      get
      {
         return _roleSecurityService;
      }
}

public override Type EntityType
{
	get { return typeof(Sage.Entity.Interfaces.IReturnShippedProduct); }
}

 

protected override void OnAddEntityBindings() { 
    
                        // lueReceivedProduct.LookupResultValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding lueReceivedProductLookupResultValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("ReturnedReceivedProduct", lueReceivedProduct, "LookupResultValue");
        BindingSource.Bindings.Add(lueReceivedProductLookupResultValueBinding);
                 // lueReceivedProduct.SeedValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding lueReceivedProductSeedValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Return.Id", lueReceivedProduct, "SeedValue");
        lueReceivedProductSeedValueBinding.IgnoreFLSDisabling = true;
        
        BindingSource.Bindings.Add(lueReceivedProductSeedValueBinding);
                       // txtRecSKU.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtRecSKUTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("ReturnedReceivedProduct.AccountProduct.ActualId", txtRecSKU, "Text");
        BindingSource.Bindings.Add(txtRecSKUTextBinding);
                       // txtRecSerialNumber.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtRecSerialNumberTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("ReturnedReceivedProduct.AccountProduct.SerialNumber", txtRecSerialNumber, "Text");
        BindingSource.Bindings.Add(txtRecSerialNumberTextBinding);
       
                        // chkExists.Checked Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding chkExistsCheckedBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("ReturnedExisting", chkExists, "Checked");
        BindingSource.Bindings.Add(chkExistsCheckedBinding);
                       // lueProduct.LookupResultValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding lueProductLookupResultValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Product", lueProduct, "LookupResultValue");
        BindingSource.Bindings.Add(lueProductLookupResultValueBinding);
                       // txtProductSKU.ReadOnly Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtProductSKUReadOnlyBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("ReturnedExisting", txtProductSKU, "ReadOnly");
        txtProductSKUReadOnlyBinding.ChangeNotificationEventName = "${generator.GetChangeEventName($bind,$control)}";
        txtProductSKUReadOnlyBinding.IgnoreFLSDisabling = true;
        
        BindingSource.Bindings.Add(txtProductSKUReadOnlyBinding);
                 // txtProductSKU.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtProductSKUTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("AccountProduct.ActualId", txtProductSKU, "Text");
        BindingSource.Bindings.Add(txtProductSKUTextBinding);
                       // txtSerialNumber.ReadOnly Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtSerialNumberReadOnlyBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("ReturnedExisting", txtSerialNumber, "ReadOnly");
        txtSerialNumberReadOnlyBinding.ChangeNotificationEventName = "${generator.GetChangeEventName($bind,$control)}";
        txtSerialNumberReadOnlyBinding.IgnoreFLSDisabling = true;
        
        BindingSource.Bindings.Add(txtSerialNumberReadOnlyBinding);
                 // txtSerialNumber.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtSerialNumberTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("AccountProduct.SerialNumber", txtSerialNumber, "Text");
        BindingSource.Bindings.Add(txtSerialNumberTextBinding);
                       // chkShipped.Checked Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding chkShippedCheckedBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Shipped", chkShipped, "Checked");
        BindingSource.Bindings.Add(chkShippedCheckedBinding);
                       // dpShipDate.DateTimeValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding dpShipDateDateTimeValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("ShippedDate", dpShipDate, "DateTimeValue");
        BindingSource.Bindings.Add(dpShipDateDateTimeValueBinding);
       
        
        
     
   
}
	   	   	   	   	   	   	   	   	   	   	   	   	   	   
protected void lueReceivedProduct_ChangeAction(object sender, EventArgs e) {
      object[] objarray = new object[] { this.BindingSource.Current };
     Sage.Platform.EntityFactory.Execute<Sage.Entity.Interfaces.IReturnShippedProduct>("ReturnShippedProduct.AssociateExistingAccountProduct", objarray);
  
}
protected void chkExists_ChangeAction(object sender, EventArgs e) {
      object[] objarray = new object[] { this.BindingSource.Current };
     Sage.Platform.EntityFactory.Execute<Sage.Entity.Interfaces.IReturnShippedProduct>("ReturnShippedProduct.AssociateExistingAccountProduct", objarray);
          chkExists_ChangeActionBRC(sender, e);
    
  
}
protected void chkExists_ChangeActionBRC(object sender, EventArgs e) {
Sage.Platform.WebPortal.Services.IPanelRefreshService refresher = PageWorkItem.Services.Get<Sage.Platform.WebPortal.Services.IPanelRefreshService>();
if (refresher != null) {
  refresher.RefreshAll();
}
else {  
  Response.Redirect(Request.Url.ToString());
}
}
protected void lueProduct_ChangeAction(object sender, EventArgs e) {
      object[] objarray = new object[] { this.BindingSource.Current };
     Sage.Platform.EntityFactory.Execute<Sage.Entity.Interfaces.IReturnShippedProduct>("ReturnShippedProduct.AssociateNewAccountProduct", objarray);
  
}
protected void chkShipped_ChangeAction(object sender, EventArgs e) {
      object[] objarray = new object[] { this.BindingSource.Current };
     Sage.Platform.EntityFactory.Execute<Sage.Entity.Interfaces.IReturnShippedProduct>("ReturnShippedProduct.OnProductShippedChanged", objarray);
  
}
protected void cmdOK_ClickAction(object sender, EventArgs e) {
  Sage.Entity.Interfaces.IReturnShippedProduct _entity = BindingSource.Current as Sage.Entity.Interfaces.IReturnShippedProduct;
  if (_entity != null) 
  {
    object _parent = GetParentEntity(); 
    if (DialogService.ChildInsertInfo != null) 
    {
      if (_parent != null) 
      {
        if (DialogService.ChildInsertInfo.ParentReferenceProperty != null) 
        {
          DialogService.ChildInsertInfo.ParentReferenceProperty.SetValue(_entity, _parent, null);
        }        
      }
    }
    bool shouldSave = true;
    Sage.Platform.WebPortal.EntityPage page = Page as Sage.Platform.WebPortal.EntityPage;
	if (page != null)
	{
       if(IsInDialog() && page.ModeId.ToUpper() == "INSERT")
       {
         shouldSave = false;
       }
	}

    if(shouldSave)
    {
       _entity.Save();
    }
    
    if (_parent != null)
    {
        if (DialogService.ChildInsertInfo != null)
        {
           if (DialogService.ChildInsertInfo.ParentsCollectionProperty != null) 
           {
              System.Reflection.MethodInfo _add = DialogService.ChildInsertInfo.ParentsCollectionProperty.PropertyType.GetMethod("Add");
              _add.Invoke(DialogService.ChildInsertInfo.ParentsCollectionProperty.GetValue(_parent, null), new object[] { _entity });
           }
        }
     }        
  }
  
}

protected override void OnWireEventHandlers()
{
 base.OnWireEventHandlers();
 lueReceivedProduct.LookupResultValueChanged += new EventHandler(lueReceivedProduct_ChangeAction);
chkExists.CheckedChanged += new EventHandler(chkExists_ChangeAction);
lueProduct.LookupResultValueChanged += new EventHandler(lueProduct_ChangeAction);
chkShipped.CheckedChanged += new EventHandler(chkShipped_ChangeAction);
cmdOK.Click += new EventHandler(cmdOK_ClickAction);
cmdOK.Click += new EventHandler(DialogService.CloseEventHappened);
cmdClose.Click += new EventHandler(DialogService.CloseEventHappened);


}

protected override void OnFormBound()
{
ClientBindingMgr.RegisterSaveButton(cmdOK);

ScriptManager.RegisterStartupScript(Page, GetType(), "cleanupcontainer", "jQuery(\".controlslist > div:empty\").remove();", true);
ClientBindingMgr.RegisterDialogCancelButton(cmdClose);


}



public override Sage.Platform.Application.UI.ISmartPartInfo GetSmartPartInfo(Type smartPartInfoType)
{
	ToolsSmartPartInfo tinfo = new ToolsSmartPartInfo();
    	if (BindingSource != null)
	{
		if (BindingSource.Current != null)
		{
			tinfo.Description = BindingSource.Current.ToString();
			tinfo.Title = BindingSource.Current.ToString();
		}
	}
    	
	foreach (Control c in Controls)
	{
		SmartPartToolsContainer cont = c as SmartPartToolsContainer;
		if (cont != null)
		{
			switch (cont.ToolbarLocation)
			{
				case SmartPartToolsLocation.Right:
					foreach (Control tool in cont.Controls)
					{
											tinfo.RightTools.Add(tool);
										}
					break;
				case SmartPartToolsLocation.Center:
					foreach (Control tool in cont.Controls)
					{
						tinfo.CenterTools.Add(tool);
					}
					break;
				case SmartPartToolsLocation.Left:
					foreach (Control tool in cont.Controls)
					{
						tinfo.LeftTools.Add(tool);
					}
					break;
			}
		}
	}
	
		return tinfo;
}

private Sage.Platform.Controls.IEntityForm _formAdapter;

public Sage.Platform.Controls.IEntityForm FormAdapter
{
	get { return _formAdapter ?? (_formAdapter = new AddEditReturnShippedProductAdapter(this)); }
}

public class AddEditReturnShippedProductAdapter : Sage.Platform.WebPortal.Adapters.EntityFormAdapter, Sage.Form.Interfaces.IAddEditReturnShippedProduct
{
	public AddEditReturnShippedProductAdapter(Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider smartPart)
		: base(smartPart) {}

	private Sage.Platform.Controls.ILookupControl _lueReceivedProduct;
	public Sage.Platform.Controls.ILookupControl lueReceivedProduct
	{
		get { return FindControl(ref _lueReceivedProduct, "lueReceivedProduct"); }
	}
	private Sage.Platform.Controls.ITextBoxControl _txtRecSKU;
	public Sage.Platform.Controls.ITextBoxControl txtRecSKU
	{
		get { return FindControl(ref _txtRecSKU, "txtRecSKU"); }
	}
	private Sage.Platform.Controls.ITextBoxControl _txtRecSerialNumber;
	public Sage.Platform.Controls.ITextBoxControl txtRecSerialNumber
	{
		get { return FindControl(ref _txtRecSerialNumber, "txtRecSerialNumber"); }
	}
	private Sage.Platform.Controls.ICheckBoxControl _chkExists;
	public Sage.Platform.Controls.ICheckBoxControl chkExists
	{
		get { return FindControl(ref _chkExists, "chkExists"); }
	}
	private Sage.Platform.Controls.ILookupControl _lueProduct;
	public Sage.Platform.Controls.ILookupControl lueProduct
	{
		get { return FindControl(ref _lueProduct, "lueProduct"); }
	}
	private Sage.Platform.Controls.ITextBoxControl _txtProductSKU;
	public Sage.Platform.Controls.ITextBoxControl txtProductSKU
	{
		get { return FindControl(ref _txtProductSKU, "txtProductSKU"); }
	}
	private Sage.Platform.Controls.ITextBoxControl _txtSerialNumber;
	public Sage.Platform.Controls.ITextBoxControl txtSerialNumber
	{
		get { return FindControl(ref _txtSerialNumber, "txtSerialNumber"); }
	}
	private Sage.Platform.Controls.ICheckBoxControl _chkShipped;
	public Sage.Platform.Controls.ICheckBoxControl chkShipped
	{
		get { return FindControl(ref _chkShipped, "chkShipped"); }
	}
	private Sage.Platform.Controls.IDateTimePickerControl _dpShipDate;
	public Sage.Platform.Controls.IDateTimePickerControl dpShipDate
	{
		get { return FindControl(ref _dpShipDate, "dpShipDate"); }
	}
	private Sage.Platform.Controls.IControlsListControl _ctrlButtons;
	public Sage.Platform.Controls.IControlsListControl ctrlButtons
	{
		get { return FindControl(ref _ctrlButtons, "ctrlButtons"); }
	}
	private Sage.Platform.Controls.IButtonControl _cmdOK;
	public Sage.Platform.Controls.IButtonControl cmdOK
	{
		get { return FindControl(ref _cmdOK, "cmdOK"); }
	}
	private Sage.Platform.Controls.IButtonControl _cmdClose;
	public Sage.Platform.Controls.IButtonControl cmdClose
	{
		get { return FindControl(ref _cmdClose, "cmdClose"); }
	}

}

</script>

<script type="text/javascript">
</script>
