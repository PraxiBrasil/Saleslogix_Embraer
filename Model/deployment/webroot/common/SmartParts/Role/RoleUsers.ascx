<%@ Control Language="C#" ClassName="RoleUsers" Inherits="Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider" %>
<%@ Register Assembly="Sage.SalesLogix.Client.GroupBuilder" Namespace="Sage.SalesLogix.Client.GroupBuilder" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.PickList" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.DependencyLookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Lookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Timeline" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.HighLevelTypes" Namespace="Sage.SalesLogix.HighLevelTypes" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.Platform.WebPortal" Namespace="Sage.Platform.WebPortal.SmartParts" TagPrefix="SalesLogix" %>
<%//------------------------------------------------------------------------
//This file was generated by a tool.  Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//------------------------------------------------------------------------ %>
  <SalesLogix:SlxGridView runat="server" ID="grdUsers" GridLines="None"
AutoGenerateColumns="false" CellPadding="4" CssClass="datagrid" PagerStyle-CssClass="gridPager"
AlternatingRowStyle-CssClass="rowdk" RowStyle-CssClass="rowlt" SelectedRowStyle-CssClass="rowSelected" ShowEmptyTable="true" EnableViewState="false"
 AllowPaging="true" PageSize="20" OnPageIndexChanging="grdUserspage_changing"  ExpandableRows="True" ResizableColumns="True"  OnRowCommand="grdUsers_RowCommand" 
 DataKeyNames="InstanceId,Id" 
 AllowSorting="true" OnSorting="grdUsers_Sorting"  OnRowDeleting="grdUsers_RowDeleting" OnRowDataBound="grdUsers_RowDataBound"  ShowSortIcon="true" >
<Columns>
   <asp:TemplateField   HeaderText="<%$ resources: grdUsers.0795541e-c762-44d4-8eb4-2e1c5f57b490.ColumnHeading %>"       SortExpression="User.UserInfo.UserName"  >
    <itemtemplate>
      <SalesLogix:PageLink runat="server" NavigateUrl="User"
   EntityId='<%# dsUsers.getPropertyValue(Container.DataItem, "User.Id") %>'     Text='<%# dsUsers.getPropertyValue(Container.DataItem, "User.UserInfo.UserName") %>' 
         LinkType="EntityAlias"></SalesLogix:PageLink>
     </itemtemplate></asp:TemplateField>
      <asp:BoundField DataField="User.UserInfo.Division" 
      HeaderText="<%$ resources: grdUsers.d793b567-28ab-43b4-b750-5658622f5773.ColumnHeading %>"       SortExpression="User.UserInfo.Division"    >
      </asp:BoundField>
    <asp:BoundField DataField="User.UserInfo.Region" 
      HeaderText="<%$ resources: grdUsers.0e343053-0bde-46cd-8b8b-be281d07c73c.ColumnHeading %>"       SortExpression="User.UserInfo.Region"    >
      </asp:BoundField>
   <asp:ButtonField CommandName="Delete" 
  Text="<%$ resources: grdUsers.57ab433b-62fd-4396-baa0-4e7fc2430424.Text %>"                >
  	    </asp:ButtonField>
   </Columns>
    <PagerSettings Mode="NumericFirstLast" FirstPageImageUrl="ImageResource.axd?scope=global&type=Global_Images&key=Start_16x16" LastPageImageUrl="ImageResource.axd?scope=global&type=Global_Images&key=End_16x16" />
</SalesLogix:SlxGridView>

<script runat="server" type="text/C#">

            private int _grdUsersdeleteColumnIndex = -2;
protected int grdUsersDeleteColumnIndex
{
	get
	{
		if (_grdUsersdeleteColumnIndex == -2)
		{
			int bias = (grdUsers.ExpandableRows) ? 1 : 0;
			_grdUsersdeleteColumnIndex = -1;
			int colcount = 0;
			foreach (DataControlField col in grdUsers.Columns)
			{
				ButtonField btn = col as ButtonField;
				if (btn != null)
				{
					if (btn.CommandName == "Delete")
					{
						_grdUsersdeleteColumnIndex = colcount + bias;
						break;
					}
				}
				colcount++;
			}
		}
		return _grdUsersdeleteColumnIndex;
	}
}

protected void grdUsers_RowDataBound(object sender, GridViewRowEventArgs e)
{
	if (e.Row.RowType == DataControlRowType.DataRow)
	{
		if ((grdUsersDeleteColumnIndex >= 0) && (grdUsersDeleteColumnIndex < e.Row.Cells.Count))
		{
			TableCell cell = e.Row.Cells[grdUsersDeleteColumnIndex];
			foreach (Control c in cell.Controls)
			{
				LinkButton btn = c as LinkButton;
				if (btn != null)
				{
					btn.Attributes.Add("onclick", "javascript: return confirm('" + Sage.Platform.WebPortal.PortalUtil.JavaScriptEncode(GetLocalResourceObject("grdUsers.57ab433b-62fd-4396-baa0-4e7fc2430424.ConfirmationMessage").ToString()) + "');");
					return;
				}
			}
		}
	}
}
   
protected void grdUserspage_changing(object sender, GridViewPageEventArgs e)
{
 grdUsers.PageIndex = e.NewPageIndex;
 grdUsers.DataBind();
}
protected void grdUsers_Sorting(object sender, GridViewSortEventArgs e) { }
protected void grdUsers_RowCommand(object sender, GridViewCommandEventArgs e)
{
    if (e.CommandName == "Page")
        return;
    int rowIndex;
    if (Int32.TryParse(e.CommandArgument.ToString(), out rowIndex))
    {
        dsUsers.SelectedIndex = rowIndex;
		object currentEntity = dsUsers.Current;
        if ((currentEntity is Sage.Platform.ComponentModel.ComponentView) && !((Sage.Platform.ComponentModel.ComponentView)currentEntity).IsVirtualComponent)
            currentEntity = ((Sage.Platform.ComponentModel.ComponentView)currentEntity).Component;
		string id = String.Empty;
        //Check if this is an unpersisted entity and use its InstanceId
        if (Sage.Platform.WebPortal.PortalUtil.ObjectIsNewEntity(currentEntity))
        {
		    if (grdUsers.DataKeys[0].Values.Count > 1) {
                foreach (DictionaryEntry val in grdUsers.DataKeys[rowIndex].Values)
                {
                    if (val.Key.ToString() == "InstanceId")
                    {
                        Guid instanceId = (Guid)val.Value;
                        dsUsers.SetCurrentEntityByInstanceId(instanceId);
                        id = instanceId.ToString();
		                currentEntity = dsUsers.Current;
                        if ((currentEntity is Sage.Platform.ComponentModel.ComponentView) && !((Sage.Platform.ComponentModel.ComponentView)currentEntity).IsVirtualComponent)
                            currentEntity = ((Sage.Platform.ComponentModel.ComponentView)currentEntity).Component;
                    }
                }                 
            }
        }
        else
        {
            foreach (DictionaryEntry val in grdUsers.DataKeys[rowIndex].Values)
            {
                if (val.Key.ToString() != "InstanceId")
                {
                    id = val.Value.ToString();
                }
            }
        }		
		if (e.CommandName.Equals("Delete"))
		{
            Sage.Entity.Interfaces.IRole mainentity = this.BindingSource.Current as Sage.Entity.Interfaces.IRole;
			if (mainentity != null)
			{
			    Sage.Entity.Interfaces.IUserRole childEntity = null;
			    if((currentEntity != null) && (currentEntity is Sage.Entity.Interfaces.IUserRole))
			    {
			        childEntity = (Sage.Entity.Interfaces.IUserRole)currentEntity;    
			    }
			    else if (id != null)
			    {
                    childEntity = Sage.Platform.EntityFactory.GetById<Sage.Entity.Interfaces.IUserRole>(id);
            }
				if(childEntity != null)
				{
			         mainentity.Users.Remove(childEntity);
					 mainentity.Save();
					 if((childEntity.PersistentState & Sage.Platform.Orm.Interfaces.PersistentState.New) <= 0)
					 {
					     childEntity.Delete();
					 }
					 dsUsers.SelectedIndex = -1;
			    }
		    }
		}
	}
    grdUsers_refresh();
}
	
	protected void grdUsers_refresh()
	{
		if (PageWorkItem != null) {
			Sage.Platform.WebPortal.Services.IPanelRefreshService refresher = PageWorkItem.Services.Get<Sage.Platform.WebPortal.Services.IPanelRefreshService>();
			if (refresher != null)
			{
				refresher.RefreshAll();
			}
			else
			{
				Response.Redirect(Request.Url.ToString());
			}
		}
	}
	
            protected void grdUsers_RowDeleting(object sender, GridViewDeleteEventArgs e)
	{
		grdUsers.SelectedIndex = -1;
	}
	</script>
 

 <SalesLogix:SmartPartToolsContainer runat="server" ID="RoleUsers_LTools" ToolbarLocation="left">
    <div class="slxlabel"><asp:Label runat="server" ID="QFLabel" Text="<%$ resources: QFLabel.Text %>"  />
</div>
  </SalesLogix:SmartPartToolsContainer>
 <SalesLogix:SmartPartToolsContainer runat="server" ID="RoleUsers_RTools" ToolbarLocation="right">
   <SalesLogix:LookupControl runat="server" ID="lueAddUser" ButtonToolTip="<%$ resources: lueAddUser.ButtonToolTip %>" LookupEntityName="User" LookupEntityTypeName="Sage.Entity.Interfaces.IUser, Sage.Entity.Interfaces, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" LookupDisplayMode="ButtonOnly" InitializeLookup="true" AutoPostBack="true" LookupImageURL="~/ImageResource.axd?scope=global&type=Global_Images&key=plus_16x16"  >
<LookupProperties>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueAddUser.LookupProperties.UserInfo.UserName.PropertyHeader %>" PropertyName="UserInfo.UserName" PropertyType="System.String" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueAddUser.LookupProperties.UserInfo.Title.PropertyHeader %>" PropertyName="UserInfo.Title" PropertyType="System.String" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueAddUser.LookupProperties.UserInfo.Department.PropertyHeader %>" PropertyName="UserInfo.Department" PropertyType="System.String" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueAddUser.LookupProperties.UserInfo.Region.PropertyHeader %>" PropertyName="UserInfo.Region" PropertyType="System.String" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
</LookupProperties>
<LookupPreFilters>
<SalesLogix:LookupPreFilter PropertyName="Type" PropertyType="System.String" OperatorCode="!="
 FilterValue="W"
 ></SalesLogix:LookupPreFilter>
<SalesLogix:LookupPreFilter PropertyName="Type" PropertyType="System.String" OperatorCode="!="
 FilterValue="P"
 ></SalesLogix:LookupPreFilter>
<SalesLogix:LookupPreFilter PropertyName="Type" PropertyType="System.String" OperatorCode="!="
 FilterValue="R"
 ></SalesLogix:LookupPreFilter>
<SalesLogix:LookupPreFilter PropertyName="Type" PropertyType="System.String" OperatorCode="!="
 FilterValue="A"
 ></SalesLogix:LookupPreFilter>
</LookupPreFilters>
</SalesLogix:LookupControl>
                 

  <SalesLogix:PageLink ID="lnkRoleUsersHelp" runat="server" LinkType="HelpFileName" ToolTip="<%$ resources: Portal, Help_ToolTip %>" Target="MCWebHelp" NavigateUrl="Role_Users_Tab" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Help_16x16"></SalesLogix:PageLink> </SalesLogix:SmartPartToolsContainer>

<script runat="server" type="text/C#">
private Sage.Platform.Security.IRoleSecurityService _roleSecurityService;
/// <summary>
/// Gets or sets the role security service.
/// </summary>
/// <value>The role security service.</value>
[Sage.Platform.Application.ServiceDependency]
public Sage.Platform.Security.IRoleSecurityService RoleSecurityService
{
   set
      {
         _roleSecurityService = Sage.Platform.Application.ApplicationContext.Current.Services.Get<Sage.Platform.Security.IRoleSecurityService>(true);
      }
      get
      {
         return _roleSecurityService;
      }
}

public override Type EntityType
{
	get { return typeof(Sage.Entity.Interfaces.IRole); }
}

 private Sage.Platform.WebPortal.Binding.WebEntityListBindingSource _dsUsers;
public Sage.Platform.WebPortal.Binding.WebEntityListBindingSource dsUsers
{ 
  get 
  {
    if (_dsUsers == null)
    {
             _dsUsers = new Sage.Platform.WebPortal.Binding.WebEntityListBindingSource(typeof(Sage.Entity.Interfaces.IUserRole), 
	    EntityType              ,"Users", System.Reflection.MemberTypes.Property);
                   _dsUsers.UseSmartQuery = true;
      	         _dsUsers.DataOptional = true;
       	}
 	return _dsUsers;
  }
}

void dsUsers_OnCurrentEntitySet(object sender, EventArgs e) 
{
      if (Visible)
    { 
		if(BindingSource.Current != null)
		{
		
      
        dsUsers.SourceObject = BindingSource.Current;
   		}
    }
   if (Visible)
   {   
      RegisterBindingsWithClient(dsUsers);
   }
}

 



 

protected override void OnAddEntityBindings() { 
       dsUsers.Bindings.Add(new Sage.Platform.WebPortal.Binding.WebEntityListBinding("Users", grdUsers ));
   dsUsers.BindFieldNames = new String[] { "Id","User.UserInfo.UserName","User.Id","User.UserInfo.Division","User.UserInfo.Region" };
     
     BindingSource.OnCurrentEntitySet += new EventHandler(dsUsers_OnCurrentEntitySet);
     
	       }
	   
protected void lueAddUser_ChangeAction(object sender, EventArgs e) {
    if (lueAddUser.LookupResultValue != null)
    {
        Sage.Entity.Interfaces.IRole parentEntity = BindingSource.Current as Sage.Entity.Interfaces.IRole;
        Sage.Entity.Interfaces.IUser relatedEntity = lueAddUser.LookupResultValue as Sage.Entity.Interfaces.IUser;
        Sage.Platform.WebPortal.EntityPage page = (Sage.Platform.WebPortal.EntityPage)Page;
		// check for duplicates
        bool found = false;
        if ((parentEntity != null) && (relatedEntity != null))
        {
				foreach (Sage.Entity.Interfaces.IUserRole i in parentEntity.Users)
            {				
                if (i.User.Equals(relatedEntity))
				{
				    found = true;
                    if (DialogService != null)
                    {
                        DialogService.ShowMessage(base.GetLocalResourceObject("143457d7-890c-4fac-9e78-9662c2237589.DuplicateAssociationMessage").ToString(), 90, 360);
						return;
                    }
				}
            }
		        Sage.Entity.Interfaces.IUserRole relationshipEntity = Sage.Platform.EntityFactory.Create<Sage.Entity.Interfaces.IUserRole>();
		if (!found)
        {
            relationshipEntity.Role = parentEntity;
            relationshipEntity.User = relatedEntity;
            parentEntity.Users.Add(relationshipEntity);
            dsUsers.SelectedMember = relationshipEntity;
            if (page.ModeId.ToUpper() != "INSERT")
            {
				parentEntity.Save();
            }
		}
        }
    }

}

protected override void OnWireEventHandlers()
{
 base.OnWireEventHandlers();
 lueAddUser.LookupResultValueChanged += new EventHandler(lueAddUser_ChangeAction);


}

protected override void OnFormBound()
{
ClientBindingMgr.RegisterBoundControl(lueAddUser);

if (dsUsers.SourceObject == null) { dsUsers.SourceObject = BindingSource.Current; }
if (dsUsers.SourceObject == null) { RegisterBindingsWithClient(dsUsers); }
dsUsers.Bind();



}



public override Sage.Platform.Application.UI.ISmartPartInfo GetSmartPartInfo(Type smartPartInfoType)
{
	ToolsSmartPartInfo tinfo = new ToolsSmartPartInfo();
    	if (BindingSource != null)
	{
		if (BindingSource.Current != null)
		{
			tinfo.Description = BindingSource.Current.ToString();
			tinfo.Title = BindingSource.Current.ToString();
		}
	}
    	
	foreach (Control c in Controls)
	{
		SmartPartToolsContainer cont = c as SmartPartToolsContainer;
		if (cont != null)
		{
			switch (cont.ToolbarLocation)
			{
				case SmartPartToolsLocation.Right:
					foreach (Control tool in cont.Controls)
					{
											tinfo.RightTools.Add(tool);
										}
					break;
				case SmartPartToolsLocation.Center:
					foreach (Control tool in cont.Controls)
					{
						tinfo.CenterTools.Add(tool);
					}
					break;
				case SmartPartToolsLocation.Left:
					foreach (Control tool in cont.Controls)
					{
						tinfo.LeftTools.Add(tool);
					}
					break;
			}
		}
	}
	
		return tinfo;
}

private Sage.Platform.Controls.IEntityForm _formAdapter;

public Sage.Platform.Controls.IEntityForm FormAdapter
{
	get { return _formAdapter ?? (_formAdapter = new RoleUsersAdapter(this)); }
}

public class RoleUsersAdapter : Sage.Platform.WebPortal.Adapters.EntityFormAdapter, Sage.Form.Interfaces.IRoleUsers
{
	public RoleUsersAdapter(Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider smartPart)
		: base(smartPart) {}

	private Sage.Platform.Controls.IDataGridControl _grdUsers;
	public Sage.Platform.Controls.IDataGridControl grdUsers
	{
		get { return FindControl(ref _grdUsers, "grdUsers"); }
	}
	private Sage.Platform.Controls.IDataSourceControl _dsUsers;
	public Sage.Platform.Controls.IDataSourceControl dsUsers
	{
		get { return FindControl(ref _dsUsers, "dsUsers"); }
	}
	private Sage.Platform.Controls.ILabelControl _QFLabel;
	public Sage.Platform.Controls.ILabelControl QFLabel
	{
		get { return FindControl(ref _QFLabel, "QFLabel"); }
	}
	private Sage.Platform.Controls.ILookupControl _lueAddUser;
	public Sage.Platform.Controls.ILookupControl lueAddUser
	{
		get { return FindControl(ref _lueAddUser, "lueAddUser"); }
	}

}

</script>

<script type="text/javascript">
</script>
