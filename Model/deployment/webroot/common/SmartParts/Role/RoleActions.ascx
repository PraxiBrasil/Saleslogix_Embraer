<%@ Control Language="C#" ClassName="RoleActions" Inherits="Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider" %>
<%@ Register Assembly="Sage.SalesLogix.Client.GroupBuilder" Namespace="Sage.SalesLogix.Client.GroupBuilder" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.PickList" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.DependencyLookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Lookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Timeline" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.HighLevelTypes" Namespace="Sage.SalesLogix.HighLevelTypes" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.Platform.WebPortal" Namespace="Sage.Platform.WebPortal.SmartParts" TagPrefix="SalesLogix" %>
<%//------------------------------------------------------------------------
//This file was generated by a tool.  Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//------------------------------------------------------------------------ %>
  <SalesLogix:SlxGridView runat="server" ID="grdSecuredActionRoles" GridLines="None"
AutoGenerateColumns="false" CellPadding="4" CssClass="datagrid" PagerStyle-CssClass="gridPager"
AlternatingRowStyle-CssClass="rowdk" RowStyle-CssClass="rowlt" SelectedRowStyle-CssClass="rowSelected" ShowEmptyTable="true" EnableViewState="false"
 AllowPaging="true" PageSize="20" OnPageIndexChanging="grdSecuredActionRolespage_changing"  ExpandableRows="True" ResizableColumns="True"  OnRowCommand="grdSecuredActionRoles_RowCommand" 
 DataKeyNames="InstanceId,Id" 
 AllowSorting="true" OnSorting="grdSecuredActionRoles_Sorting"  OnRowDeleting="grdSecuredActionRoles_RowDeleting" OnRowDataBound="grdSecuredActionRoles_RowDataBound"  ShowSortIcon="true" >
<Columns>
   <asp:BoundField DataField="SecuredAction.Name" 
      HeaderText="<%$ resources: grdSecuredActionRoles.35c88b2e-7947-4932-b4dc-c77c4e1d6812.ColumnHeading %>"       SortExpression="SecuredAction.Name"    >
      </asp:BoundField>
    <asp:BoundField DataField="SecuredAction.Parent" 
      HeaderText="<%$ resources: grdSecuredActionRoles.1d13e999-e545-45c4-aca7-12448ffcf5f6.ColumnHeading %>"       SortExpression="SecuredAction.Parent"    >
      </asp:BoundField>
    <asp:BoundField DataField="SecuredAction.Description" 
      HeaderText="<%$ resources: grdSecuredActionRoles.c721e49b-01a5-4791-83cb-4b045dcad801.ColumnHeading %>"       SortExpression="SecuredAction.Description"    >
      </asp:BoundField>
    <asp:TemplateField   HeaderText="<%$ resources: grdSecuredActionRoles.480bd009-eafe-44c2-b8d8-55ad2c855cab.ColumnHeading %>"       SortExpression="SecuredAction.ModifyUser"  >
    <itemtemplate>
   <SalesLogix:SlxUserControl runat="server" ID="grdSecuredActionRolescol4" DisplayMode="AsText" LookupResultValue='<%#  dsSecuredActionRoles.getPropertyValue(Container.DataItem, "SecuredAction.ModifyUser")  %>' CssClass=""  />
   </itemtemplate></asp:TemplateField>
    <asp:TemplateField   HeaderText="<%$ resources: grdSecuredActionRoles.c0b41977-be17-49b2-b410-7600fbabae86.ColumnHeading %>"       SortExpression="SecuredAction.CreateUser"  >
    <itemtemplate>
   <SalesLogix:SlxUserControl runat="server" ID="grdSecuredActionRolescol5" DisplayMode="AsText" LookupResultValue='<%#  dsSecuredActionRoles.getPropertyValue(Container.DataItem, "SecuredAction.CreateUser")  %>' CssClass=""  />
   </itemtemplate></asp:TemplateField>
   <asp:ButtonField CommandName="Delete" 
  Text="<%$ resources: grdSecuredActionRoles.d83a73d0-d34d-45ea-a711-202ab6c4452c.Text %>"                >
  	    </asp:ButtonField>
   </Columns>
    <PagerSettings Mode="NumericFirstLast" FirstPageImageUrl="ImageResource.axd?scope=global&type=Global_Images&key=Start_16x16" LastPageImageUrl="ImageResource.axd?scope=global&type=Global_Images&key=End_16x16" />
</SalesLogix:SlxGridView>

<script runat="server" type="text/C#">

                  private int _grdSecuredActionRolesdeleteColumnIndex = -2;
protected int grdSecuredActionRolesDeleteColumnIndex
{
	get
	{
		if (_grdSecuredActionRolesdeleteColumnIndex == -2)
		{
			int bias = (grdSecuredActionRoles.ExpandableRows) ? 1 : 0;
			_grdSecuredActionRolesdeleteColumnIndex = -1;
			int colcount = 0;
			foreach (DataControlField col in grdSecuredActionRoles.Columns)
			{
				ButtonField btn = col as ButtonField;
				if (btn != null)
				{
					if (btn.CommandName == "Delete")
					{
						_grdSecuredActionRolesdeleteColumnIndex = colcount + bias;
						break;
					}
				}
				colcount++;
			}
		}
		return _grdSecuredActionRolesdeleteColumnIndex;
	}
}

protected void grdSecuredActionRoles_RowDataBound(object sender, GridViewRowEventArgs e)
{
	if (e.Row.RowType == DataControlRowType.DataRow)
	{
		if ((grdSecuredActionRolesDeleteColumnIndex >= 0) && (grdSecuredActionRolesDeleteColumnIndex < e.Row.Cells.Count))
		{
			TableCell cell = e.Row.Cells[grdSecuredActionRolesDeleteColumnIndex];
			foreach (Control c in cell.Controls)
			{
				LinkButton btn = c as LinkButton;
				if (btn != null)
				{
					btn.Attributes.Add("onclick", "javascript: return confirm('" + Sage.Platform.WebPortal.PortalUtil.JavaScriptEncode(GetLocalResourceObject("grdSecuredActionRoles.d83a73d0-d34d-45ea-a711-202ab6c4452c.ConfirmationMessage").ToString()) + "');");
					return;
				}
			}
		}
	}
}
   
protected void grdSecuredActionRolespage_changing(object sender, GridViewPageEventArgs e)
{
 grdSecuredActionRoles.PageIndex = e.NewPageIndex;
 grdSecuredActionRoles.DataBind();
}
protected void grdSecuredActionRoles_Sorting(object sender, GridViewSortEventArgs e) { }
protected void grdSecuredActionRoles_RowCommand(object sender, GridViewCommandEventArgs e)
{
    if (e.CommandName == "Page")
        return;
    int rowIndex;
    if (Int32.TryParse(e.CommandArgument.ToString(), out rowIndex))
    {
        dsSecuredActionRoles.SelectedIndex = rowIndex;
		object currentEntity = dsSecuredActionRoles.Current;
        if ((currentEntity is Sage.Platform.ComponentModel.ComponentView) && !((Sage.Platform.ComponentModel.ComponentView)currentEntity).IsVirtualComponent)
            currentEntity = ((Sage.Platform.ComponentModel.ComponentView)currentEntity).Component;
		string id = String.Empty;
        //Check if this is an unpersisted entity and use its InstanceId
        if (Sage.Platform.WebPortal.PortalUtil.ObjectIsNewEntity(currentEntity))
        {
		    if (grdSecuredActionRoles.DataKeys[0].Values.Count > 1) {
                foreach (DictionaryEntry val in grdSecuredActionRoles.DataKeys[rowIndex].Values)
                {
                    if (val.Key.ToString() == "InstanceId")
                    {
                        Guid instanceId = (Guid)val.Value;
                        dsSecuredActionRoles.SetCurrentEntityByInstanceId(instanceId);
                        id = instanceId.ToString();
		                currentEntity = dsSecuredActionRoles.Current;
                        if ((currentEntity is Sage.Platform.ComponentModel.ComponentView) && !((Sage.Platform.ComponentModel.ComponentView)currentEntity).IsVirtualComponent)
                            currentEntity = ((Sage.Platform.ComponentModel.ComponentView)currentEntity).Component;
                    }
                }                 
            }
        }
        else
        {
            foreach (DictionaryEntry val in grdSecuredActionRoles.DataKeys[rowIndex].Values)
            {
                if (val.Key.ToString() != "InstanceId")
                {
                    id = val.Value.ToString();
                }
            }
        }		
		if (e.CommandName.Equals("Delete"))
		{
            Sage.Entity.Interfaces.IRole mainentity = this.BindingSource.Current as Sage.Entity.Interfaces.IRole;
			if (mainentity != null)
			{
			    Sage.Entity.Interfaces.ISecuredActionRole childEntity = null;
			    if((currentEntity != null) && (currentEntity is Sage.Entity.Interfaces.ISecuredActionRole))
			    {
			        childEntity = (Sage.Entity.Interfaces.ISecuredActionRole)currentEntity;    
			    }
			    else if (id != null)
			    {
                    childEntity = Sage.Platform.EntityFactory.GetById<Sage.Entity.Interfaces.ISecuredActionRole>(id);
            }
				if(childEntity != null)
				{
			         mainentity.SecuredActions.Remove(childEntity);
					 mainentity.Save();
					 if((childEntity.PersistentState & Sage.Platform.Orm.Interfaces.PersistentState.New) <= 0)
					 {
					     childEntity.Delete();
					 }
					 dsSecuredActionRoles.SelectedIndex = -1;
			    }
		    }
		}
	}
    grdSecuredActionRoles_refresh();
}
	
	protected void grdSecuredActionRoles_refresh()
	{
		if (PageWorkItem != null) {
			Sage.Platform.WebPortal.Services.IPanelRefreshService refresher = PageWorkItem.Services.Get<Sage.Platform.WebPortal.Services.IPanelRefreshService>();
			if (refresher != null)
			{
				refresher.RefreshAll();
			}
			else
			{
				Response.Redirect(Request.Url.ToString());
			}
		}
	}
	
            protected void grdSecuredActionRoles_RowDeleting(object sender, GridViewDeleteEventArgs e)
	{
		grdSecuredActionRoles.SelectedIndex = -1;
	}
	</script>
 

 <SalesLogix:SmartPartToolsContainer runat="server" ID="RoleActions_LTools" ToolbarLocation="left">
    <div class="slxlabel"><asp:Label runat="server" ID="QFLabel" Text="<%$ resources: QFLabel.Text %>"  />
</div>
  </SalesLogix:SmartPartToolsContainer>
 <SalesLogix:SmartPartToolsContainer runat="server" ID="RoleActions_RTools" ToolbarLocation="right">
   <SalesLogix:LookupControl runat="server" ID="lueAddAction" ButtonToolTip="<%$ resources: lueAddAction.ButtonToolTip %>" LookupEntityName="SecuredAction" LookupEntityTypeName="Sage.Entity.Interfaces.ISecuredAction, Sage.Entity.Interfaces, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" LookupDisplayMode="ButtonOnly" InitializeLookup="true" AutoPostBack="true" LookupImageURL="~/ImageResource.axd?scope=global&type=Global_Images&key=plus_16x16"  >
<LookupProperties>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueAddAction.LookupProperties.Name.PropertyHeader %>" PropertyName="Name" PropertyType="System.String" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueAddAction.LookupProperties.Description.PropertyHeader %>" PropertyName="Description" PropertyType="System.String" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueAddAction.LookupProperties.Parent.PropertyHeader %>" PropertyName="Parent" PropertyType="System.String" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
</LookupProperties>
<LookupPreFilters>
</LookupPreFilters>
</SalesLogix:LookupControl>
                 

  <SalesLogix:PageLink ID="lnkRoleActionsHelp" runat="server" LinkType="HelpFileName" ToolTip="<%$ resources: Portal, Help_ToolTip %>" Target="MCWebHelp" NavigateUrl="Role_Actions_Tab" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Help_16x16"></SalesLogix:PageLink> </SalesLogix:SmartPartToolsContainer>

<script runat="server" type="text/C#">
private Sage.Platform.Security.IRoleSecurityService _roleSecurityService;
/// <summary>
/// Gets or sets the role security service.
/// </summary>
/// <value>The role security service.</value>
[Sage.Platform.Application.ServiceDependency]
public Sage.Platform.Security.IRoleSecurityService RoleSecurityService
{
   set
      {
         _roleSecurityService = Sage.Platform.Application.ApplicationContext.Current.Services.Get<Sage.Platform.Security.IRoleSecurityService>(true);
      }
      get
      {
         return _roleSecurityService;
      }
}

public override Type EntityType
{
	get { return typeof(Sage.Entity.Interfaces.IRole); }
}

 private Sage.Platform.WebPortal.Binding.WebEntityListBindingSource _dsSecuredActionRoles;
public Sage.Platform.WebPortal.Binding.WebEntityListBindingSource dsSecuredActionRoles
{ 
  get 
  {
    if (_dsSecuredActionRoles == null)
    {
             _dsSecuredActionRoles = new Sage.Platform.WebPortal.Binding.WebEntityListBindingSource(typeof(Sage.Entity.Interfaces.ISecuredActionRole), 
	    EntityType              ,"SecuredActions", System.Reflection.MemberTypes.Property);
                   _dsSecuredActionRoles.UseSmartQuery = true;
      	   	}
 	return _dsSecuredActionRoles;
  }
}

void dsSecuredActionRoles_OnCurrentEntitySet(object sender, EventArgs e) 
{
      if (Visible)
    { 
		if(BindingSource.Current != null)
		{
		
      
        dsSecuredActionRoles.SourceObject = BindingSource.Current;
   		}
    }
   if (Visible)
   {   
      RegisterBindingsWithClient(dsSecuredActionRoles);
   }
}

 



 

protected override void OnAddEntityBindings() { 
       dsSecuredActionRoles.Bindings.Add(new Sage.Platform.WebPortal.Binding.WebEntityListBinding("SecuredActions", grdSecuredActionRoles ));
   dsSecuredActionRoles.BindFieldNames = new String[] { "Id","SecuredAction.Name","SecuredAction.Parent","SecuredAction.Description","SecuredAction.ModifyUser","SecuredAction.CreateUser" };
     
     BindingSource.OnCurrentEntitySet += new EventHandler(dsSecuredActionRoles_OnCurrentEntitySet);
     
	       }
	   
protected void lueAddAction_ChangeAction(object sender, EventArgs e) {
    if (lueAddAction.LookupResultValue != null)
    {
        Sage.Entity.Interfaces.IRole parentEntity = BindingSource.Current as Sage.Entity.Interfaces.IRole;
        Sage.Entity.Interfaces.ISecuredAction relatedEntity = lueAddAction.LookupResultValue as Sage.Entity.Interfaces.ISecuredAction;
        Sage.Platform.WebPortal.EntityPage page = (Sage.Platform.WebPortal.EntityPage)Page;
		// check for duplicates
        bool found = false;
        if ((parentEntity != null) && (relatedEntity != null))
        {
				foreach (Sage.Entity.Interfaces.ISecuredActionRole i in parentEntity.SecuredActions)
            {				
                if (i.SecuredAction.Equals(relatedEntity))
				{
				    found = true;
                    if (DialogService != null)
                    {
                        DialogService.ShowMessage(base.GetLocalResourceObject("f144ebcf-9239-4d82-b1a8-eb778a21192f.DuplicateAssociationMessage").ToString(), 90, 360);
						return;
                    }
				}
            }
		        Sage.Entity.Interfaces.ISecuredActionRole relationshipEntity = Sage.Platform.EntityFactory.Create<Sage.Entity.Interfaces.ISecuredActionRole>();
		if (!found)
        {
            relationshipEntity.Role = parentEntity;
            relationshipEntity.SecuredAction = relatedEntity;
            parentEntity.SecuredActions.Add(relationshipEntity);
            dsSecuredActionRoles.SelectedMember = relationshipEntity;
            if (page.ModeId.ToUpper() != "INSERT")
            {
				parentEntity.Save();
            }
		}
        }
    }

}

protected override void OnWireEventHandlers()
{
 base.OnWireEventHandlers();
 lueAddAction.LookupResultValueChanged += new EventHandler(lueAddAction_ChangeAction);


}

protected override void OnFormBound()
{
ClientBindingMgr.RegisterBoundControl(lueAddAction);

if (dsSecuredActionRoles.SourceObject == null) { dsSecuredActionRoles.SourceObject = BindingSource.Current; }
if (dsSecuredActionRoles.SourceObject == null) { RegisterBindingsWithClient(dsSecuredActionRoles); }
dsSecuredActionRoles.Bind();



}



public override Sage.Platform.Application.UI.ISmartPartInfo GetSmartPartInfo(Type smartPartInfoType)
{
	ToolsSmartPartInfo tinfo = new ToolsSmartPartInfo();
    	if (BindingSource != null)
	{
		if (BindingSource.Current != null)
		{
			tinfo.Description = BindingSource.Current.ToString();
			tinfo.Title = BindingSource.Current.ToString();
		}
	}
    	
	foreach (Control c in Controls)
	{
		SmartPartToolsContainer cont = c as SmartPartToolsContainer;
		if (cont != null)
		{
			switch (cont.ToolbarLocation)
			{
				case SmartPartToolsLocation.Right:
					foreach (Control tool in cont.Controls)
					{
											tinfo.RightTools.Add(tool);
										}
					break;
				case SmartPartToolsLocation.Center:
					foreach (Control tool in cont.Controls)
					{
						tinfo.CenterTools.Add(tool);
					}
					break;
				case SmartPartToolsLocation.Left:
					foreach (Control tool in cont.Controls)
					{
						tinfo.LeftTools.Add(tool);
					}
					break;
			}
		}
	}
	
		return tinfo;
}

private Sage.Platform.Controls.IEntityForm _formAdapter;

public Sage.Platform.Controls.IEntityForm FormAdapter
{
	get { return _formAdapter ?? (_formAdapter = new RoleActionsAdapter(this)); }
}

public class RoleActionsAdapter : Sage.Platform.WebPortal.Adapters.EntityFormAdapter, Sage.Form.Interfaces.IRoleActions
{
	public RoleActionsAdapter(Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider smartPart)
		: base(smartPart) {}

	private Sage.Platform.Controls.IDataGridControl _grdSecuredActionRoles;
	public Sage.Platform.Controls.IDataGridControl grdSecuredActionRoles
	{
		get { return FindControl(ref _grdSecuredActionRoles, "grdSecuredActionRoles"); }
	}
	private Sage.Platform.Controls.IDataSourceControl _dsSecuredActionRoles;
	public Sage.Platform.Controls.IDataSourceControl dsSecuredActionRoles
	{
		get { return FindControl(ref _dsSecuredActionRoles, "dsSecuredActionRoles"); }
	}
	private Sage.Platform.Controls.ILabelControl _QFLabel;
	public Sage.Platform.Controls.ILabelControl QFLabel
	{
		get { return FindControl(ref _QFLabel, "QFLabel"); }
	}
	private Sage.Platform.Controls.ILookupControl _lueAddAction;
	public Sage.Platform.Controls.ILookupControl lueAddAction
	{
		get { return FindControl(ref _lueAddAction, "lueAddAction"); }
	}

}

</script>

<script type="text/javascript">
</script>
