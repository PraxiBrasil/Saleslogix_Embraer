<%@ Control Language="C#" ClassName="ContactProcesses" Inherits="Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider" %>
<%@ Register Assembly="Sage.SalesLogix.Client.GroupBuilder" Namespace="Sage.SalesLogix.Client.GroupBuilder" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.PickList" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.DependencyLookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Lookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Timeline" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.HighLevelTypes" Namespace="Sage.SalesLogix.HighLevelTypes" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.Platform.WebPortal" Namespace="Sage.Platform.WebPortal.SmartParts" TagPrefix="SalesLogix" %>
<%//------------------------------------------------------------------------
//This file was generated by a tool.  Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//------------------------------------------------------------------------ %>
  <SalesLogix:SlxGridView runat="server" ID="grdContactProcesses" GridLines="None"
AutoGenerateColumns="false" CellPadding="4" CssClass="datagrid" PagerStyle-CssClass="gridPager"
AlternatingRowStyle-CssClass="rowdk" RowStyle-CssClass="rowlt" SelectedRowStyle-CssClass="rowSelected" ShowEmptyTable="true" EnableViewState="false"
 AllowPaging="true" PageSize="20" OnPageIndexChanging="grdContactProcessespage_changing" EmptyTableRowText="<%$ resources: grdContactProcesses.EmptyTableRowText %>"  ExpandableRows="True" ResizableColumns="True"  AllowSorting="true" OnSorting="grdContactProcesses_Sorting"  ShowSortIcon="true" >
<Columns>
   <asp:BoundField DataField="Name" 
      HeaderText="<%$ resources: grdContactProcesses.9cc11b96-ad95-46f5-8df0-13969b5b2edc.ColumnHeading %>"       SortExpression="Name"    >
      </asp:BoundField>
    <asp:TemplateField   HeaderText="<%$ resources: grdContactProcesses.67474232-4875-487f-8924-a4c093f3c36b.ColumnHeading %>"       SortExpression="TargetName"  >
    <itemtemplate>
      <asp:HyperLink runat="server" 
    Text='<%# Server.HtmlEncode(Eval("TargetName").ToString()) %>' 
          NavigateUrl='<%# string.Format(base.GetLocalResourceObject("grdContactProcesses.67474232-4875-487f-8924-a4c093f3c36b.DestinationFormatString").ToString(), Server.HtmlEncode(Eval("Contact.Id").ToString())) %>'  />
     </itemtemplate></asp:TemplateField>
      <asp:TemplateField   HeaderText="<%$ resources: grdContactProcesses.04bc2aa1-1ec2-4b32-9201-90b2ad38f3a3.ColumnHeading %>"       SortExpression="LastAction"  >
    <itemtemplate>
   <SalesLogix:DateTimePicker runat="server" ID="grdContactProcessescol3" DisplayTime="false"  DisplayMode="AsText" DateTimeValue='<%#  dsGrid3.getPropertyValue(Container.DataItem, "LastAction")  %>'  CssClass=""  />
   </itemtemplate></asp:TemplateField>
    <asp:TemplateField   HeaderText="<%$ resources: grdContactProcesses.2ba5a025-0f8e-446e-879c-e88ca5f7424e.ColumnHeading %>"       SortExpression="NextAction"  >
    <itemtemplate>
   <SalesLogix:DateTimePicker runat="server" ID="grdContactProcessescol4" DisplayTime="false"  DisplayMode="AsText" DateTimeValue='<%#  dsGrid3.getPropertyValue(Container.DataItem, "NextAction")  %>'  CssClass=""  />
   </itemtemplate></asp:TemplateField>
    <asp:TemplateField   HeaderText="<%$ resources: grdContactProcesses.c0952b9c-a78a-458c-a77b-6501d3050c12.ColumnHeading %>"       SortExpression="Suspended"  >
    <itemtemplate>
   <%# TranslateSuspended(Eval("Suspended") ) %>
   </itemtemplate></asp:TemplateField>
    <asp:BoundField DataField="ChangeStatus" 
      HeaderText="<%$ resources: grdContactProcesses.995b0d30-0698-4cbd-820b-4b99906351a5.ColumnHeading %>"          >
      </asp:BoundField>
 </Columns>
    <PagerSettings Mode="NumericFirstLast" FirstPageImageUrl="ImageResource.axd?scope=global&type=Global_Images&key=Start_16x16" LastPageImageUrl="ImageResource.axd?scope=global&type=Global_Images&key=End_16x16" />
</SalesLogix:SlxGridView>

<script runat="server" type="text/C#">


protected void grdContactProcessespage_changing(object sender, GridViewPageEventArgs e)
{
 grdContactProcesses.PageIndex = e.NewPageIndex;
 grdContactProcesses.DataBind();
}
protected void grdContactProcesses_Sorting(object sender, GridViewSortEventArgs e) { }
protected string TranslateSuspended(object suspended)
{
    if (suspended != null)
    {
        return (suspended.ToString() == "1") ? GetLocalResourceObject("Yes_res").ToString() : GetLocalResourceObject("No_res").ToString();
    }
    else
    {
        return GetLocalResourceObject("No_res").ToString();
    }
}
</script>
 

 <SalesLogix:SmartPartToolsContainer runat="server" ID="ContactProcesses_RTools" ToolbarLocation="right">
    <asp:ImageButton runat="server" ID="cmdScheduleProcess"
 AlternateText="<%$ resources: cmdScheduleProcess.Caption %>"  ToolTip="<%$ resources: cmdScheduleProcess.ToolTip %>" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=plus_16x16"  />
 
  <SalesLogix:PageLink ID="lnkContactProcessesHelp" runat="server" LinkType="HelpFileName" ToolTip="<%$ resources: Portal, Help_ToolTip %>" Target="MCWebHelp" NavigateUrl="contactprocessestab.htm" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Help_16x16"></SalesLogix:PageLink> </SalesLogix:SmartPartToolsContainer>

<script runat="server" type="text/C#">
private Sage.Platform.Security.IRoleSecurityService _roleSecurityService;
/// <summary>
/// Gets or sets the role security service.
/// </summary>
/// <value>The role security service.</value>
[Sage.Platform.Application.ServiceDependency]
public Sage.Platform.Security.IRoleSecurityService RoleSecurityService
{
   set
      {
         _roleSecurityService = Sage.Platform.Application.ApplicationContext.Current.Services.Get<Sage.Platform.Security.IRoleSecurityService>(true);
      }
      get
      {
         return _roleSecurityService;
      }
}

public override Type EntityType
{
	get { return typeof(Sage.Entity.Interfaces.IContact); }
}

 private Sage.Platform.WebPortal.Binding.WebEntityListBindingSource _dsGrid3;
public Sage.Platform.WebPortal.Binding.WebEntityListBindingSource dsGrid3
{ 
  get 
  {
    if (_dsGrid3 == null)
    {
             _dsGrid3 = new Sage.Platform.WebPortal.Binding.WebEntityListBindingSource(typeof(Sage.Entity.Interfaces.IProcess), 
	    EntityType              ,"Processes", System.Reflection.MemberTypes.Property);
            	   	}
 	return _dsGrid3;
  }
}

void dsGrid3_OnCurrentEntitySet(object sender, EventArgs e) 
{
      if (Visible)
    { 
		if(BindingSource.Current != null)
		{
		
      
        dsGrid3.SourceObject = BindingSource.Current;
   		}
    }
   if (Visible)
   {   
      RegisterBindingsWithClient(dsGrid3);
   }
}

 



 

protected override void OnAddEntityBindings() { 
       dsGrid3.Bindings.Add(new Sage.Platform.WebPortal.Binding.WebEntityListBinding("Processes", grdContactProcesses ));
   dsGrid3.BindFieldNames = new String[] { "Id","Name","TargetName","Contact.Id","LastAction","NextAction","Suspended","ChangeStatus" };
                
     BindingSource.OnCurrentEntitySet += new EventHandler(dsGrid3_OnCurrentEntitySet);
     
         
      
      
      
    }
	   
protected void cmdScheduleProcess_ClickAction(object sender, EventArgs e) {
if (DialogService != null) {
	// DialogActionItem
	DialogService.SetSpecs(250, 350, "ScheduleProcess", string.Empty );
    DialogService.ShowDialog();
}
}

protected override void OnWireEventHandlers()
{
 base.OnWireEventHandlers();
 if (_roleSecurityService != null)
{
if (_roleSecurityService.HasAccess("ENTITIES/CONTACT/EDIT"))
{
cmdScheduleProcess.Click += new ImageClickEventHandler(cmdScheduleProcess_ClickAction);
}
}


}

protected override void OnFormBound()
{
if (dsGrid3.SourceObject == null) { dsGrid3.SourceObject = BindingSource.Current; }
if (dsGrid3.SourceObject == null) { RegisterBindingsWithClient(dsGrid3); }
dsGrid3.Bind();

if (!_roleSecurityService.HasAccess("ENTITIES/CONTACT/EDIT"))
{
cmdScheduleProcess.Visible = false;
}


}



public override Sage.Platform.Application.UI.ISmartPartInfo GetSmartPartInfo(Type smartPartInfoType)
{
	ToolsSmartPartInfo tinfo = new ToolsSmartPartInfo();
    	
	foreach (Control c in Controls)
	{
		SmartPartToolsContainer cont = c as SmartPartToolsContainer;
		if (cont != null)
		{
			switch (cont.ToolbarLocation)
			{
				case SmartPartToolsLocation.Right:
					foreach (Control tool in cont.Controls)
					{
											tinfo.RightTools.Add(tool);
										}
					break;
				case SmartPartToolsLocation.Center:
					foreach (Control tool in cont.Controls)
					{
						tinfo.CenterTools.Add(tool);
					}
					break;
				case SmartPartToolsLocation.Left:
					foreach (Control tool in cont.Controls)
					{
						tinfo.LeftTools.Add(tool);
					}
					break;
			}
		}
	}
	
		return tinfo;
}

private Sage.Platform.Controls.IEntityForm _formAdapter;

public Sage.Platform.Controls.IEntityForm FormAdapter
{
	get { return _formAdapter ?? (_formAdapter = new ContactProcessesAdapter(this)); }
}

public class ContactProcessesAdapter : Sage.Platform.WebPortal.Adapters.EntityFormAdapter, Sage.Form.Interfaces.IContactProcesses
{
	public ContactProcessesAdapter(Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider smartPart)
		: base(smartPart) {}

	private Sage.Platform.Controls.IDataGridControl _grdContactProcesses;
	public Sage.Platform.Controls.IDataGridControl grdContactProcesses
	{
		get { return FindControl(ref _grdContactProcesses, "grdContactProcesses"); }
	}
	private Sage.Platform.Controls.IDataSourceControl _dsGrid3;
	public Sage.Platform.Controls.IDataSourceControl dsGrid3
	{
		get { return FindControl(ref _dsGrid3, "dsGrid3"); }
	}
	private Sage.Platform.Controls.IButtonControl _cmdScheduleProcess;
	public Sage.Platform.Controls.IButtonControl cmdScheduleProcess
	{
		get { return FindControl(ref _cmdScheduleProcess, "cmdScheduleProcess"); }
	}

}

</script>

<script type="text/javascript">
</script>
