<%@ Control Language="C#" ClassName="ContactOpportunities" Inherits="Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider" %>
<%@ Register Assembly="Sage.SalesLogix.Client.GroupBuilder" Namespace="Sage.SalesLogix.Client.GroupBuilder" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.PickList" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.DependencyLookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Lookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Timeline" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.HighLevelTypes" Namespace="Sage.SalesLogix.HighLevelTypes" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.Platform.WebPortal" Namespace="Sage.Platform.WebPortal.SmartParts" TagPrefix="SalesLogix" %>
<%//------------------------------------------------------------------------
//This file was generated by a tool.  Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//------------------------------------------------------------------------ %>
  <SalesLogix:SlxGridView runat="server" ID="grdContactOpportunities" GridLines="None"
AutoGenerateColumns="false" CellPadding="4" CssClass="datagrid" PagerStyle-CssClass="gridPager"
AlternatingRowStyle-CssClass="rowdk" RowStyle-CssClass="rowlt" SelectedRowStyle-CssClass="rowSelected" ShowEmptyTable="true" EnableViewState="false"
 AllowPaging="true" PageSize="20" OnPageIndexChanging="grdContactOpportunitiespage_changing" EmptyTableRowText="<%$ resources: grdContactOpportunities.EmptyTableRowText %>"  ExpandableRows="True" ResizableColumns="True"  OnRowCommand="grdContactOpportunities_RowCommand" 
 DataKeyNames="InstanceId,Id" 
 AllowSorting="true" OnSorting="grdContactOpportunities_Sorting"  OnRowDeleting="grdContactOpportunities_RowDeleting" OnRowDataBound="grdContactOpportunities_RowDataBound"  ShowSortIcon="true" >
<Columns>
   <asp:TemplateField   HeaderText="<%$ resources: grdContactOpportunities.72add447-1cf0-49ae-afb7-7033adb0ff77.ColumnHeading %>"       SortExpression="Opportunity.Description"  >
    <itemtemplate>
      <asp:HyperLink runat="server" 
    Text='<%# Server.HtmlEncode(Eval("Opportunity.Description").ToString()) %>' 
          NavigateUrl='<%# string.Format(base.GetLocalResourceObject("grdContactOpportunities.72add447-1cf0-49ae-afb7-7033adb0ff77.DestinationFormatString").ToString(), Server.HtmlEncode(Eval("Opportunity.Id").ToString())) %>'  />
     </itemtemplate></asp:TemplateField>
      <asp:BoundField DataField="Opportunity.Status" 
      HeaderText="<%$ resources: grdContactOpportunities.cacff750-ebea-4372-bc04-70c70b9ceca3.ColumnHeading %>"       SortExpression="Opportunity.Status"    >
      </asp:BoundField>
    <asp:BoundField DataField="Opportunity.EstimatedClose" 
  DataFormatString="<%$ resources: grdContactOpportunities.cc474762-daca-4aae-b580-d771b7fa660e.FormatString %>" HtmlEncode="false"    HeaderText="<%$ resources: grdContactOpportunities.cc474762-daca-4aae-b580-d771b7fa660e.ColumnHeading %>"       SortExpression="Opportunity.EstimatedClose"    >
      </asp:BoundField>
    <asp:TemplateField   HeaderText="<%$ resources: grdContactOpportunities.13376adf-a30d-44a5-bbd8-a435d1d5757f.ColumnHeading %>"   itemstyle-horizontalalign="Right"     SortExpression="Opportunity.SalesPotential"  >
    <itemtemplate>
 <SalesLogix:Currency runat="server" ID="grdContactOpportunitiescol4" DisplayMode="AsText"  ExchangeRateType="BaseRate"   Text='<%#  dsGrid2.getPropertyValue(Container.DataItem, "Opportunity.SalesPotential")  %>' CssClass="" />
   </itemtemplate></asp:TemplateField>
    <asp:BoundField DataField="Opportunity.CloseProbability" 
  DataFormatString="<%$ resources: grdContactOpportunities.bef53d82-587e-4a31-b55a-7fa711abd801.FormatString %>" HtmlEncode="false"    HeaderText="<%$ resources: grdContactOpportunities.bef53d82-587e-4a31-b55a-7fa711abd801.ColumnHeading %>"   itemstyle-horizontalalign="Right"     SortExpression="Opportunity.CloseProbability"    >
      </asp:BoundField>
    <asp:BoundField DataField="Opportunity.DaysOpen" 
      HeaderText="<%$ resources: grdContactOpportunities.1bbb2cb7-15c9-4ff9-90a8-8388110d3c7f.ColumnHeading %>"    itemstyle-horizontalalign="Center"       >
      </asp:BoundField>
   <asp:ButtonField CommandName="Delete" 
  Text="<%$ resources: grdContactOpportunities.7b7f3a6f-82bb-415e-8ff7-6881d21c0eb1.Text %>"                >
  	    </asp:ButtonField>
   </Columns>
    <PagerSettings Mode="NumericFirstLast" FirstPageImageUrl="ImageResource.axd?scope=global&type=Global_Images&key=Start_16x16" LastPageImageUrl="ImageResource.axd?scope=global&type=Global_Images&key=End_16x16" />
</SalesLogix:SlxGridView>

<script runat="server" type="text/C#">

                     private int _grdContactOpportunitiesdeleteColumnIndex = -2;
protected int grdContactOpportunitiesDeleteColumnIndex
{
	get
	{
		if (_grdContactOpportunitiesdeleteColumnIndex == -2)
		{
			int bias = (grdContactOpportunities.ExpandableRows) ? 1 : 0;
			_grdContactOpportunitiesdeleteColumnIndex = -1;
			int colcount = 0;
			foreach (DataControlField col in grdContactOpportunities.Columns)
			{
				ButtonField btn = col as ButtonField;
				if (btn != null)
				{
					if (btn.CommandName == "Delete")
					{
						_grdContactOpportunitiesdeleteColumnIndex = colcount + bias;
						break;
					}
				}
				colcount++;
			}
		}
		return _grdContactOpportunitiesdeleteColumnIndex;
	}
}

protected void grdContactOpportunities_RowDataBound(object sender, GridViewRowEventArgs e)
{
}
   
protected void grdContactOpportunitiespage_changing(object sender, GridViewPageEventArgs e)
{
 grdContactOpportunities.PageIndex = e.NewPageIndex;
 grdContactOpportunities.DataBind();
}
protected void grdContactOpportunities_Sorting(object sender, GridViewSortEventArgs e) { }
protected void grdContactOpportunities_RowCommand(object sender, GridViewCommandEventArgs e)
{
    if (e.CommandName == "Page")
        return;
    int rowIndex;
    if (Int32.TryParse(e.CommandArgument.ToString(), out rowIndex))
    {
        dsGrid2.SelectedIndex = rowIndex;
		object currentEntity = dsGrid2.Current;
        if ((currentEntity is Sage.Platform.ComponentModel.ComponentView) && !((Sage.Platform.ComponentModel.ComponentView)currentEntity).IsVirtualComponent)
            currentEntity = ((Sage.Platform.ComponentModel.ComponentView)currentEntity).Component;
		string id = String.Empty;
        //Check if this is an unpersisted entity and use its InstanceId
        if (Sage.Platform.WebPortal.PortalUtil.ObjectIsNewEntity(currentEntity))
        {
		    if (grdContactOpportunities.DataKeys[0].Values.Count > 1) {
                foreach (DictionaryEntry val in grdContactOpportunities.DataKeys[rowIndex].Values)
                {
                    if (val.Key.ToString() == "InstanceId")
                    {
                        Guid instanceId = (Guid)val.Value;
                        dsGrid2.SetCurrentEntityByInstanceId(instanceId);
                        id = instanceId.ToString();
		                currentEntity = dsGrid2.Current;
                        if ((currentEntity is Sage.Platform.ComponentModel.ComponentView) && !((Sage.Platform.ComponentModel.ComponentView)currentEntity).IsVirtualComponent)
                            currentEntity = ((Sage.Platform.ComponentModel.ComponentView)currentEntity).Component;
                    }
                }                 
            }
        }
        else
        {
            foreach (DictionaryEntry val in grdContactOpportunities.DataKeys[rowIndex].Values)
            {
                if (val.Key.ToString() != "InstanceId")
                {
                    id = val.Value.ToString();
                }
            }
        }		
		if (e.CommandName.Equals("Delete"))
		{
            Sage.Entity.Interfaces.IContact mainentity = this.BindingSource.Current as Sage.Entity.Interfaces.IContact;
			if (mainentity != null)
			{
			    Sage.Entity.Interfaces.IOpportunityContact childEntity = null;
			    if((currentEntity != null) && (currentEntity is Sage.Entity.Interfaces.IOpportunityContact))
			    {
			        childEntity = (Sage.Entity.Interfaces.IOpportunityContact)currentEntity;    
			    }
			    else if (id != null)
			    {
                    childEntity = Sage.Platform.EntityFactory.GetById<Sage.Entity.Interfaces.IOpportunityContact>(id);
            }
				if(childEntity != null)
				{
			         mainentity.Opportunities.Remove(childEntity);
					 mainentity.Save();
					 if((childEntity.PersistentState & Sage.Platform.Orm.Interfaces.PersistentState.New) <= 0)
					 {
					     childEntity.Delete();
					 }
					 dsGrid2.SelectedIndex = -1;
			    }
		    }
		}
	}
    grdContactOpportunities_refresh();
}
	
	protected void grdContactOpportunities_refresh()
	{
		if (PageWorkItem != null) {
			Sage.Platform.WebPortal.Services.IPanelRefreshService refresher = PageWorkItem.Services.Get<Sage.Platform.WebPortal.Services.IPanelRefreshService>();
			if (refresher != null)
			{
				refresher.RefreshAll();
			}
			else
			{
				Response.Redirect(Request.Url.ToString());
			}
		}
	}
	
            protected void grdContactOpportunities_RowDeleting(object sender, GridViewDeleteEventArgs e)
	{
		grdContactOpportunities.SelectedIndex = -1;
	}
	</script>
 

 <SalesLogix:SmartPartToolsContainer runat="server" ID="ContactOpportunities_RTools" ToolbarLocation="right">
   <SalesLogix:LookupControl runat="server" ID="lueAssociateOpportunity"  ToolTip="<%$ resources: lueAssociateOpportunity.ToolTip %>" LookupEntityName="Opportunity" LookupEntityTypeName="Sage.Entity.Interfaces.IOpportunity, Sage.Entity.Interfaces, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" LookupDisplayMode="ButtonOnly" AutoPostBack="true" LookupImageURL="~/ImageResource.axd?scope=global&type=Global_Images&key=plus_16x16"  >
<LookupProperties>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueAssociateOpportunity.LookupProperties.AccountManager.UserInfo.UserName.PropertyHeader %>" PropertyName="AccountManager.UserInfo.UserName" PropertyType="System.String" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueAssociateOpportunity.LookupProperties.Description.PropertyHeader %>" PropertyName="Description" PropertyType="System.String" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueAssociateOpportunity.LookupProperties.Account.AccountName.PropertyHeader %>" PropertyName="Account.AccountName" PropertyType="System.String" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueAssociateOpportunity.LookupProperties.Stage.PropertyHeader %>" PropertyName="Stage" PropertyType="System.String" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueAssociateOpportunity.LookupProperties.Status.PropertyHeader %>" PropertyName="Status" PropertyType="System.String" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueAssociateOpportunity.LookupProperties.Owner.OwnerDescription.PropertyHeader %>" PropertyName="Owner.OwnerDescription" PropertyType="System.String" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
</LookupProperties>
<LookupPreFilters>
</LookupPreFilters>
</SalesLogix:LookupControl>
                 

  <SalesLogix:PageLink ID="lnkContactOpportunitiesHelp" runat="server" LinkType="HelpFileName" ToolTip="<%$ resources: Portal, Help_ToolTip %>" Target="MCWebHelp" NavigateUrl="contactopportunitiestab.htm" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Help_16x16"></SalesLogix:PageLink> </SalesLogix:SmartPartToolsContainer>

<script runat="server" type="text/C#">
private Sage.Platform.Security.IRoleSecurityService _roleSecurityService;
/// <summary>
/// Gets or sets the role security service.
/// </summary>
/// <value>The role security service.</value>
[Sage.Platform.Application.ServiceDependency]
public Sage.Platform.Security.IRoleSecurityService RoleSecurityService
{
   set
      {
         _roleSecurityService = Sage.Platform.Application.ApplicationContext.Current.Services.Get<Sage.Platform.Security.IRoleSecurityService>(true);
      }
      get
      {
         return _roleSecurityService;
      }
}

public override Type EntityType
{
	get { return typeof(Sage.Entity.Interfaces.IContact); }
}

 private Sage.Platform.WebPortal.Binding.WebEntityListBindingSource _dsGrid2;
public Sage.Platform.WebPortal.Binding.WebEntityListBindingSource dsGrid2
{ 
  get 
  {
    if (_dsGrid2 == null)
    {
             _dsGrid2 = new Sage.Platform.WebPortal.Binding.WebEntityListBindingSource(typeof(Sage.Entity.Interfaces.IOpportunityContact), 
	    EntityType              ,"Opportunities", System.Reflection.MemberTypes.Property);
            	   	}
 	return _dsGrid2;
  }
}

void dsGrid2_OnCurrentEntitySet(object sender, EventArgs e) 
{
      if (Visible)
    { 
		if(BindingSource.Current != null)
		{
		
      
        dsGrid2.SourceObject = BindingSource.Current;
   		}
    }
   if (Visible)
   {   
      RegisterBindingsWithClient(dsGrid2);
   }
}

 



 

protected override void OnAddEntityBindings() { 
       dsGrid2.Bindings.Add(new Sage.Platform.WebPortal.Binding.WebEntityListBinding("Opportunities", grdContactOpportunities ));
   dsGrid2.BindFieldNames = new String[] { "Id","Opportunity.Description","Opportunity.Id","Opportunity.Status","Opportunity.EstimatedClose","Opportunity.SalesPotential","Opportunity.CloseProbability","Opportunity.DaysOpen" };
                
     BindingSource.OnCurrentEntitySet += new EventHandler(dsGrid2_OnCurrentEntitySet);
     
    }
	   
protected void lueAssociateOpportunity_ChangeAction(object sender, EventArgs e) {
    if (lueAssociateOpportunity.LookupResultValue != null)
    {
        Sage.Entity.Interfaces.IContact parentEntity = BindingSource.Current as Sage.Entity.Interfaces.IContact;
        Sage.Entity.Interfaces.IOpportunity relatedEntity = lueAssociateOpportunity.LookupResultValue as Sage.Entity.Interfaces.IOpportunity;
        Sage.Platform.WebPortal.EntityPage page = (Sage.Platform.WebPortal.EntityPage)Page;
		// check for duplicates
        bool found = false;
        if ((parentEntity != null) && (relatedEntity != null))
        {
		        Sage.Entity.Interfaces.IOpportunityContact relationshipEntity = Sage.Platform.EntityFactory.Create<Sage.Entity.Interfaces.IOpportunityContact>();
		if (!found)
        {
            relationshipEntity.Contact = parentEntity;
            relationshipEntity.Opportunity = relatedEntity;
            parentEntity.Opportunities.Add(relationshipEntity);
            dsGrid2.SelectedMember = relationshipEntity;
            if (page.ModeId.ToUpper() != "INSERT")
            {
				parentEntity.Save();
            }
		}
        }
    }

}

protected override void OnWireEventHandlers()
{
 base.OnWireEventHandlers();
 lueAssociateOpportunity.LookupResultValueChanged += new EventHandler(lueAssociateOpportunity_ChangeAction);


}

protected override void OnFormBound()
{
ClientBindingMgr.RegisterBoundControl(lueAssociateOpportunity);

if (dsGrid2.SourceObject == null) { dsGrid2.SourceObject = BindingSource.Current; }
if (dsGrid2.SourceObject == null) { RegisterBindingsWithClient(dsGrid2); }
dsGrid2.Bind();



}



public override Sage.Platform.Application.UI.ISmartPartInfo GetSmartPartInfo(Type smartPartInfoType)
{
	ToolsSmartPartInfo tinfo = new ToolsSmartPartInfo();
    	
	foreach (Control c in Controls)
	{
		SmartPartToolsContainer cont = c as SmartPartToolsContainer;
		if (cont != null)
		{
			switch (cont.ToolbarLocation)
			{
				case SmartPartToolsLocation.Right:
					foreach (Control tool in cont.Controls)
					{
											tinfo.RightTools.Add(tool);
										}
					break;
				case SmartPartToolsLocation.Center:
					foreach (Control tool in cont.Controls)
					{
						tinfo.CenterTools.Add(tool);
					}
					break;
				case SmartPartToolsLocation.Left:
					foreach (Control tool in cont.Controls)
					{
						tinfo.LeftTools.Add(tool);
					}
					break;
			}
		}
	}
	
		return tinfo;
}

private Sage.Platform.Controls.IEntityForm _formAdapter;

public Sage.Platform.Controls.IEntityForm FormAdapter
{
	get { return _formAdapter ?? (_formAdapter = new ContactOpportunitiesAdapter(this)); }
}

public class ContactOpportunitiesAdapter : Sage.Platform.WebPortal.Adapters.EntityFormAdapter, Sage.Form.Interfaces.IContactOpportunities
{
	public ContactOpportunitiesAdapter(Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider smartPart)
		: base(smartPart) {}

	private Sage.Platform.Controls.IDataGridControl _grdContactOpportunities;
	public Sage.Platform.Controls.IDataGridControl grdContactOpportunities
	{
		get { return FindControl(ref _grdContactOpportunities, "grdContactOpportunities"); }
	}
	private Sage.Platform.Controls.IDataSourceControl _dsGrid2;
	public Sage.Platform.Controls.IDataSourceControl dsGrid2
	{
		get { return FindControl(ref _dsGrid2, "dsGrid2"); }
	}
	private Sage.Platform.Controls.ILookupControl _lueAssociateOpportunity;
	public Sage.Platform.Controls.ILookupControl lueAssociateOpportunity
	{
		get { return FindControl(ref _lueAssociateOpportunity, "lueAssociateOpportunity"); }
	}

}

</script>

<script type="text/javascript">
</script>
