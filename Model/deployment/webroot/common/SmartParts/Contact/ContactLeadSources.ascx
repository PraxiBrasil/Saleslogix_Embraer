<%@ Control Language="C#" ClassName="ContactLeadSources" Inherits="Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider" %>
<%@ Register Assembly="Sage.SalesLogix.Client.GroupBuilder" Namespace="Sage.SalesLogix.Client.GroupBuilder" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.PickList" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.DependencyLookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Lookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Timeline" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.HighLevelTypes" Namespace="Sage.SalesLogix.HighLevelTypes" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.Platform.WebPortal" Namespace="Sage.Platform.WebPortal.SmartParts" TagPrefix="SalesLogix" %>
<%//------------------------------------------------------------------------
//This file was generated by a tool.  Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//------------------------------------------------------------------------ %>
  <SalesLogix:SlxGridView runat="server" ID="grdContactLeadSources" GridLines="None"
AutoGenerateColumns="false" CellPadding="4" CssClass="datagrid" PagerStyle-CssClass="gridPager"
AlternatingRowStyle-CssClass="rowdk" RowStyle-CssClass="rowlt" SelectedRowStyle-CssClass="rowSelected" ShowEmptyTable="true" EnableViewState="false"
 AllowPaging="true" PageSize="10" OnPageIndexChanging="grdContactLeadSourcespage_changing"  ExpandableRows="True" ResizableColumns="True"  OnRowCommand="grdContactLeadSources_RowCommand" 
 DataKeyNames="InstanceId,ContactId,LeadsourceId" 
 AllowSorting="true" OnSorting="grdContactLeadSources_Sorting"  OnRowEditing="grdContactLeadSources_RowEditing"  OnRowDeleting="grdContactLeadSources_RowDeleting" OnRowDataBound="grdContactLeadSources_RowDataBound"  ShowSortIcon="true" >
<Columns>
 <asp:ButtonField CommandName="Edit" 
  Text="<%$ resources: grdContactLeadSources.8b9db033-7916-4008-a933-5409a3b7cb7c.Text %>"               >
  	    </asp:ButtonField>
      
     <asp:ButtonField CommandName="Delete" 
  Text="<%$ resources: grdContactLeadSources.f9e99969-3508-488a-a697-24d324935917.Text %>"                >
  	    </asp:ButtonField>
      
      <asp:BoundField DataField="LeadDate" 
      HeaderText="<%$ resources: grdContactLeadSources.c0fa3201-2673-4e1c-9eb1-98e8510bfa6a.ColumnHeading %>"       SortExpression="LeadDate"    >
      </asp:BoundField>
    <asp:BoundField DataField="LeadSource.Description" 
      HeaderText="<%$ resources: grdContactLeadSources.34fabbfc-ca60-4307-be89-971e86593662.ColumnHeading %>"       SortExpression="LeadSource.Description"    >
      </asp:BoundField>
    <asp:BoundField DataField="LeadSource.AbbrevDescription" 
      HeaderText="<%$ resources: grdContactLeadSources.50d758af-739c-4d69-a1fa-561917908e2c.ColumnHeading %>"       SortExpression="LeadSource.AbbrevDescription"    >
      </asp:BoundField>
    <asp:BoundField DataField="LeadSource.SourceDate" 
      HeaderText="<%$ resources: grdContactLeadSources.2bf71c99-75ba-45bb-aa6a-7c552b8291cf.ColumnHeading %>"       SortExpression="LeadSource.SourceDate"    >
      </asp:BoundField>
 </Columns>
    <PagerSettings Mode="NumericFirstLast" FirstPageImageUrl="ImageResource.axd?scope=global&type=Global_Images&key=Start_16x16" LastPageImageUrl="ImageResource.axd?scope=global&type=Global_Images&key=End_16x16" />
</SalesLogix:SlxGridView>

<script runat="server" type="text/C#">

      private int _grdContactLeadSourcesdeleteColumnIndex = -2;
protected int grdContactLeadSourcesDeleteColumnIndex
{
	get
	{
		if (_grdContactLeadSourcesdeleteColumnIndex == -2)
		{
			int bias = (grdContactLeadSources.ExpandableRows) ? 1 : 0;
			_grdContactLeadSourcesdeleteColumnIndex = -1;
			int colcount = 0;
			foreach (DataControlField col in grdContactLeadSources.Columns)
			{
				ButtonField btn = col as ButtonField;
				if (btn != null)
				{
					if (btn.CommandName == "Delete")
					{
						_grdContactLeadSourcesdeleteColumnIndex = colcount + bias;
						break;
					}
				}
				colcount++;
			}
		}
		return _grdContactLeadSourcesdeleteColumnIndex;
	}
}

protected void grdContactLeadSources_RowDataBound(object sender, GridViewRowEventArgs e)
{
	if (e.Row.RowType == DataControlRowType.DataRow)
	{
		if ((grdContactLeadSourcesDeleteColumnIndex >= 0) && (grdContactLeadSourcesDeleteColumnIndex < e.Row.Cells.Count))
		{
			TableCell cell = e.Row.Cells[grdContactLeadSourcesDeleteColumnIndex];
			foreach (Control c in cell.Controls)
			{
				LinkButton btn = c as LinkButton;
				if (btn != null)
				{
					btn.Attributes.Add("onclick", "javascript: return confirm('" + Sage.Platform.WebPortal.PortalUtil.JavaScriptEncode(GetLocalResourceObject("grdContactLeadSources.f9e99969-3508-488a-a697-24d324935917.ConfirmationMessage").ToString()) + "');");
					return;
				}
			}
		}
	}
}
               
protected void grdContactLeadSourcespage_changing(object sender, GridViewPageEventArgs e)
{
 grdContactLeadSources.PageIndex = e.NewPageIndex;
 grdContactLeadSources.DataBind();
}
protected void grdContactLeadSources_Sorting(object sender, GridViewSortEventArgs e) { }
protected void grdContactLeadSources_RowCommand(object sender, GridViewCommandEventArgs e)
{
    if (e.CommandName == "Page")
        return;
    int rowIndex;
    if (Int32.TryParse(e.CommandArgument.ToString(), out rowIndex))
    {
        dsGrid0.SelectedIndex = rowIndex;
		object currentEntity = dsGrid0.Current;
        if ((currentEntity is Sage.Platform.ComponentModel.ComponentView) && !((Sage.Platform.ComponentModel.ComponentView)currentEntity).IsVirtualComponent)
            currentEntity = ((Sage.Platform.ComponentModel.ComponentView)currentEntity).Component;
		string id = String.Empty;
        //Check if this is an unpersisted entity and use its InstanceId
        if (Sage.Platform.WebPortal.PortalUtil.ObjectIsNewEntity(currentEntity))
        {
		    if (grdContactLeadSources.DataKeys[0].Values.Count > 1) {
                foreach (DictionaryEntry val in grdContactLeadSources.DataKeys[rowIndex].Values)
                {
                    if (val.Key.ToString() == "InstanceId")
                    {
                        Guid instanceId = (Guid)val.Value;
                        dsGrid0.SetCurrentEntityByInstanceId(instanceId);
                        id = instanceId.ToString();
		                currentEntity = dsGrid0.Current;
                        if ((currentEntity is Sage.Platform.ComponentModel.ComponentView) && !((Sage.Platform.ComponentModel.ComponentView)currentEntity).IsVirtualComponent)
                            currentEntity = ((Sage.Platform.ComponentModel.ComponentView)currentEntity).Component;
                    }
                }                 
            }
        }
        else
        {
            foreach (DictionaryEntry val in grdContactLeadSources.DataKeys[rowIndex].Values)
            {
                if (val.Key.ToString() != "InstanceId")
                    if (string.IsNullOrEmpty(id))
                        id = val.Value.ToString();
                    else
                        id = string.Concat(id, ",", val.Value.ToString());
            }
        }		
        if (e.CommandName.Equals("Edit"))
        {
            if (DialogService != null)
            {
				// QFDataGrid
							DialogService.SetSpecs(400, 600, "AddEditContactLeadSource", string.Empty );
			                DialogService.EntityType = typeof(Sage.Entity.Interfaces.IContactLeadSource );
                DialogService.CompositeKeyNames = "ContactId,LeadsourceId"; 
                DialogService.EntityID = id;
                DialogService.ShowDialog();
            }
        }
		if (e.CommandName.Equals("Delete"))
		{
            Sage.Entity.Interfaces.IContact mainentity = this.BindingSource.Current as Sage.Entity.Interfaces.IContact;
			if (mainentity != null)
			{
			    Sage.Entity.Interfaces.IContactLeadSource childEntity = null;
			    if((currentEntity != null) && (currentEntity is Sage.Entity.Interfaces.IContactLeadSource))
			    {
			        childEntity = (Sage.Entity.Interfaces.IContactLeadSource)currentEntity;    
			    }
			    else if (id != null)
			    {
                    childEntity = (Sage.Entity.Interfaces.IContactLeadSource)Sage.Platform.EntityFactory.GetByCompositeId(typeof(Sage.Entity.Interfaces.IContactLeadSource), "ContactId,LeadsourceId".Split(','), id.Split(','));
            }
				if(childEntity != null)
				{
			         mainentity.LeadSources.Remove(childEntity);
					 mainentity.Save();
					 if((childEntity.PersistentState & Sage.Platform.Orm.Interfaces.PersistentState.New) <= 0)
					 {
					     childEntity.Delete();
					 }
					 dsGrid0.SelectedIndex = -1;
			    }
		    }
		}
	}
    grdContactLeadSources_refresh();
}
	
	protected void grdContactLeadSources_refresh()
	{
		if (PageWorkItem != null) {
			Sage.Platform.WebPortal.Services.IPanelRefreshService refresher = PageWorkItem.Services.Get<Sage.Platform.WebPortal.Services.IPanelRefreshService>();
			if (refresher != null)
			{
				refresher.RefreshAll();
			}
			else
			{
				Response.Redirect(Request.Url.ToString());
			}
		}
	}
	
    	protected void grdContactLeadSources_RowEditing(object sender, GridViewEditEventArgs e)
	{
		grdContactLeadSources.SelectedIndex = e.NewEditIndex;
	}
            protected void grdContactLeadSources_RowDeleting(object sender, GridViewDeleteEventArgs e)
	{
		grdContactLeadSources.SelectedIndex = -1;
	}
	</script>
 

 <SalesLogix:SmartPartToolsContainer runat="server" ID="ContactLeadSources_RTools" ToolbarLocation="right">
    <asp:ImageButton runat="server" ID="cmdAddContactLeadSource"
 AlternateText="<%$ resources: cmdAddContactLeadSource.Caption %>"  ToolTip="<%$ resources: cmdAddContactLeadSource.ToolTip %>" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=plus_16X16"  />
 
  <SalesLogix:PageLink ID="lnkContactLeadSourcesHelp" runat="server" LinkType="HelpFileName" ToolTip="<%$ resources: Portal, Help_ToolTip %>" Target="MCWebHelp" NavigateUrl="contactleadsourcestab.htm" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Help_16x16"></SalesLogix:PageLink> </SalesLogix:SmartPartToolsContainer>

<script runat="server" type="text/C#">
private Sage.Platform.Security.IRoleSecurityService _roleSecurityService;
/// <summary>
/// Gets or sets the role security service.
/// </summary>
/// <value>The role security service.</value>
[Sage.Platform.Application.ServiceDependency]
public Sage.Platform.Security.IRoleSecurityService RoleSecurityService
{
   set
      {
         _roleSecurityService = Sage.Platform.Application.ApplicationContext.Current.Services.Get<Sage.Platform.Security.IRoleSecurityService>(true);
      }
      get
      {
         return _roleSecurityService;
      }
}

public override Type EntityType
{
	get { return typeof(Sage.Entity.Interfaces.IContact); }
}

 private Sage.Platform.WebPortal.Binding.WebEntityListBindingSource _dsGrid0;
public Sage.Platform.WebPortal.Binding.WebEntityListBindingSource dsGrid0
{ 
  get 
  {
    if (_dsGrid0 == null)
    {
             _dsGrid0 = new Sage.Platform.WebPortal.Binding.WebEntityListBindingSource(typeof(Sage.Entity.Interfaces.IContactLeadSource), 
	    EntityType              ,"LeadSources", System.Reflection.MemberTypes.Property);
                   _dsGrid0.UseSmartQuery = true;
      	   	}
 	return _dsGrid0;
  }
}

void dsGrid0_OnCurrentEntitySet(object sender, EventArgs e) 
{
      if (Visible)
    { 
		if(BindingSource.Current != null)
		{
		
      
        dsGrid0.SourceObject = BindingSource.Current;
   		}
    }
   if (Visible)
   {   
      RegisterBindingsWithClient(dsGrid0);
   }
}

 



 

protected override void OnAddEntityBindings() { 
       dsGrid0.Bindings.Add(new Sage.Platform.WebPortal.Binding.WebEntityListBinding("LeadSources", grdContactLeadSources ));
   dsGrid0.BindFieldNames = new String[] { "ContactId","LeadsourceId","LeadDate","LeadSource.Description","LeadSource.AbbrevDescription","LeadSource.SourceDate" };
     
     BindingSource.OnCurrentEntitySet += new EventHandler(dsGrid0_OnCurrentEntitySet);
     
         
      
      
      
    }
	   
protected void cmdAddContactLeadSource_ClickAction(object sender, EventArgs e) {
if (DialogService != null) {
	// DialogActionItem
	DialogService.SetSpecs(400, 600, "AddEditContactLeadSource", string.Empty );
    DialogService.EntityType = typeof(Sage.Entity.Interfaces.IContactLeadSource); 
    DialogService.ShowDialog();
}
}

protected override void OnWireEventHandlers()
{
 base.OnWireEventHandlers();
 if (_roleSecurityService != null)
{
if (_roleSecurityService.HasAccess("ENTITIES/CONTACT/EDIT"))
{
cmdAddContactLeadSource.Click += new ImageClickEventHandler(cmdAddContactLeadSource_ClickAction);
}
}


}

protected override void OnFormBound()
{
grdContactLeadSources.Columns[0].Visible = (_roleSecurityService.HasAccess("Entities/Contact/Edit"));
grdContactLeadSources.Columns[1].Visible = (_roleSecurityService.HasAccess("Entities/Contact/Edit"));
if (dsGrid0.SourceObject == null) { dsGrid0.SourceObject = BindingSource.Current; }
if (dsGrid0.SourceObject == null) { RegisterBindingsWithClient(dsGrid0); }
dsGrid0.Bind();

if (!_roleSecurityService.HasAccess("ENTITIES/CONTACT/EDIT"))
{
cmdAddContactLeadSource.Visible = false;
}


}



public override Sage.Platform.Application.UI.ISmartPartInfo GetSmartPartInfo(Type smartPartInfoType)
{
	ToolsSmartPartInfo tinfo = new ToolsSmartPartInfo();
    	
	foreach (Control c in Controls)
	{
		SmartPartToolsContainer cont = c as SmartPartToolsContainer;
		if (cont != null)
		{
			switch (cont.ToolbarLocation)
			{
				case SmartPartToolsLocation.Right:
					foreach (Control tool in cont.Controls)
					{
											tinfo.RightTools.Add(tool);
										}
					break;
				case SmartPartToolsLocation.Center:
					foreach (Control tool in cont.Controls)
					{
						tinfo.CenterTools.Add(tool);
					}
					break;
				case SmartPartToolsLocation.Left:
					foreach (Control tool in cont.Controls)
					{
						tinfo.LeftTools.Add(tool);
					}
					break;
			}
		}
	}
	
		return tinfo;
}

private Sage.Platform.Controls.IEntityForm _formAdapter;

public Sage.Platform.Controls.IEntityForm FormAdapter
{
	get { return _formAdapter ?? (_formAdapter = new ContactLeadSourcesAdapter(this)); }
}

public class ContactLeadSourcesAdapter : Sage.Platform.WebPortal.Adapters.EntityFormAdapter, Sage.Form.Interfaces.IContactLeadSources
{
	public ContactLeadSourcesAdapter(Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider smartPart)
		: base(smartPart) {}

	private Sage.Platform.Controls.IDataGridControl _grdContactLeadSources;
	public Sage.Platform.Controls.IDataGridControl grdContactLeadSources
	{
		get { return FindControl(ref _grdContactLeadSources, "grdContactLeadSources"); }
	}
	private Sage.Platform.Controls.IDataSourceControl _dsGrid0;
	public Sage.Platform.Controls.IDataSourceControl dsGrid0
	{
		get { return FindControl(ref _dsGrid0, "dsGrid0"); }
	}
	private Sage.Platform.Controls.IButtonControl _cmdAddContactLeadSource;
	public Sage.Platform.Controls.IButtonControl cmdAddContactLeadSource
	{
		get { return FindControl(ref _cmdAddContactLeadSource, "cmdAddContactLeadSource"); }
	}

}

</script>

<script type="text/javascript">
</script>
