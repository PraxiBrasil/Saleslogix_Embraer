<%@ Control Language="C#" ClassName="SelectAccountAddress" Inherits="Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider" %>
<%@ Register Assembly="Sage.SalesLogix.Client.GroupBuilder" Namespace="Sage.SalesLogix.Client.GroupBuilder" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.PickList" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.DependencyLookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Lookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Timeline" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.HighLevelTypes" Namespace="Sage.SalesLogix.HighLevelTypes" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.Platform.WebPortal" Namespace="Sage.Platform.WebPortal.SmartParts" TagPrefix="SalesLogix" %>
<%//------------------------------------------------------------------------
//This file was generated by a tool.  Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//------------------------------------------------------------------------ %>
<table border="0" cellpadding="1" cellspacing="0" class="formtable">
         <col width="200%" />
            <col width="250%" />
     <tr>
            <td  colspan="2" >
<SalesLogix:SlxGridView runat="server" ID="grdAddresses" GridLines="None"
AutoGenerateColumns="false" CellPadding="4" CssClass="datagrid" PagerStyle-CssClass="gridPager"
AlternatingRowStyle-CssClass="rowdk" RowStyle-CssClass="rowlt" SelectedRowStyle-CssClass="rowSelected" ShowEmptyTable="true" EnableViewState="false"
 ExpandableRows="True" ResizableColumns="True"  OnRowCommand="grdAddresses_RowCommand" 
 DataKeyNames="InstanceId,Id" 
>
<Columns>
 <asp:CommandField ShowSelectButton="true"
  SelectText="<%$ resources: grdAddresses.ba2f080d-a62e-460f-9eb6-a9608bdc3bb5.Text %>" ButtonType="link" 
             >
  	    </asp:CommandField>
    <asp:BoundField DataField="Description" 
      HeaderText="<%$ resources: grdAddresses.66c039a2-7f84-4dc9-a74f-df66cce58c6f.ColumnHeading %>"          >
      </asp:BoundField>
    <asp:BoundField DataField="Address1" 
      HeaderText="<%$ resources: grdAddresses.194a7bc4-3d11-4bde-af1a-daeffebd8477.ColumnHeading %>"          >
      </asp:BoundField>
    <asp:BoundField DataField="Address2" 
      HeaderText="<%$ resources: grdAddresses.0fa5d6a4-7b5e-4aa5-8580-cba0f07916ab.ColumnHeading %>"          >
      </asp:BoundField>
    <asp:BoundField DataField="City" 
      HeaderText="<%$ resources: grdAddresses.441f56a7-3acb-4547-b1e0-9ccc57483f63.ColumnHeading %>"          >
      </asp:BoundField>
    <asp:BoundField DataField="State" 
      HeaderText="<%$ resources: grdAddresses.5e743716-52aa-4968-8b37-9aa9a6aafc00.ColumnHeading %>"          >
      </asp:BoundField>
    <asp:BoundField DataField="PostalCode" 
      HeaderText="<%$ resources: grdAddresses.e0d219a6-7c36-49c8-99ff-c28d812d176c.ColumnHeading %>"          >
      </asp:BoundField>
    <asp:BoundField DataField="Country" 
      HeaderText="<%$ resources: grdAddresses.84ffd5bf-1834-4bda-89a9-1232fe690050.ColumnHeading %>"          >
      </asp:BoundField>
 </Columns>
</SalesLogix:SlxGridView>

<script runat="server" type="text/C#">


protected void grdAddresses_RowCommand(object sender, GridViewCommandEventArgs e)
{
    if (e.CommandName == "Page")
        return;
    int rowIndex;
    if (Int32.TryParse(e.CommandArgument.ToString(), out rowIndex))
    {
        dtsAddresses.SelectedIndex = rowIndex;
		object currentEntity = dtsAddresses.Current;
        if ((currentEntity is Sage.Platform.ComponentModel.ComponentView) && !((Sage.Platform.ComponentModel.ComponentView)currentEntity).IsVirtualComponent)
            currentEntity = ((Sage.Platform.ComponentModel.ComponentView)currentEntity).Component;
		string id = String.Empty;
        //Check if this is an unpersisted entity and use its InstanceId
        if (Sage.Platform.WebPortal.PortalUtil.ObjectIsNewEntity(currentEntity))
        {
		    if (grdAddresses.DataKeys[0].Values.Count > 1) {
                foreach (DictionaryEntry val in grdAddresses.DataKeys[rowIndex].Values)
                {
                    if (val.Key.ToString() == "InstanceId")
                    {
                        Guid instanceId = (Guid)val.Value;
                        dtsAddresses.SetCurrentEntityByInstanceId(instanceId);
                        id = instanceId.ToString();
		                currentEntity = dtsAddresses.Current;
                        if ((currentEntity is Sage.Platform.ComponentModel.ComponentView) && !((Sage.Platform.ComponentModel.ComponentView)currentEntity).IsVirtualComponent)
                            currentEntity = ((Sage.Platform.ComponentModel.ComponentView)currentEntity).Component;
                    }
                }                 
            }
        }
        else
        {
            foreach (DictionaryEntry val in grdAddresses.DataKeys[rowIndex].Values)
            {
                if (val.Key.ToString() != "InstanceId")
                {
                    id = val.Value.ToString();
                }
            }
        }		
	}
    grdAddresses_refresh();
}
	
	protected void grdAddresses_refresh()
	{
		if (PageWorkItem != null) {
			Sage.Platform.WebPortal.Services.IPanelRefreshService refresher = PageWorkItem.Services.Get<Sage.Platform.WebPortal.Services.IPanelRefreshService>();
			if (refresher != null)
			{
				refresher.RefreshAll();
			}
			else
			{
				Response.Redirect(Request.Url.ToString());
			}
		}
	}
	
        </script>

      </td>
            </tr>
<tr>
            <td></td>
                <td  >
<asp:Panel runat="server" ID="btnsControlList" CssClass="controlslist "
>
   <asp:Button runat="server" ID="btnOK"
 Text="<%$ resources: btnOK.Caption %>"  />
   
   <asp:Button runat="server" ID="btnCancel"
 Text="<%$ resources: btnCancel.Caption %>"  />
 
</asp:Panel>
      </td>
      </tr>
<tr>
            <td></td>
                <td></td>
      </tr>
</table>
 

 <SalesLogix:SmartPartToolsContainer runat="server" ID="SelectAccountAddress_RTools" ToolbarLocation="right">
  <SalesLogix:PageLink ID="lnkSelectAccountAddressHelp" runat="server" LinkType="HelpFileName" ToolTip="<%$ resources: Portal, Help_ToolTip %>" Target="MCWebHelp" NavigateUrl="addresslist.htm" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Help_16x16"></SalesLogix:PageLink> </SalesLogix:SmartPartToolsContainer>

<script runat="server" type="text/C#">
private Sage.Platform.Security.IRoleSecurityService _roleSecurityService;
/// <summary>
/// Gets or sets the role security service.
/// </summary>
/// <value>The role security service.</value>
[Sage.Platform.Application.ServiceDependency]
public Sage.Platform.Security.IRoleSecurityService RoleSecurityService
{
   set
      {
         _roleSecurityService = Sage.Platform.Application.ApplicationContext.Current.Services.Get<Sage.Platform.Security.IRoleSecurityService>(true);
      }
      get
      {
         return _roleSecurityService;
      }
}

public override Type EntityType
{
	get { return typeof(Sage.Entity.Interfaces.IContact); }
}

 private Sage.Platform.WebPortal.Binding.WebEntityListBindingSource _dtsAddresses;
public Sage.Platform.WebPortal.Binding.WebEntityListBindingSource dtsAddresses
{ 
  get 
  {
    if (_dtsAddresses == null)
    {
             _dtsAddresses = new Sage.Platform.WebPortal.Binding.WebEntityListBindingSource(typeof(Sage.Entity.Interfaces.IAddress), 
	    EntityType              ,"Account.Addresses", System.Reflection.MemberTypes.Property);
            	   	}
 	return _dtsAddresses;
  }
}

void dtsAddresses_OnCurrentEntitySet(object sender, EventArgs e) 
{
      if (Visible)
    { 
		if(BindingSource.Current != null)
		{
		
      
        dtsAddresses.SourceObject = BindingSource.Current;
   		}
    }
   if (Visible)
   {   
      RegisterBindingsWithClient(dtsAddresses);
   }
}

 



 

protected override void OnAddEntityBindings() { 
       dtsAddresses.Bindings.Add(new Sage.Platform.WebPortal.Binding.WebEntityListBinding("Account.Addresses", grdAddresses ));
   dtsAddresses.BindFieldNames = new String[] { "Id","Description","Address1","Address2","City","State","PostalCode","Country" };
        
        
        
     
     BindingSource.OnCurrentEntitySet += new EventHandler(dtsAddresses_OnCurrentEntitySet);
     
}
	   	   	   	   
protected void btnOK_ClickAction(object sender, EventArgs e) {
    if (this.dtsAddresses.Current != null)
    {
        Sage.Entity.Interfaces.IContact contact = (this.BindingSource.Current as Sage.Entity.Interfaces.IContact);
        Sage.Entity.Interfaces.IAddress address = (((Sage.Platform.ComponentModel.ComponentView)this.dtsAddresses.Current).Component as Sage.Entity.Interfaces.IAddress);
		if (contact != null && address != null)
        {
        	contact.Address.Address1 = address.Address1;
			contact.Address.Address2 = address.Address2;
			contact.Address.Address3 = address.Address3;
			contact.Address.Address4 = address.Address4;
			contact.Address.City = address.City;
			contact.Address.Country = address.Country;
			contact.Address.County = address.County;
			contact.Address.Description = address.Description;
			contact.Address.IsMailing = true;
			contact.Address.IsPrimary = true;
			contact.Address.PostalCode = address.PostalCode;
			contact.Address.Routing = address.Routing;
			contact.Address.Salutation = address.Salutation;
			contact.Address.State = address.State;
			contact.Address.TimeZone = address.TimeZone;
			contact.Address.Type = address.Type;
		}
    }
    DialogService.CloseEventHappened(sender, e);
	PanelRefresh.RefreshAll();
}

protected override void OnWireEventHandlers()
{
 base.OnWireEventHandlers();
 btnOK.Click += new EventHandler(btnOK_ClickAction);
btnCancel.Click += new EventHandler(DialogService.CloseEventHappened);


}

protected override void OnFormBound()
{
ClientBindingMgr.RegisterSaveButton(btnOK);

ScriptManager.RegisterStartupScript(Page, GetType(), "cleanupcontainer", "jQuery(\".controlslist > div:empty\").remove();", true);
if (dtsAddresses.SourceObject == null) { dtsAddresses.SourceObject = BindingSource.Current; }
if (dtsAddresses.SourceObject == null) { RegisterBindingsWithClient(dtsAddresses); }
dtsAddresses.Bind();

ClientBindingMgr.RegisterDialogCancelButton(btnCancel);


}



public override Sage.Platform.Application.UI.ISmartPartInfo GetSmartPartInfo(Type smartPartInfoType)
{
	ToolsSmartPartInfo tinfo = new ToolsSmartPartInfo();
    	
	foreach (Control c in Controls)
	{
		SmartPartToolsContainer cont = c as SmartPartToolsContainer;
		if (cont != null)
		{
			switch (cont.ToolbarLocation)
			{
				case SmartPartToolsLocation.Right:
					foreach (Control tool in cont.Controls)
					{
											tinfo.RightTools.Add(tool);
										}
					break;
				case SmartPartToolsLocation.Center:
					foreach (Control tool in cont.Controls)
					{
						tinfo.CenterTools.Add(tool);
					}
					break;
				case SmartPartToolsLocation.Left:
					foreach (Control tool in cont.Controls)
					{
						tinfo.LeftTools.Add(tool);
					}
					break;
			}
		}
	}
	
		return tinfo;
}

private Sage.Platform.Controls.IEntityForm _formAdapter;

public Sage.Platform.Controls.IEntityForm FormAdapter
{
	get { return _formAdapter ?? (_formAdapter = new SelectAccountAddressAdapter(this)); }
}

public class SelectAccountAddressAdapter : Sage.Platform.WebPortal.Adapters.EntityFormAdapter, Sage.Form.Interfaces.ISelectAccountAddress
{
	public SelectAccountAddressAdapter(Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider smartPart)
		: base(smartPart) {}

	private Sage.Platform.Controls.IDataGridControl _grdAddresses;
	public Sage.Platform.Controls.IDataGridControl grdAddresses
	{
		get { return FindControl(ref _grdAddresses, "grdAddresses"); }
	}
	private Sage.Platform.Controls.IControlsListControl _btnsControlList;
	public Sage.Platform.Controls.IControlsListControl btnsControlList
	{
		get { return FindControl(ref _btnsControlList, "btnsControlList"); }
	}
	private Sage.Platform.Controls.IButtonControl _btnOK;
	public Sage.Platform.Controls.IButtonControl btnOK
	{
		get { return FindControl(ref _btnOK, "btnOK"); }
	}
	private Sage.Platform.Controls.IButtonControl _btnCancel;
	public Sage.Platform.Controls.IButtonControl btnCancel
	{
		get { return FindControl(ref _btnCancel, "btnCancel"); }
	}
	private Sage.Platform.Controls.IDataSourceControl _dtsAddresses;
	public Sage.Platform.Controls.IDataSourceControl dtsAddresses
	{
		get { return FindControl(ref _dtsAddresses, "dtsAddresses"); }
	}

}

</script>

<script type="text/javascript">
</script>
