<%@ Control Language="C#" ClassName="TicketActivityItems" Inherits="Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider" %>
<%@ Register Assembly="Sage.SalesLogix.Client.GroupBuilder" Namespace="Sage.SalesLogix.Client.GroupBuilder" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.PickList" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.DependencyLookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Lookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Timeline" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.HighLevelTypes" Namespace="Sage.SalesLogix.HighLevelTypes" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.Platform.WebPortal" Namespace="Sage.Platform.WebPortal.SmartParts" TagPrefix="SalesLogix" %>
<%//------------------------------------------------------------------------
//This file was generated by a tool.  Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//------------------------------------------------------------------------ %>
  <SalesLogix:SlxGridView runat="server" ID="grdParts" GridLines="None"
AutoGenerateColumns="false" CellPadding="4" CssClass="datagrid" PagerStyle-CssClass="gridPager"
AlternatingRowStyle-CssClass="rowdk" RowStyle-CssClass="rowlt" SelectedRowStyle-CssClass="rowSelected" ShowEmptyTable="true" EnableViewState="false"
 AllowPaging="true" PageSize="10" OnPageIndexChanging="grdPartspage_changing" EmptyTableRowText="<%$ resources: grdParts.EmptyTableRowText %>"  ExpandableRows="True" ResizableColumns="True"  OnRowCommand="grdParts_RowCommand" 
 DataKeyNames="InstanceId,Id" 
 AllowSorting="true" OnSorting="grdParts_Sorting"  OnRowEditing="grdParts_RowEditing"  OnRowDeleting="grdParts_RowDeleting" OnRowDataBound="grdParts_RowDataBound"  ShowSortIcon="true" >
<Columns>
   <asp:BoundField DataField="AccountProduct.ProductName" 
      HeaderText="<%$ resources: grdParts.1eba4e4b-7c06-4d4f-b83d-ddcd9c7ce03d.ColumnHeading %>"       SortExpression="AccountProduct.ProductName"    >
      </asp:BoundField>
    <asp:BoundField DataField="AccountProduct.ActualId" 
      HeaderText="<%$ resources: grdParts.3caf1f5b-8494-45d1-92ee-39a57af26725.ColumnHeading %>"       SortExpression="AccountProduct.ActualId"    >
      </asp:BoundField>
    <asp:BoundField DataField="AccountProduct.SerialNumber" 
      HeaderText="<%$ resources: grdParts.04dc2049-0a4f-4745-a0ba-bc703f496869.ColumnHeading %>"       SortExpression="AccountProduct.SerialNumber"    >
      </asp:BoundField>
    <asp:TemplateField   HeaderText="<%$ resources: grdParts.a9382192-524c-4393-aaa8-b67a082ced13.ColumnHeading %>"       SortExpression="ItemAmount"  >
    <itemtemplate>
 <SalesLogix:Currency runat="server" ID="grdPartscol4" DisplayMode="AsText"  ExchangeRateType="BaseRate"   Text='<%#  dtsParts.getPropertyValue(Container.DataItem, "ItemAmount")  %>' CssClass="" />
   </itemtemplate></asp:TemplateField>
    <asp:BoundField DataField="ItemDescription" 
      HeaderText="<%$ resources: grdParts.3b37f2ee-b6d4-4791-801a-c77b2abff80d.ColumnHeading %>"       SortExpression="ItemDescription"    >
      </asp:BoundField>
  <asp:ButtonField CommandName="Edit" 
  Text="<%$ resources: grdParts.647fb992-dace-434d-a3c1-4412ac2192c4.Text %>"               >
  	    </asp:ButtonField>
    <asp:CommandField ShowSelectButton="true"
  SelectText="<%$ resources: grdParts.dbeccfe0-023c-45d9-a1f0-c0c63f662121.Text %>" ButtonType="link" 
             >
  	    </asp:CommandField>
   <asp:ButtonField CommandName="Delete" 
  Text="<%$ resources: grdParts.2399c566-db2f-433e-8dcb-a4b7a084057b.Text %>"                >
  	    </asp:ButtonField>
   </Columns>
    <PagerSettings Mode="NumericFirstLast" FirstPageImageUrl="ImageResource.axd?scope=global&type=Global_Images&key=Start_16x16" LastPageImageUrl="ImageResource.axd?scope=global&type=Global_Images&key=End_16x16" />
</SalesLogix:SlxGridView>

<script runat="server" type="text/C#">

                        private int _grdPartsdeleteColumnIndex = -2;
protected int grdPartsDeleteColumnIndex
{
	get
	{
		if (_grdPartsdeleteColumnIndex == -2)
		{
			int bias = (grdParts.ExpandableRows) ? 1 : 0;
			_grdPartsdeleteColumnIndex = -1;
			int colcount = 0;
			foreach (DataControlField col in grdParts.Columns)
			{
				ButtonField btn = col as ButtonField;
				if (btn != null)
				{
					if (btn.CommandName == "Delete")
					{
						_grdPartsdeleteColumnIndex = colcount + bias;
						break;
					}
				}
				colcount++;
			}
		}
		return _grdPartsdeleteColumnIndex;
	}
}

protected void grdParts_RowDataBound(object sender, GridViewRowEventArgs e)
{
	if (e.Row.RowType == DataControlRowType.DataRow)
	{
		if ((grdPartsDeleteColumnIndex >= 0) && (grdPartsDeleteColumnIndex < e.Row.Cells.Count))
		{
			TableCell cell = e.Row.Cells[grdPartsDeleteColumnIndex];
			foreach (Control c in cell.Controls)
			{
				LinkButton btn = c as LinkButton;
				if (btn != null)
				{
					btn.Attributes.Add("onclick", "javascript: return confirm('" + Sage.Platform.WebPortal.PortalUtil.JavaScriptEncode(GetLocalResourceObject("grdParts.2399c566-db2f-433e-8dcb-a4b7a084057b.ConfirmationMessage").ToString()) + "');");
					return;
				}
			}
		}
	}
}
   
protected void grdPartspage_changing(object sender, GridViewPageEventArgs e)
{
 grdParts.PageIndex = e.NewPageIndex;
 grdParts.DataBind();
}
protected void grdParts_Sorting(object sender, GridViewSortEventArgs e) { }
protected void grdParts_RowCommand(object sender, GridViewCommandEventArgs e)
{
    if (e.CommandName == "Page")
        return;
    int rowIndex;
    if (Int32.TryParse(e.CommandArgument.ToString(), out rowIndex))
    {
        dtsParts.SelectedIndex = rowIndex;
		object currentEntity = dtsParts.Current;
        if ((currentEntity is Sage.Platform.ComponentModel.ComponentView) && !((Sage.Platform.ComponentModel.ComponentView)currentEntity).IsVirtualComponent)
            currentEntity = ((Sage.Platform.ComponentModel.ComponentView)currentEntity).Component;
		string id = String.Empty;
        //Check if this is an unpersisted entity and use its InstanceId
        if (Sage.Platform.WebPortal.PortalUtil.ObjectIsNewEntity(currentEntity))
        {
		    if (grdParts.DataKeys[0].Values.Count > 1) {
                foreach (DictionaryEntry val in grdParts.DataKeys[rowIndex].Values)
                {
                    if (val.Key.ToString() == "InstanceId")
                    {
                        Guid instanceId = (Guid)val.Value;
                        dtsParts.SetCurrentEntityByInstanceId(instanceId);
                        id = instanceId.ToString();
		                currentEntity = dtsParts.Current;
                        if ((currentEntity is Sage.Platform.ComponentModel.ComponentView) && !((Sage.Platform.ComponentModel.ComponentView)currentEntity).IsVirtualComponent)
                            currentEntity = ((Sage.Platform.ComponentModel.ComponentView)currentEntity).Component;
                    }
                }                 
            }
        }
        else
        {
            foreach (DictionaryEntry val in grdParts.DataKeys[rowIndex].Values)
            {
                if (val.Key.ToString() != "InstanceId")
                {
                    id = val.Value.ToString();
                }
            }
        }		
        if (e.CommandName.Equals("Edit"))
        {
            if (DialogService != null)
            {
				// QFDataGrid
							DialogService.SetSpecs(400, 400, "AddEditTicketActivityItem", GetLocalResourceObject("dcf0d688-8a24-4cae-aa30-4c553725fb95.DialogTitleOverride").ToString() );
			                DialogService.EntityType = typeof(Sage.Entity.Interfaces.ITicketActivityItem );
                DialogService.EntityID = id;
                DialogService.ShowDialog();
            }
        }
		if (e.CommandName.Equals("Delete"))
		{
            Sage.Entity.Interfaces.ITicketActivity mainentity = this.BindingSource.Current as Sage.Entity.Interfaces.ITicketActivity;
			if (mainentity != null)
			{
			    Sage.Entity.Interfaces.ITicketActivityItem childEntity = null;
			    if((currentEntity != null) && (currentEntity is Sage.Entity.Interfaces.ITicketActivityItem))
			    {
			        childEntity = (Sage.Entity.Interfaces.ITicketActivityItem)currentEntity;    
			    }
			    else if (id != null)
			    {
                    childEntity = Sage.Platform.EntityFactory.GetById<Sage.Entity.Interfaces.ITicketActivityItem>(id);
            }
				if(childEntity != null)
				{
			         mainentity.Items.Remove(childEntity);
					 mainentity.Save();
					 if((childEntity.PersistentState & Sage.Platform.Orm.Interfaces.PersistentState.New) <= 0)
					 {
					     childEntity.Delete();
					 }
					 dtsParts.SelectedIndex = -1;
			    }
		    }
		}
	}
    grdParts_refresh();
}
	
	protected void grdParts_refresh()
	{
		if (PageWorkItem != null) {
			Sage.Platform.WebPortal.Services.IPanelRefreshService refresher = PageWorkItem.Services.Get<Sage.Platform.WebPortal.Services.IPanelRefreshService>();
			if (refresher != null)
			{
				refresher.RefreshAll();
			}
			else
			{
				Response.Redirect(Request.Url.ToString());
			}
		}
	}
	
    	protected void grdParts_RowEditing(object sender, GridViewEditEventArgs e)
	{
		grdParts.SelectedIndex = e.NewEditIndex;
	}
            protected void grdParts_RowDeleting(object sender, GridViewDeleteEventArgs e)
	{
		grdParts.SelectedIndex = -1;
	}
	</script>
 

 <SalesLogix:SmartPartToolsContainer runat="server" ID="TicketActivityItems_RTools" ToolbarLocation="right">
   <SalesLogix:LookupControl runat="server" ID="lueAddPart"  ToolTip="<%$ resources: lueAddPart.ToolTip %>" LookupEntityName="Product" LookupEntityTypeName="Sage.Entity.Interfaces.IProduct, Sage.Entity.Interfaces, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" LookupDisplayMode="ButtonOnly" AutoPostBack="true" CssClass="alignright" LookupImageURL="~/ImageResource.axd?scope=global&type=Global_Images&key=plus_16x16"  >
<LookupProperties>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueAddPart.LookupProperties.ActualId.PropertyHeader %>" PropertyName="ActualId" PropertyType="System.String" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueAddPart.LookupProperties.Name.PropertyHeader %>" PropertyName="Name" PropertyType="System.String" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueAddPart.LookupProperties.Status.PropertyHeader %>" PropertyName="Status" PropertyType="System.String" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
</LookupProperties>
<LookupPreFilters>
</LookupPreFilters>
</SalesLogix:LookupControl>
                 

  <SalesLogix:PageLink ID="lnkTicketActivityItemsHelp" runat="server" LinkType="HelpFileName" ToolTip="<%$ resources: Portal, Help_ToolTip %>" Target="MCWebHelp" NavigateUrl="csrticketactivitiestab.htm" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Help_16x16"></SalesLogix:PageLink> </SalesLogix:SmartPartToolsContainer>

<script runat="server" type="text/C#">
private Sage.Platform.Security.IRoleSecurityService _roleSecurityService;
/// <summary>
/// Gets or sets the role security service.
/// </summary>
/// <value>The role security service.</value>
[Sage.Platform.Application.ServiceDependency]
public Sage.Platform.Security.IRoleSecurityService RoleSecurityService
{
   set
      {
         _roleSecurityService = Sage.Platform.Application.ApplicationContext.Current.Services.Get<Sage.Platform.Security.IRoleSecurityService>(true);
      }
      get
      {
         return _roleSecurityService;
      }
}

public override Type EntityType
{
	get { return typeof(Sage.Entity.Interfaces.ITicketActivity); }
}

 private Sage.Platform.WebPortal.Binding.WebEntityListBindingSource _dtsParts;
public Sage.Platform.WebPortal.Binding.WebEntityListBindingSource dtsParts
{ 
  get 
  {
    if (_dtsParts == null)
    {
             _dtsParts = new Sage.Platform.WebPortal.Binding.WebEntityListBindingSource(typeof(Sage.Entity.Interfaces.ITicketActivityItem), 
	    EntityType              ,"Items", System.Reflection.MemberTypes.Property);
                   _dtsParts.UseSmartQuery = true;
      	   	}
 	return _dtsParts;
  }
}

void dtsParts_OnCurrentEntitySet(object sender, EventArgs e) 
{
      if (Visible)
    { 
		if(BindingSource.Current != null)
		{
		
      
        dtsParts.SourceObject = BindingSource.Current;
   		}
    }
   if (Visible)
   {   
      RegisterBindingsWithClient(dtsParts);
   }
}

 



 

protected override void OnAddEntityBindings() { 
       dtsParts.Bindings.Add(new Sage.Platform.WebPortal.Binding.WebEntityListBinding("Items", grdParts ));
   dtsParts.BindFieldNames = new String[] { "Id","AccountProduct.ProductName","AccountProduct.ActualId","AccountProduct.SerialNumber","ItemAmount","ItemDescription" };
     
     BindingSource.OnCurrentEntitySet += new EventHandler(dtsParts_OnCurrentEntitySet);
     
    }
	   
protected void grdParts_RowSelectedAction(object sender, EventArgs e) {
	if (dtsParts != null && dtsParts.Current != null)
	{
		object currentEntity = dtsParts.Current;
		if ((currentEntity is Sage.Platform.ComponentModel.ComponentView)
			&& !((Sage.Platform.ComponentModel.ComponentView)currentEntity).IsVirtualComponent)
			currentEntity = ((Sage.Platform.ComponentModel.ComponentView)currentEntity).Component;
	
		Sage.Entity.Interfaces.ITicketActivityItem part = currentEntity as Sage.Entity.Interfaces.ITicketActivityItem;
		if (part != null)
		{
			part.CopyPart(part.TicketActivity);
			Sage.Platform.WebPortal.EntityPage pg = Page as Sage.Platform.WebPortal.EntityPage;
			if (pg != null)
			{
				if (pg.ModeId.ToUpper() != "INSERT")
				{
					part.TicketActivity.Save();
				}
			}
			Sage.Platform.WebPortal.Services.IPanelRefreshService refresher = PageWorkItem.Services.Get<Sage.Platform.WebPortal.Services.IPanelRefreshService>();
			if (refresher != null)
			{
				refresher.RefreshAll();
			}
		}
	}
	
}
protected void lueAddPart_ChangeAction(object sender, EventArgs e) {
    object passThroughObject = null;
    if (lueAddPart.LookupResultValue != null)
    {
        Sage.Entity.Interfaces.ITicketActivity parentEntity = BindingSource.Current as Sage.Entity.Interfaces.ITicketActivity;
        Sage.Entity.Interfaces.IProduct relatedEntity = lueAddPart.LookupResultValue as Sage.Entity.Interfaces.IProduct;
        Sage.Platform.WebPortal.EntityPage page = (Sage.Platform.WebPortal.EntityPage)Page;
		// check for duplicates
        bool found = false;
        if ((parentEntity != null) && (relatedEntity != null))
        {
		        Sage.Entity.Interfaces.ITicketActivityItem relationshipEntity = Sage.Platform.EntityFactory.Create<Sage.Entity.Interfaces.ITicketActivityItem>();
		if (!found)
        {
            relationshipEntity.TicketActivity = parentEntity;
            relationshipEntity.Product = relatedEntity;
            parentEntity.Items.Add(relationshipEntity);
            dtsParts.SelectedMember = relationshipEntity;
            if (page.ModeId.ToUpper() != "INSERT")
            {
				parentEntity.Save();
            }
		}
            passThroughObject = relationshipEntity;
        }
    }
    e = new Sage.Platform.WebPortal.SmartParts.WebActionEventArgs(passThroughObject);
    lueAddPart_ChangeActionIAC(sender, e);
    

}
protected void lueAddPart_ChangeActionIAC(object sender, EventArgs e) {
Sage.Platform.DynamicMethod.DynamicMethodLibrary lib = Sage.Platform.Orm.DynamicMethodLibraryHelper.Instance;
Object[] methodArgs = new Object[] { FormAdapter, e };
lib.Execute("TicketActivityItems.CreateAsset", methodArgs);
}

protected override void OnWireEventHandlers()
{
 base.OnWireEventHandlers();
 grdParts.SelectedIndexChanged += new EventHandler(grdParts_RowSelectedAction);
lueAddPart.LookupResultValueChanged += new EventHandler(lueAddPart_ChangeAction);


}

protected override void OnFormBound()
{
ClientBindingMgr.RegisterBoundControl(lueAddPart);

if (dtsParts.SourceObject == null) { dtsParts.SourceObject = BindingSource.Current; }
if (dtsParts.SourceObject == null) { RegisterBindingsWithClient(dtsParts); }
dtsParts.Bind();



}



public override Sage.Platform.Application.UI.ISmartPartInfo GetSmartPartInfo(Type smartPartInfoType)
{
	ToolsSmartPartInfo tinfo = new ToolsSmartPartInfo();
    	
	foreach (Control c in Controls)
	{
		SmartPartToolsContainer cont = c as SmartPartToolsContainer;
		if (cont != null)
		{
			switch (cont.ToolbarLocation)
			{
				case SmartPartToolsLocation.Right:
					foreach (Control tool in cont.Controls)
					{
											tinfo.RightTools.Add(tool);
										}
					break;
				case SmartPartToolsLocation.Center:
					foreach (Control tool in cont.Controls)
					{
						tinfo.CenterTools.Add(tool);
					}
					break;
				case SmartPartToolsLocation.Left:
					foreach (Control tool in cont.Controls)
					{
						tinfo.LeftTools.Add(tool);
					}
					break;
			}
		}
	}
	
		return tinfo;
}

private Sage.Platform.Controls.IEntityForm _formAdapter;

public Sage.Platform.Controls.IEntityForm FormAdapter
{
	get { return _formAdapter ?? (_formAdapter = new TicketActivityItemsAdapter(this)); }
}

public class TicketActivityItemsAdapter : Sage.Platform.WebPortal.Adapters.EntityFormAdapter, Sage.Form.Interfaces.ITicketActivityItems
{
	public TicketActivityItemsAdapter(Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider smartPart)
		: base(smartPart) {}

	private Sage.Platform.Controls.IDataGridControl _grdParts;
	public Sage.Platform.Controls.IDataGridControl grdParts
	{
		get { return FindControl(ref _grdParts, "grdParts"); }
	}
	private Sage.Platform.Controls.IDataSourceControl _dtsParts;
	public Sage.Platform.Controls.IDataSourceControl dtsParts
	{
		get { return FindControl(ref _dtsParts, "dtsParts"); }
	}
	private Sage.Platform.Controls.ILookupControl _lueAddPart;
	public Sage.Platform.Controls.ILookupControl lueAddPart
	{
		get { return FindControl(ref _lueAddPart, "lueAddPart"); }
	}

	public void CreateAsset(System.EventArgs e)
	{
		Sage.Platform.DynamicMethod.DynamicMethodLibrary lib = Sage.Platform.Orm.DynamicMethodLibraryHelper.Instance;
		Object[] methodArgs = new Object[] { this, e };
		lib.Execute("TicketActivityItems.CreateAsset", methodArgs);
	}
}

</script>

<script type="text/javascript">
</script>
