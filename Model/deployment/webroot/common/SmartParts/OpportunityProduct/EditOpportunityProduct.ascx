<%@ Control Language="C#" ClassName="EditOpportunityProduct" Inherits="Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider" %>
<%@ Register Assembly="Sage.SalesLogix.Client.GroupBuilder" Namespace="Sage.SalesLogix.Client.GroupBuilder" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.PickList" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.DependencyLookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Lookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Timeline" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.HighLevelTypes" Namespace="Sage.SalesLogix.HighLevelTypes" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.Platform.WebPortal" Namespace="Sage.Platform.WebPortal.SmartParts" TagPrefix="SalesLogix" %>
<%//------------------------------------------------------------------------
//This file was generated by a tool.  Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//------------------------------------------------------------------------ %>
<table border="0" cellpadding="1" cellspacing="0" class="formtable">
         <col width="100%" />
     <tr>
            <td  >
 <div class=" lbl alignleft" >
   <asp:Label ID="txtSort_lbl" AssociatedControlID="txtSort" runat="server" Text="<%$ resources: txtSort.Caption %>" ></asp:Label>
 </div>
  <div  class="textcontrol"   >
<asp:TextBox runat="server" ID="txtSort" ReadOnly="true" Rows="1"
 />
  </div>

      </td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft" >
   <asp:Label ID="txtName_lbl" AssociatedControlID="txtName" runat="server" Text="<%$ resources: txtName.Caption %>" ></asp:Label>
 </div>
  <div  class="textcontrol"   >
<asp:TextBox runat="server" ID="txtName" ReadOnly="true" Rows="1"
 />
  </div>

      </td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="txtProgram_lbl" AssociatedControlID="txtProgram" runat="server" Text="<%$ resources: txtProgram.Caption %>" ></asp:Label>
 </div>   
   <div  class="textcontrol picklist"  > 
    <SalesLogix:PickListControl runat="server" ID="txtProgram" PickListId="kSYST0000319" PickListName="Price Description" AutoPostBack="true" CanEditText="false" AlphaSort="true"  />
  </div>

      </td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="curPrice_lbl" AssociatedControlID="curPrice" runat="server" Text="<%$ resources: curPrice.Caption %>" ></asp:Label>
 </div>
   <div  class="textcontrol currency"  >
    <SalesLogix:Currency runat="server" ID="curPrice" ExchangeRateType="BaseRate"
ReadOnly="true" DisplayCurrencyCode="false"  />
</div>

      </td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft" >
   <asp:Label ID="txtDiscount_lbl" AssociatedControlID="txtDiscount" runat="server" Text="<%$ resources: txtDiscount.Caption %>" ></asp:Label>
 </div>
  <div  class="textcontrol"   >
<asp:TextBox runat="server" ID="txtDiscount" Rows="1"
AutoPostBack="true"  />
  </div>

      </td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="curCalculatedPrice_lbl" AssociatedControlID="curCalculatedPrice" runat="server" Text="<%$ resources: curCalculatedPrice.Caption %>" ></asp:Label>
 </div>
   <div  class="textcontrol currency"  >
    <SalesLogix:Currency runat="server" ID="curCalculatedPrice" ExchangeRateType="BaseRate"
DisplayCurrencyCode="false" AutoPostBack="true"  />
</div>

      </td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="curMCCalcPrice_lbl" AssociatedControlID="curMCCalcPrice" runat="server" Text="<%$ resources: curMCCalcPrice.Caption %>" ></asp:Label>
 </div>
   <div  class="textcontrol currency"  >
    <SalesLogix:Currency runat="server" ID="curMCCalcPrice" ExchangeRateType="OpportunityRate"
AutoPostBack="true"  />
</div>

      </td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft" >
   <asp:Label ID="txtQuantity_lbl" AssociatedControlID="txtQuantity" runat="server" Text="<%$ resources: txtQuantity.Caption %>" ></asp:Label>
 </div>
  <div  class="textcontrol"   >
<asp:TextBox runat="server" ID="txtQuantity" Rows="1"
AutoPostBack="true"  />
  </div>

      </td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="curExtendedPrice_lbl" AssociatedControlID="curExtendedPrice" runat="server" Text="<%$ resources: curExtendedPrice.Caption %>" ></asp:Label>
 </div>
   <div  class="textcontrol currency"  >
    <SalesLogix:Currency runat="server" ID="curExtendedPrice" ExchangeRateType="BaseRate"
ReadOnly="true" DisplayCurrencyCode="false"  />
</div>

      </td>
      </tr>
<tr>
            <td  >
<asp:Panel runat="server" ID="QFControlsList" CssClass="controlslist qfActionContainer"
>
   <asp:Button runat="server" ID="btnOK"
 Text="<%$ resources: btnOK.Caption %>" CssClass="slxbutton"  />
   
   <asp:Button runat="server" ID="btnCancel"
 Text="<%$ resources: btnCancel.Caption %>" CssClass="slxbutton"  />
 
</asp:Panel>
      </td>
      </tr>
</table>
 

 <SalesLogix:SmartPartToolsContainer runat="server" ID="EditOpportunityProduct_RTools" ToolbarLocation="right">
  <SalesLogix:PageLink ID="lnkEditOpportunityProductHelp" runat="server" LinkType="HelpFileName" ToolTip="<%$ resources: Portal, Help_ToolTip %>" Target="MCWebHelp" NavigateUrl="addoppproduct.htm" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Help_16x16"></SalesLogix:PageLink> </SalesLogix:SmartPartToolsContainer>

<script runat="server" type="text/C#">
private Sage.Platform.Security.IRoleSecurityService _roleSecurityService;
/// <summary>
/// Gets or sets the role security service.
/// </summary>
/// <value>The role security service.</value>
[Sage.Platform.Application.ServiceDependency]
public Sage.Platform.Security.IRoleSecurityService RoleSecurityService
{
   set
      {
         _roleSecurityService = Sage.Platform.Application.ApplicationContext.Current.Services.Get<Sage.Platform.Security.IRoleSecurityService>(true);
      }
      get
      {
         return _roleSecurityService;
      }
}

public override Type EntityType
{
	get { return typeof(Sage.Entity.Interfaces.IOpportunityProduct); }
}

 

protected override void OnAddEntityBindings() { 
                    // txtSort.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtSortTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Sort", txtSort, "Text");
        BindingSource.Bindings.Add(txtSortTextBinding);
                       // txtName.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtNameTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Product.Name", txtName, "Text");
        BindingSource.Bindings.Add(txtNameTextBinding);
                       // txtProgram.PickListValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtProgramPickListValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Program", txtProgram, "PickListValue");
        BindingSource.Bindings.Add(txtProgramPickListValueBinding);
                       // curPrice.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding curPriceTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Price", curPrice, "Text");
        BindingSource.Bindings.Add(curPriceTextBinding);
                       // txtDiscount.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtDiscountTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Discount", txtDiscount, "Text");
        BindingSource.Bindings.Add(txtDiscountTextBinding);
                       // curCalculatedPrice.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding curCalculatedPriceTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("CalculatedPrice", curCalculatedPrice, "Text");
        BindingSource.Bindings.Add(curCalculatedPriceTextBinding);
                       // curMCCalcPrice.CurrentCode Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding curMCCalcPriceCurrentCodeBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Opportunity.ExchangeRateCode", curMCCalcPrice, "CurrentCode");
        curMCCalcPriceCurrentCodeBinding.IgnoreFLSDisabling = true;
        
        BindingSource.Bindings.Add(curMCCalcPriceCurrentCodeBinding);
                       // txtQuantity.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtQuantityTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Quantity", txtQuantity, "Text");
        BindingSource.Bindings.Add(txtQuantityTextBinding);
                       // curExtendedPrice.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding curExtendedPriceTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("ExtendedPrice", curExtendedPrice, "Text");
        BindingSource.Bindings.Add(curExtendedPriceTextBinding);
       
        
        
     
   
}
	   	   	   	   	   	   	   	   	   	   	   	   
protected void txtProgram_ChangeAction(object sender, EventArgs e) {
      object[] objarray = new object[] { this.BindingSource.Current };
     Sage.Platform.EntityFactory.Execute<Sage.Entity.Interfaces.IOpportunityProduct>("OpportunityProduct.CalcPriceFromProgramPrice", objarray);
          txtProgram_ChangeActionBRC(sender, e);
    
  
}
protected void txtProgram_ChangeActionBRC(object sender, EventArgs e) {
Sage.Platform.WebPortal.Services.IPanelRefreshService refresher = PageWorkItem.Services.Get<Sage.Platform.WebPortal.Services.IPanelRefreshService>();
if (refresher != null) {
  refresher.RefreshAll();
}
else {  
  Response.Redirect(Request.Url.ToString());
}
}
protected void txtDiscount_ChangeAction(object sender, EventArgs e) {
      object[] objarray = new object[] { this.BindingSource.Current };
     Sage.Platform.EntityFactory.Execute<Sage.Entity.Interfaces.IOpportunityProduct>("OpportunityProduct.CalculateDiscount", objarray);
          txtDiscount_ChangeActionBRC(sender, e);
    
  
}
protected void txtDiscount_ChangeActionBRC(object sender, EventArgs e) {
Sage.Platform.WebPortal.Services.IPanelRefreshService refresher = PageWorkItem.Services.Get<Sage.Platform.WebPortal.Services.IPanelRefreshService>();
if (refresher != null) {
  refresher.RefreshAll();
}
else {  
  Response.Redirect(Request.Url.ToString());
}
}
protected void curCalculatedPrice_ChangeAction(object sender, EventArgs e) {
      object[] objarray = new object[] { this.BindingSource.Current };
     Sage.Platform.EntityFactory.Execute<Sage.Entity.Interfaces.IOpportunityProduct>("OpportunityProduct.CalculateCalcPrice", objarray);
          curCalculatedPrice_ChangeActionBRC(sender, e);
    
  
}
protected void curCalculatedPrice_ChangeActionBRC(object sender, EventArgs e) {
Sage.Platform.WebPortal.Services.IPanelRefreshService refresher = PageWorkItem.Services.Get<Sage.Platform.WebPortal.Services.IPanelRefreshService>();
if (refresher != null) {
  refresher.RefreshAll();
}
else {  
  Response.Redirect(Request.Url.ToString());
}
}
protected void curMCCalcPrice_ChangeAction(object sender, EventArgs e) {
Sage.Platform.DynamicMethod.DynamicMethodLibrary lib = Sage.Platform.Orm.DynamicMethodLibraryHelper.Instance;
Object[] methodArgs = new Object[] { FormAdapter, e };
lib.Execute("EditOpportunityProduct.curMCCalcPrice_OnChange", methodArgs);
}
protected void txtQuantity_ChangeAction(object sender, EventArgs e) {
      object[] objarray = new object[] { this.BindingSource.Current };
     Sage.Platform.EntityFactory.Execute<Sage.Entity.Interfaces.IOpportunityProduct>("OpportunityProduct.CalculateExtendedPrice", objarray);
          txtQuantity_ChangeActionBRC(sender, e);
    
  
}
protected void txtQuantity_ChangeActionBRC(object sender, EventArgs e) {
Sage.Platform.WebPortal.Services.IPanelRefreshService refresher = PageWorkItem.Services.Get<Sage.Platform.WebPortal.Services.IPanelRefreshService>();
if (refresher != null) {
  refresher.RefreshAll();
}
else {  
  Response.Redirect(Request.Url.ToString());
}
}
protected void btnOK_ClickAction(object sender, EventArgs e) {
  Sage.Entity.Interfaces.IOpportunityProduct _entity = BindingSource.Current as Sage.Entity.Interfaces.IOpportunityProduct;
  if (_entity != null) 
  {
    object _parent = GetParentEntity(); 
    if (DialogService.ChildInsertInfo != null) 
    {
      if (_parent != null) 
      {
        if (DialogService.ChildInsertInfo.ParentReferenceProperty != null) 
        {
          DialogService.ChildInsertInfo.ParentReferenceProperty.SetValue(_entity, _parent, null);
        }        
      }
    }
    bool shouldSave = true;
    Sage.Platform.WebPortal.EntityPage page = Page as Sage.Platform.WebPortal.EntityPage;
	if (page != null)
	{
       if(IsInDialog() && page.ModeId.ToUpper() == "INSERT")
       {
         shouldSave = false;
       }
	}

    if(shouldSave)
    {
       _entity.Save();
    }
    
    if (_parent != null)
    {
        if (DialogService.ChildInsertInfo != null)
        {
           if (DialogService.ChildInsertInfo.ParentsCollectionProperty != null) 
           {
              System.Reflection.MethodInfo _add = DialogService.ChildInsertInfo.ParentsCollectionProperty.PropertyType.GetMethod("Add");
              _add.Invoke(DialogService.ChildInsertInfo.ParentsCollectionProperty.GetValue(_parent, null), new object[] { _entity });
           }
        }
     }        
  }
          btnOK_ClickActionBRC(sender, e);
    
  
}
protected void btnOK_ClickActionBRC(object sender, EventArgs e) {
Sage.Platform.WebPortal.Services.IPanelRefreshService refresher = PageWorkItem.Services.Get<Sage.Platform.WebPortal.Services.IPanelRefreshService>();
if (refresher != null) {
  refresher.RefreshAll();
}
else {  
  Response.Redirect(Request.Url.ToString());
}
}

protected override void OnWireEventHandlers()
{
 base.OnWireEventHandlers();
 txtProgram.PickListValueChanged += new EventHandler(txtProgram_ChangeAction);
txtDiscount.TextChanged += new EventHandler(txtDiscount_ChangeAction);
curCalculatedPrice.TextChanged += new EventHandler(curCalculatedPrice_ChangeAction);
curMCCalcPrice.TextChanged += new EventHandler(curMCCalcPrice_ChangeAction);
txtQuantity.TextChanged += new EventHandler(txtQuantity_ChangeAction);
btnOK.Click += new EventHandler(btnOK_ClickAction);
btnOK.Click += new EventHandler(DialogService.CloseEventHappened);
btnCancel.Click += new EventHandler(DialogService.CloseEventHappened);


}

protected void quickformload0(object sender, EventArgs e) {
Sage.SalesLogix.SystemInformation si = Sage.SalesLogix.SystemInformationRules.GetSystemInfo();
Sage.SalesLogix.Orm.Utility.DelphiStreamReader stream = new Sage.SalesLogix.Orm.Utility.DelphiStreamReader(si.Data);
Sage.SalesLogix.Orm.Utility.TValueType type;
if (stream.FindProperty("MultiCurrency", out type))
{
    if (type.Equals(Sage.SalesLogix.Orm.Utility.TValueType.vaTrue))
    {
        curMCCalcPrice.Visible = true;
        curMCCalcPrice_lbl.Visible = true;
        Sage.Entity.Interfaces.IOpportunityProduct oppProduct = BindingSource.Current as Sage.Entity.Interfaces.IOpportunityProduct;
        if (oppProduct != null)
        {
            curMCCalcPrice.ExchangeRate = oppProduct.Opportunity.ExchangeRate.GetValueOrDefault(1);
            curMCCalcPrice.CurrentCode = oppProduct.Opportunity.ExchangeRateCode;
			curMCCalcPrice.Text = oppProduct.CalculatedPrice.ToString();
        }
    }
    else
    {
        curMCCalcPrice.Visible = false;
        curMCCalcPrice_lbl.Visible = false;
    }
}
}
protected override void OnFormBound()
{
ClientBindingMgr.RegisterSaveButton(btnOK);

ScriptManager.RegisterStartupScript(Page, GetType(), "cleanupcontainer", "jQuery(\".controlslist > div:empty\").remove();", true);
ClientBindingMgr.RegisterDialogCancelButton(btnCancel);
quickformload0(this, EventArgs.Empty);


}



public override Sage.Platform.Application.UI.ISmartPartInfo GetSmartPartInfo(Type smartPartInfoType)
{
	ToolsSmartPartInfo tinfo = new ToolsSmartPartInfo();
    	if (BindingSource != null)
	{
		if (BindingSource.Current != null)
		{
			tinfo.Description = BindingSource.Current.ToString();
			tinfo.Title = BindingSource.Current.ToString();
		}
	}
    	
	foreach (Control c in Controls)
	{
		SmartPartToolsContainer cont = c as SmartPartToolsContainer;
		if (cont != null)
		{
			switch (cont.ToolbarLocation)
			{
				case SmartPartToolsLocation.Right:
					foreach (Control tool in cont.Controls)
					{
											tinfo.RightTools.Add(tool);
										}
					break;
				case SmartPartToolsLocation.Center:
					foreach (Control tool in cont.Controls)
					{
						tinfo.CenterTools.Add(tool);
					}
					break;
				case SmartPartToolsLocation.Left:
					foreach (Control tool in cont.Controls)
					{
						tinfo.LeftTools.Add(tool);
					}
					break;
			}
		}
	}
	
		return tinfo;
}

private Sage.Platform.Controls.IEntityForm _formAdapter;

public Sage.Platform.Controls.IEntityForm FormAdapter
{
	get { return _formAdapter ?? (_formAdapter = new EditOpportunityProductAdapter(this)); }
}

public class EditOpportunityProductAdapter : Sage.Platform.WebPortal.Adapters.EntityFormAdapter, Sage.Form.Interfaces.IEditOpportunityProduct
{
	public EditOpportunityProductAdapter(Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider smartPart)
		: base(smartPart) {}

	private Sage.Platform.Controls.ITextBoxControl _txtSort;
	public Sage.Platform.Controls.ITextBoxControl txtSort
	{
		get { return FindControl(ref _txtSort, "txtSort"); }
	}
	private Sage.Platform.Controls.ITextBoxControl _txtName;
	public Sage.Platform.Controls.ITextBoxControl txtName
	{
		get { return FindControl(ref _txtName, "txtName"); }
	}
	private Sage.Platform.Controls.IPickListControl _txtProgram;
	public Sage.Platform.Controls.IPickListControl txtProgram
	{
		get { return FindControl(ref _txtProgram, "txtProgram"); }
	}
	private Sage.Platform.Controls.ICurrencyControl _curPrice;
	public Sage.Platform.Controls.ICurrencyControl curPrice
	{
		get { return FindControl(ref _curPrice, "curPrice"); }
	}
	private Sage.Platform.Controls.ITextBoxControl _txtDiscount;
	public Sage.Platform.Controls.ITextBoxControl txtDiscount
	{
		get { return FindControl(ref _txtDiscount, "txtDiscount"); }
	}
	private Sage.Platform.Controls.ICurrencyControl _curCalculatedPrice;
	public Sage.Platform.Controls.ICurrencyControl curCalculatedPrice
	{
		get { return FindControl(ref _curCalculatedPrice, "curCalculatedPrice"); }
	}
	private Sage.Platform.Controls.ICurrencyControl _curMCCalcPrice;
	public Sage.Platform.Controls.ICurrencyControl curMCCalcPrice
	{
		get { return FindControl(ref _curMCCalcPrice, "curMCCalcPrice"); }
	}
	private Sage.Platform.Controls.ITextBoxControl _txtQuantity;
	public Sage.Platform.Controls.ITextBoxControl txtQuantity
	{
		get { return FindControl(ref _txtQuantity, "txtQuantity"); }
	}
	private Sage.Platform.Controls.ICurrencyControl _curExtendedPrice;
	public Sage.Platform.Controls.ICurrencyControl curExtendedPrice
	{
		get { return FindControl(ref _curExtendedPrice, "curExtendedPrice"); }
	}
	private Sage.Platform.Controls.IControlsListControl _QFControlsList;
	public Sage.Platform.Controls.IControlsListControl QFControlsList
	{
		get { return FindControl(ref _QFControlsList, "QFControlsList"); }
	}
	private Sage.Platform.Controls.IButtonControl _btnOK;
	public Sage.Platform.Controls.IButtonControl btnOK
	{
		get { return FindControl(ref _btnOK, "btnOK"); }
	}
	private Sage.Platform.Controls.IButtonControl _btnCancel;
	public Sage.Platform.Controls.IButtonControl btnCancel
	{
		get { return FindControl(ref _btnCancel, "btnCancel"); }
	}

	public void curMCCalcPrice_OnChange(System.EventArgs e)
	{
		Sage.Platform.DynamicMethod.DynamicMethodLibrary lib = Sage.Platform.Orm.DynamicMethodLibraryHelper.Instance;
		Object[] methodArgs = new Object[] { this, e };
		lib.Execute("EditOpportunityProduct.curMCCalcPrice_OnChange", methodArgs);
	}
}

</script>

<script type="text/javascript">
</script>
