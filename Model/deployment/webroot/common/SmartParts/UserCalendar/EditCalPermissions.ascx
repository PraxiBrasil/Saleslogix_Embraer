<%@ Control Language="C#" ClassName="EditCalPermissions" Inherits="Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider" %>
<%@ Register Assembly="Sage.SalesLogix.Client.GroupBuilder" Namespace="Sage.SalesLogix.Client.GroupBuilder" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.PickList" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.DependencyLookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Lookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Timeline" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.HighLevelTypes" Namespace="Sage.SalesLogix.HighLevelTypes" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.Platform.WebPortal" Namespace="Sage.Platform.WebPortal.SmartParts" TagPrefix="SalesLogix" %>
<%//------------------------------------------------------------------------
//This file was generated by a tool.  Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//------------------------------------------------------------------------ %>
<table border="0" cellpadding="1" cellspacing="0" class="formtable">
         <col width="100%" />
     <tr>
            <td  >
<asp:Label runat="server" ID="QFLabel" Text="<%$ resources: QFLabel.Text %>"  CssClass="padbottomlbl"  />

      </td>
      </tr>
<tr>
            <td  >
<div class="slxlabel  alignleft checkbox">
  <SalesLogix:SLXCheckBox runat="server" ID="AllowAdd" CssClass="checkbox "
 Text="<%$ resources: AllowAdd.Caption %>"  />
</div>
      </td>
      </tr>
<tr>
            <td  >
<div class="slxlabel  alignleft checkbox">
  <SalesLogix:SLXCheckBox runat="server" ID="AllowEdit" CssClass="checkbox "
 Text="<%$ resources: AllowEdit.Caption %>"  />
</div>
      </td>
      </tr>
<tr>
            <td  >
<div class="slxlabel  alignleft checkbox">
  <SalesLogix:SLXCheckBox runat="server" ID="AllowDelete" CssClass="checkbox "
 Text="<%$ resources: AllowDelete.Caption %>"  />
</div>
      </td>
      </tr>
<tr>
            <td  >
<div class="slxlabel  alignleft checkbox">
  <SalesLogix:SLXCheckBox runat="server" ID="AllowSync" CssClass="checkbox "
 Text="<%$ resources: AllowSync.Caption %>"  />
</div>
      </td>
      </tr>
<tr>
            <td  >
<asp:Panel runat="server" ID="QFControlsList" CssClass="controlslist qfActionContainer"
>
   <asp:Button runat="server" ID="btnOk"
 Text="<%$ resources: btnOk.Caption %>"  ToolTip="<%$ resources: btnOk.ToolTip %>" CssClass="slxbutton"  />
   
   <asp:Button runat="server" ID="btnCancel"
 Text="<%$ resources: btnCancel.Caption %>"  ToolTip="<%$ resources: btnCancel.ToolTip %>" CssClass="slxbutton"  />
 
</asp:Panel>
      </td>
      </tr>
</table>
 

 <SalesLogix:SmartPartToolsContainer runat="server" ID="EditCalPermissions_RTools" ToolbarLocation="right">
  <SalesLogix:PageLink ID="lnkEditCalPermissionsHelp" runat="server" LinkType="HelpFileName" ToolTip="<%$ resources: Portal, Help_ToolTip %>" Target="MCWebHelp" NavigateUrl="Managing_Calendar_Access_Rights" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Help_16x16"></SalesLogix:PageLink> </SalesLogix:SmartPartToolsContainer>

<script runat="server" type="text/C#">
private Sage.Platform.Security.IRoleSecurityService _roleSecurityService;
/// <summary>
/// Gets or sets the role security service.
/// </summary>
/// <value>The role security service.</value>
[Sage.Platform.Application.ServiceDependency]
public Sage.Platform.Security.IRoleSecurityService RoleSecurityService
{
   set
      {
         _roleSecurityService = Sage.Platform.Application.ApplicationContext.Current.Services.Get<Sage.Platform.Security.IRoleSecurityService>(true);
      }
      get
      {
         return _roleSecurityService;
      }
}

public override Type EntityType
{
	get { return typeof(Sage.Entity.Interfaces.IUserCalendar); }
}

 

protected override void OnAddEntityBindings() { 
    
                        // AllowAdd.Checked Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding AllowAddCheckedBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("AllowAdd", AllowAdd, "Checked");
        BindingSource.Bindings.Add(AllowAddCheckedBinding);
                       // AllowEdit.Checked Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding AllowEditCheckedBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("AllowEdit", AllowEdit, "Checked");
        BindingSource.Bindings.Add(AllowEditCheckedBinding);
                       // AllowDelete.Checked Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding AllowDeleteCheckedBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("AllowDelete", AllowDelete, "Checked");
        BindingSource.Bindings.Add(AllowDeleteCheckedBinding);
                       // AllowSync.Checked Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding AllowSyncCheckedBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("AllowSync", AllowSync, "Checked");
        BindingSource.Bindings.Add(AllowSyncCheckedBinding);
       
        
        
     
   
}
	   	   	   	   	   	   	   	   
protected void btnOk_ClickAction(object sender, EventArgs e) {
  Sage.Entity.Interfaces.IUserCalendar _entity = BindingSource.Current as Sage.Entity.Interfaces.IUserCalendar;
  if (_entity != null) 
  {
    object _parent = GetParentEntity(); 
    if (DialogService.ChildInsertInfo != null) 
    {
      if (_parent != null) 
      {
        if (DialogService.ChildInsertInfo.ParentReferenceProperty != null) 
        {
          DialogService.ChildInsertInfo.ParentReferenceProperty.SetValue(_entity, _parent, null);
        }        
      }
    }
    bool shouldSave = true;
    Sage.Platform.WebPortal.EntityPage page = Page as Sage.Platform.WebPortal.EntityPage;
	if (page != null)
	{
       if(IsInDialog() && page.ModeId.ToUpper() == "INSERT")
       {
         shouldSave = false;
       }
	}

    if(shouldSave)
    {
       _entity.Save();
    }
    
    if (_parent != null)
    {
        if (DialogService.ChildInsertInfo != null)
        {
           if (DialogService.ChildInsertInfo.ParentsCollectionProperty != null) 
           {
              System.Reflection.MethodInfo _add = DialogService.ChildInsertInfo.ParentsCollectionProperty.PropertyType.GetMethod("Add");
              _add.Invoke(DialogService.ChildInsertInfo.ParentsCollectionProperty.GetValue(_parent, null), new object[] { _entity });
           }
        }
     }        
  }
          btnOk_ClickActionBRC(sender, e);
    
  
}
protected void btnOk_ClickActionBRC(object sender, EventArgs e) {
Sage.Platform.WebPortal.Services.IPanelRefreshService refresher = PageWorkItem.Services.Get<Sage.Platform.WebPortal.Services.IPanelRefreshService>();
if (refresher != null) {
  refresher.RefreshAll();
}
else {  
  Response.Redirect(Request.Url.ToString());
}
}
protected void btnCancel_ClickAction(object sender, EventArgs e) {
  
}

protected override void OnWireEventHandlers()
{
 base.OnWireEventHandlers();
 btnOk.Click += new EventHandler(btnOk_ClickAction);
btnOk.Click += new EventHandler(DialogService.CloseEventHappened);
btnOk.Click += new EventHandler(Refresh);
btnCancel.Click += new EventHandler(btnCancel_ClickAction);
btnCancel.Click += new EventHandler(DialogService.CloseEventHappened);


}

protected override void OnFormBound()
{
ClientBindingMgr.RegisterSaveButton(btnOk);

ScriptManager.RegisterStartupScript(Page, GetType(), "cleanupcontainer", "jQuery(\".controlslist > div:empty\").remove();", true);
if (ClientBindingMgr != null) { ClientBindingMgr.RegisterResetButton(btnCancel); }
ClientBindingMgr.RegisterDialogCancelButton(btnCancel);


}



public override Sage.Platform.Application.UI.ISmartPartInfo GetSmartPartInfo(Type smartPartInfoType)
{
	ToolsSmartPartInfo tinfo = new ToolsSmartPartInfo();
    	
	foreach (Control c in Controls)
	{
		SmartPartToolsContainer cont = c as SmartPartToolsContainer;
		if (cont != null)
		{
			switch (cont.ToolbarLocation)
			{
				case SmartPartToolsLocation.Right:
					foreach (Control tool in cont.Controls)
					{
											tinfo.RightTools.Add(tool);
										}
					break;
				case SmartPartToolsLocation.Center:
					foreach (Control tool in cont.Controls)
					{
						tinfo.CenterTools.Add(tool);
					}
					break;
				case SmartPartToolsLocation.Left:
					foreach (Control tool in cont.Controls)
					{
						tinfo.LeftTools.Add(tool);
					}
					break;
			}
		}
	}
	
		return tinfo;
}

private Sage.Platform.Controls.IEntityForm _formAdapter;

public Sage.Platform.Controls.IEntityForm FormAdapter
{
	get { return _formAdapter ?? (_formAdapter = new EditCalPermissionsAdapter(this)); }
}

public class EditCalPermissionsAdapter : Sage.Platform.WebPortal.Adapters.EntityFormAdapter, Sage.Form.Interfaces.IEditCalPermissions
{
	public EditCalPermissionsAdapter(Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider smartPart)
		: base(smartPart) {}

	private Sage.Platform.Controls.ILabelControl _QFLabel;
	public Sage.Platform.Controls.ILabelControl QFLabel
	{
		get { return FindControl(ref _QFLabel, "QFLabel"); }
	}
	private Sage.Platform.Controls.ICheckBoxControl _AllowAdd;
	public Sage.Platform.Controls.ICheckBoxControl AllowAdd
	{
		get { return FindControl(ref _AllowAdd, "AllowAdd"); }
	}
	private Sage.Platform.Controls.ICheckBoxControl _AllowEdit;
	public Sage.Platform.Controls.ICheckBoxControl AllowEdit
	{
		get { return FindControl(ref _AllowEdit, "AllowEdit"); }
	}
	private Sage.Platform.Controls.ICheckBoxControl _AllowDelete;
	public Sage.Platform.Controls.ICheckBoxControl AllowDelete
	{
		get { return FindControl(ref _AllowDelete, "AllowDelete"); }
	}
	private Sage.Platform.Controls.ICheckBoxControl _AllowSync;
	public Sage.Platform.Controls.ICheckBoxControl AllowSync
	{
		get { return FindControl(ref _AllowSync, "AllowSync"); }
	}
	private Sage.Platform.Controls.IControlsListControl _QFControlsList;
	public Sage.Platform.Controls.IControlsListControl QFControlsList
	{
		get { return FindControl(ref _QFControlsList, "QFControlsList"); }
	}
	private Sage.Platform.Controls.IButtonControl _btnOk;
	public Sage.Platform.Controls.IButtonControl btnOk
	{
		get { return FindControl(ref _btnOk, "btnOk"); }
	}
	private Sage.Platform.Controls.IButtonControl _btnCancel;
	public Sage.Platform.Controls.IButtonControl btnCancel
	{
		get { return FindControl(ref _btnCancel, "btnCancel"); }
	}

}

</script>

<script type="text/javascript">
</script>
