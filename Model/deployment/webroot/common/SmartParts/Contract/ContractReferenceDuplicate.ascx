<%@ Control Language="C#" ClassName="ContractReferenceDuplicate" Inherits="Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider" %>
<%@ Register Assembly="Sage.SalesLogix.Client.GroupBuilder" Namespace="Sage.SalesLogix.Client.GroupBuilder" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.PickList" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.DependencyLookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Lookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Timeline" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.HighLevelTypes" Namespace="Sage.SalesLogix.HighLevelTypes" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.Platform.WebPortal" Namespace="Sage.Platform.WebPortal.SmartParts" TagPrefix="SalesLogix" %>
<%//------------------------------------------------------------------------
//This file was generated by a tool.  Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//------------------------------------------------------------------------ %>
<table border="0" cellpadding="1" cellspacing="0" class="formtable">
         <col width="60%" />
            <col width="40%" />
     <tr>
            <td  colspan="2" >
 <div class="slxlabel"><asp:Label runat="server" ID="lblReference" Text="<%$ resources: lblReference.Text %>"  />
</div>
      </td>
            </tr>
<tr>
            <td  >
<SalesLogix:SlxGridView runat="server" ID="grdDuplicates" GridLines="None"
AutoGenerateColumns="false" CellPadding="4" CssClass="datagrid" PagerStyle-CssClass="gridPager"
AlternatingRowStyle-CssClass="rowdk" RowStyle-CssClass="rowlt" SelectedRowStyle-CssClass="rowSelected" ShowEmptyTable="true" EnableViewState="false"
 AllowPaging="true" PageSize="10" OnPageIndexChanging="grdDuplicatespage_changing" EmptyTableRowText="<%$ resources: grdDuplicates.EmptyTableRowText %>"  ExpandableRows="True" ResizableColumns="True"  OnRowCommand="grdDuplicates_RowCommand" 
 DataKeyNames="InstanceId,Id" 
 AllowSorting="true" OnSorting="grdDuplicates_Sorting"  ShowSortIcon="true" >
<Columns>
 <asp:CommandField ShowSelectButton="true"
  SelectText="<%$ resources: grdDuplicates.447c06d3-7529-461c-bae8-a04aafb75700.Text %>" ButtonType="link" 
             >
  	    </asp:CommandField>
    <asp:BoundField DataField="Account" 
      HeaderText="<%$ resources: grdDuplicates.c71b0a3a-f6a8-427a-b0c0-3f0c26ae6c6e.ColumnHeading %>"       SortExpression="Account"    >
      </asp:BoundField>
    <asp:BoundField DataField="IsActive" 
      HeaderText="<%$ resources: grdDuplicates.09f8ccb9-df70-46bd-9325-59939ee38d4b.ColumnHeading %>"       SortExpression="IsActive"    >
      </asp:BoundField>
    <asp:TemplateField   HeaderText="<%$ resources: grdDuplicates.7bd97230-cde2-4413-9c8d-2dcb8d1367e7.ColumnHeading %>"        >
    <itemtemplate>
   <SalesLogix:PickListControl runat="server" ID="grdDuplicatescol4" PickListId="" ValueStoredAsText="False" PickListName="Contract Service Type" PickListValue='<%#  dtsDuplicates.getPropertyValue(Container.DataItem, "ServiceCode")  %>' DisplayMode="AsText" CssClass="" />
   </itemtemplate></asp:TemplateField>
    <asp:TemplateField   HeaderText="<%$ resources: grdDuplicates.8d0bc154-07bb-410b-afee-bc62c7992e25.ColumnHeading %>"        >
    <itemtemplate>
   <SalesLogix:PickListControl runat="server" ID="grdDuplicatescol5" PickListId="" ValueStoredAsText="False" PickListName="Contact Type" PickListValue='<%#  dtsDuplicates.getPropertyValue(Container.DataItem, "TypeCode")  %>' DisplayMode="AsText" CssClass="" />
   </itemtemplate></asp:TemplateField>
 </Columns>
    <PagerSettings Mode="NumericFirstLast" FirstPageImageUrl="ImageResource.axd?scope=global&type=Global_Images&key=Start_16x16" LastPageImageUrl="ImageResource.axd?scope=global&type=Global_Images&key=End_16x16" />
</SalesLogix:SlxGridView>

<script runat="server" type="text/C#">


protected void grdDuplicatespage_changing(object sender, GridViewPageEventArgs e)
{
 grdDuplicates.PageIndex = e.NewPageIndex;
 grdDuplicates.DataBind();
}
protected void grdDuplicates_Sorting(object sender, GridViewSortEventArgs e) { }
protected void grdDuplicates_RowCommand(object sender, GridViewCommandEventArgs e)
{
    if (e.CommandName == "Page")
        return;
    int rowIndex;
    if (Int32.TryParse(e.CommandArgument.ToString(), out rowIndex))
    {
        dtsDuplicates.SelectedIndex = rowIndex;
		object currentEntity = dtsDuplicates.Current;
        if ((currentEntity is Sage.Platform.ComponentModel.ComponentView) && !((Sage.Platform.ComponentModel.ComponentView)currentEntity).IsVirtualComponent)
            currentEntity = ((Sage.Platform.ComponentModel.ComponentView)currentEntity).Component;
		string id = String.Empty;
        //Check if this is an unpersisted entity and use its InstanceId
        if (Sage.Platform.WebPortal.PortalUtil.ObjectIsNewEntity(currentEntity))
        {
		    if (grdDuplicates.DataKeys[0].Values.Count > 1) {
                foreach (DictionaryEntry val in grdDuplicates.DataKeys[rowIndex].Values)
                {
                    if (val.Key.ToString() == "InstanceId")
                    {
                        Guid instanceId = (Guid)val.Value;
                        dtsDuplicates.SetCurrentEntityByInstanceId(instanceId);
                        id = instanceId.ToString();
		                currentEntity = dtsDuplicates.Current;
                        if ((currentEntity is Sage.Platform.ComponentModel.ComponentView) && !((Sage.Platform.ComponentModel.ComponentView)currentEntity).IsVirtualComponent)
                            currentEntity = ((Sage.Platform.ComponentModel.ComponentView)currentEntity).Component;
                    }
                }                 
            }
        }
        else
        {
            foreach (DictionaryEntry val in grdDuplicates.DataKeys[rowIndex].Values)
            {
                if (val.Key.ToString() != "InstanceId")
                {
                    id = val.Value.ToString();
                }
            }
        }		
	}
    grdDuplicates_refresh();
}
	
	protected void grdDuplicates_refresh()
	{
		if (PageWorkItem != null) {
			Sage.Platform.WebPortal.Services.IPanelRefreshService refresher = PageWorkItem.Services.Get<Sage.Platform.WebPortal.Services.IPanelRefreshService>();
			if (refresher != null)
			{
				refresher.RefreshAll();
			}
			else
			{
				Response.Redirect(Request.Url.ToString());
			}
		}
	}
	
        </script>

      </td>
                <td  >
 <div class="lbltop alignleft">
   <asp:Label ID="txtComments_lbl" AssociatedControlID="txtComments" runat="server" Text="<%$ resources: txtComments.Caption %>" ></asp:Label>
 </div>
  <div  class="twocoltextcontrol"   >
<asp:TextBox runat="server" ID="txtComments" Enabled="false" ReadOnly="true" Rows="4"
TextMode="MultiLine" Columns="40"
 />
  </div>

      </td>
      </tr>
<tr>
            <td  colspan="2" >
<fieldset class="slxlabel radio" style="width: 75%;" >
<asp:RadioButtonList runat="server" ID="rdgOptions" RepeatDirection="Vertical"  >
<asp:ListItem Text="<%$ resources: rdgOptions_item0.Text %>"
Value="ReEnter"
 />
<asp:ListItem Text="<%$ resources: rdgOptions_item1.Text %>"
Value="duplicate"
 />
</asp:RadioButtonList>
</fieldset>
      </td>
            </tr>
<tr>
            <td></td>
                <td  >
<asp:Panel runat="server" ID="ctrlstButtons" CssClass="controlslist qfActionContainer"
>
   <asp:Button runat="server" ID="cmdOK"
 Text="<%$ resources: cmdOK.Caption %>"  />
 
   <asp:Button runat="server" ID="cmdCancel"
 Text="<%$ resources: cmdCancel.Caption %>"  />
 
</asp:Panel>
      </td>
      </tr>
</table>
 

 <SalesLogix:SmartPartToolsContainer runat="server" ID="ContractReferenceDuplicate_RTools" ToolbarLocation="right">
    <asp:ImageButton runat="server" ID="cmdHelp"
ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Help_16x16"  />
 
  <SalesLogix:PageLink ID="lnkContractReferenceDuplicateHelp" runat="server" LinkType="HelpFileName" ToolTip="<%$ resources: Portal, Help_ToolTip %>" Target="MCWebHelp" NavigateUrl="contractrefnumberdupe.htm" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Help_16x16"></SalesLogix:PageLink> </SalesLogix:SmartPartToolsContainer>

<script runat="server" type="text/C#">
private Sage.Platform.Security.IRoleSecurityService _roleSecurityService;
/// <summary>
/// Gets or sets the role security service.
/// </summary>
/// <value>The role security service.</value>
[Sage.Platform.Application.ServiceDependency]
public Sage.Platform.Security.IRoleSecurityService RoleSecurityService
{
   set
      {
         _roleSecurityService = Sage.Platform.Application.ApplicationContext.Current.Services.Get<Sage.Platform.Security.IRoleSecurityService>(true);
      }
      get
      {
         return _roleSecurityService;
      }
}

public override Type EntityType
{
	get { return typeof(Sage.Entity.Interfaces.IContract); }
}

 private Sage.Platform.WebPortal.Binding.WebEntityListBindingSource _dtsDuplicates;
public Sage.Platform.WebPortal.Binding.WebEntityListBindingSource dtsDuplicates
{ 
  get 
  {
    if (_dtsDuplicates == null)
    {
             _dtsDuplicates = new Sage.Platform.WebPortal.Binding.WebEntityListBindingSource(typeof(Sage.Entity.Interfaces.IContract), 
	    EntityType                     ,"GetDuplicateContracts", System.Reflection.MemberTypes.Method);
            	   	}
 	return _dtsDuplicates;
  }
}

void dtsDuplicates_OnCurrentEntitySet(object sender, EventArgs e) 
{
      if (Visible)
    { 
		if(BindingSource.Current != null)
		{
		
      
        dtsDuplicates.SourceObject = BindingSource.Current;
   		}
    }
   if (Visible)
   {   
      RegisterBindingsWithClient(dtsDuplicates);
   }
}

 



 

protected override void OnAddEntityBindings() { 
    
           dtsDuplicates.Bindings.Add(new Sage.Platform.WebPortal.Binding.WebEntityListBinding("GetDuplicateContracts()", grdDuplicates ));
   dtsDuplicates.BindFieldNames = new String[] { "Id","Account","IsActive","ServiceCode","TypeCode","Notes" };
                        // txtComments.Text Binding 
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtCommentsTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Notes", txtComments, "Text");
        dtsDuplicates.Bindings.Add(txtCommentsTextBinding);
       
        
        
        
     
     BindingSource.OnCurrentEntitySet += new EventHandler(dtsDuplicates_OnCurrentEntitySet);
     
    }
	   	   	   	   	   	   	   
protected void cmdOK_ClickAction(object sender, EventArgs e) {
if (rdgOptions.SelectedIndex == 1)
{
	Sage.Entity.Interfaces.IContract contract = BindingSource.Current as Sage.Entity.Interfaces.IContract;
	if (contract != null)
	{
		contract.Save();
        if (!String.IsNullOrEmpty(contract.Id.ToString()))
        {
            Response.Redirect(string.Format("Contract.aspx?entityId={0}", (contract.Id.ToString())));
        }
	}
}
}

protected override void OnWireEventHandlers()
{
 base.OnWireEventHandlers();
 cmdOK.Click += new EventHandler(cmdOK_ClickAction);
cmdOK.Click += new EventHandler(DialogService.CloseEventHappened);
cmdCancel.Click += new EventHandler(DialogService.CloseEventHappened);


}

protected void quickformload0(object sender, EventArgs e) {
Sage.Entity.Interfaces.IContract contract = this.BindingSource.Current as Sage.Entity.Interfaces.IContract;
if (contract != null)
{
	lblReference.Text = String.Format(GetLocalResourceObject("lblReference.Text").ToString(), contract.ReferenceNumber);
}


}
private bool _runActivating;
protected override void OnActivating()
{
_runActivating = true;
}
private void DoActivating()
{
quickformload0(this, EventArgs.Empty);

}
protected override void OnFormBound()
{
Sage.Platform.WebPortal.EntityPage epage = Page as Sage.Platform.WebPortal.EntityPage;
        if (epage != null)
            _runActivating = (epage.IsNewEntity || _runActivating);
if (_runActivating) DoActivating();
ScriptManager.RegisterStartupScript(Page, GetType(), "cleanupcontainer", "jQuery(\".controlslist > div:empty\").remove();", true);
if (dtsDuplicates.SourceObject == null) { dtsDuplicates.SourceObject = BindingSource.Current; }
if (dtsDuplicates.SourceObject == null) { RegisterBindingsWithClient(dtsDuplicates); }
dtsDuplicates.Bind( true );



}



public override Sage.Platform.Application.UI.ISmartPartInfo GetSmartPartInfo(Type smartPartInfoType)
{
	ToolsSmartPartInfo tinfo = new ToolsSmartPartInfo();
    	
	foreach (Control c in Controls)
	{
		SmartPartToolsContainer cont = c as SmartPartToolsContainer;
		if (cont != null)
		{
			switch (cont.ToolbarLocation)
			{
				case SmartPartToolsLocation.Right:
					foreach (Control tool in cont.Controls)
					{
											tinfo.RightTools.Add(tool);
										}
					break;
				case SmartPartToolsLocation.Center:
					foreach (Control tool in cont.Controls)
					{
						tinfo.CenterTools.Add(tool);
					}
					break;
				case SmartPartToolsLocation.Left:
					foreach (Control tool in cont.Controls)
					{
						tinfo.LeftTools.Add(tool);
					}
					break;
			}
		}
	}
	
		return tinfo;
}

private Sage.Platform.Controls.IEntityForm _formAdapter;

public Sage.Platform.Controls.IEntityForm FormAdapter
{
	get { return _formAdapter ?? (_formAdapter = new ContractReferenceDuplicateAdapter(this)); }
}

public class ContractReferenceDuplicateAdapter : Sage.Platform.WebPortal.Adapters.EntityFormAdapter, Sage.Form.Interfaces.IContractReferenceDuplicate
{
	public ContractReferenceDuplicateAdapter(Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider smartPart)
		: base(smartPart) {}

	private Sage.Platform.Controls.ILabelControl _lblReference;
	public Sage.Platform.Controls.ILabelControl lblReference
	{
		get { return FindControl(ref _lblReference, "lblReference"); }
	}
	private Sage.Platform.Controls.IDataGridControl _grdDuplicates;
	public Sage.Platform.Controls.IDataGridControl grdDuplicates
	{
		get { return FindControl(ref _grdDuplicates, "grdDuplicates"); }
	}
	private Sage.Platform.Controls.IRadioGroupControl _rdgOptions;
	public Sage.Platform.Controls.IRadioGroupControl rdgOptions
	{
		get { return FindControl(ref _rdgOptions, "rdgOptions"); }
	}
	private Sage.Platform.Controls.ITextBoxControl _txtComments;
	public Sage.Platform.Controls.ITextBoxControl txtComments
	{
		get { return FindControl(ref _txtComments, "txtComments"); }
	}
	private Sage.Platform.Controls.IControlsListControl _ctrlstButtons;
	public Sage.Platform.Controls.IControlsListControl ctrlstButtons
	{
		get { return FindControl(ref _ctrlstButtons, "ctrlstButtons"); }
	}
	private Sage.Platform.Controls.IButtonControl _cmdOK;
	public Sage.Platform.Controls.IButtonControl cmdOK
	{
		get { return FindControl(ref _cmdOK, "cmdOK"); }
	}
	private Sage.Platform.Controls.IButtonControl _cmdCancel;
	public Sage.Platform.Controls.IButtonControl cmdCancel
	{
		get { return FindControl(ref _cmdCancel, "cmdCancel"); }
	}
	private Sage.Platform.Controls.IDataSourceControl _dtsDuplicates;
	public Sage.Platform.Controls.IDataSourceControl dtsDuplicates
	{
		get { return FindControl(ref _dtsDuplicates, "dtsDuplicates"); }
	}
	private Sage.Platform.Controls.IButtonControl _cmdHelp;
	public Sage.Platform.Controls.IButtonControl cmdHelp
	{
		get { return FindControl(ref _cmdHelp, "cmdHelp"); }
	}

}

</script>

<script type="text/javascript">
</script>
