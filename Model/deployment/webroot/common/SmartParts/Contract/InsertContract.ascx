<%@ Control Language="C#" ClassName="InsertContract" Inherits="Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider" %>
<%@ Register Assembly="Sage.SalesLogix.Client.GroupBuilder" Namespace="Sage.SalesLogix.Client.GroupBuilder" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.PickList" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.DependencyLookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Lookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Timeline" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.HighLevelTypes" Namespace="Sage.SalesLogix.HighLevelTypes" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.Platform.WebPortal" Namespace="Sage.Platform.WebPortal.SmartParts" TagPrefix="SalesLogix" %>
<%//------------------------------------------------------------------------
//This file was generated by a tool.  Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//------------------------------------------------------------------------ %>
<table border="0" cellpadding="1" cellspacing="0" class="formtable">
         <col width="33%" />
            <col width="33%" />
            <col width="33%" />
     <tr>
            <td  >
 <div class=" lbl alignleft" >
   <asp:Label ID="txtReference_lbl" AssociatedControlID="txtReference" runat="server" Text="<%$ resources: txtReference.Caption %>" ></asp:Label>
 </div>
  <div  class="textcontrol"   >
<asp:TextBox runat="server" ID="txtReference" Rows="1"
 />
  </div>

      </td>
                <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="pklService_lbl" AssociatedControlID="pklService" runat="server" Text="<%$ resources: pklService.Caption %>" ></asp:Label>
 </div>   
   <div  class="textcontrol picklist"  > 
    <SalesLogix:PickListControl runat="server" ID="pklService" PickListId="kSYST0000359" PickListName="Contract Service Type" StorageMode="ID"  />
  </div>

      </td>
                <td  >
 <div class=" lbl alignleft" >
   <asp:Label ID="txtPONumber_lbl" AssociatedControlID="txtPONumber" runat="server" Text="<%$ resources: txtPONumber.Caption %>" ></asp:Label>
 </div>
  <div  class="textcontrol"   >
<asp:TextBox runat="server" ID="txtPONumber" Rows="1"
 />
  </div>

      </td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="lueAccount_lbl" AssociatedControlID="lueAccount" runat="server" Text="<%$ resources: lueAccount.Caption %>" ></asp:Label>
 </div>   
  <div  class="textcontrol lookup"  >
<SalesLogix:LookupControl runat="server" ID="lueAccount" ButtonToolTip="<%$ resources: lueAccount.ButtonToolTip %>" LookupEntityName="Account" LookupEntityTypeName="Sage.Entity.Interfaces.IAccount, Sage.Entity.Interfaces, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" AutoPostBack="true"  >
<LookupProperties>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueAccount.LookupProperties.AccountName.PropertyHeader %>" PropertyName="AccountName" PropertyType="" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueAccount.LookupProperties.Address.City.PropertyHeader %>" PropertyName="Address.City" PropertyType="" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueAccount.LookupProperties.Address.State.PropertyHeader %>" PropertyName="Address.State" PropertyType="" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueAccount.LookupProperties.MainPhone.PropertyHeader %>" PropertyName="MainPhone" PropertyType="System.String" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueAccount.LookupProperties.Type.PropertyHeader %>" PropertyName="Type" PropertyType="" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueAccount.LookupProperties.SubType.PropertyHeader %>" PropertyName="SubType" PropertyType="System.String" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueAccount.LookupProperties.Status.PropertyHeader %>" PropertyName="Status" PropertyType="System.String" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueAccount.LookupProperties.AccountManager.UserInfo.UserName.PropertyHeader %>" PropertyName="AccountManager.UserInfo.UserName" PropertyType="" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="True"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueAccount.LookupProperties.Owner.OwnerDescription.PropertyHeader %>" PropertyName="Owner.OwnerDescription" PropertyType="" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="True"></SalesLogix:LookupProperty>
</LookupProperties>
<LookupPreFilters>
</LookupPreFilters>
</SalesLogix:LookupControl>
  </div>

      </td>
                <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="pklType_lbl" AssociatedControlID="pklType" runat="server" Text="<%$ resources: pklType.Caption %>" ></asp:Label>
 </div>   
   <div  class="textcontrol picklist"  > 
    <SalesLogix:PickListControl runat="server" ID="pklType" PickListId="kSYST0000360" PickListName="Contract Type" AutoPostBack="true" NoneEditable="true" StorageMode="ID"  />
  </div>

      </td>
                <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="dtpPurchaseDate_lbl" AssociatedControlID="dtpPurchaseDate" runat="server" Text="<%$ resources: dtpPurchaseDate.Caption %>" ></asp:Label>
 </div>
   <div  class="textcontrol datepicker"  >
    <SalesLogix:DateTimePicker runat="server" ID="dtpPurchaseDate" ButtonToolTip="<%$ resources: dtpPurchaseDate.ButtonToolTip %>" />
  </div>

      </td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="lueContact_lbl" AssociatedControlID="lueContact" runat="server" Text="<%$ resources: lueContact.Caption %>" ></asp:Label>
 </div>   
  <div  class="textcontrol lookup"  >
<SalesLogix:LookupControl runat="server" ID="lueContact" ButtonToolTip="<%$ resources: lueContact.ButtonToolTip %>" LookupEntityName="Contact" LookupEntityTypeName="Sage.Entity.Interfaces.IContact, Sage.Entity.Interfaces, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" SeedProperty="Account.Id" AutoPostBack="true"  >
<LookupProperties>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueContact.LookupProperties.NameLF.PropertyHeader %>" PropertyName="NameLF" PropertyType="" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueContact.LookupProperties.AccountName.PropertyHeader %>" PropertyName="AccountName" PropertyType="" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueContact.LookupProperties.Address.City.PropertyHeader %>" PropertyName="Address.City" PropertyType="System.String" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueContact.LookupProperties.Address.State.PropertyHeader %>" PropertyName="Address.State" PropertyType="System.String" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueContact.LookupProperties.WorkPhone.PropertyHeader %>" PropertyName="WorkPhone" PropertyType="" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueContact.LookupProperties.Email.PropertyHeader %>" PropertyName="Email" PropertyType="System.String" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
</LookupProperties>
<LookupPreFilters>
</LookupPreFilters>
</SalesLogix:LookupControl>
  </div>

      </td>
                <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="dtpStartDate_lbl" AssociatedControlID="dtpStartDate" runat="server" Text="<%$ resources: dtpStartDate.Caption %>" ></asp:Label>
 </div>
   <div  class="textcontrol datepicker"  >
    <SalesLogix:DateTimePicker runat="server" ID="dtpStartDate" ButtonToolTip="<%$ resources: dtpStartDate.ButtonToolTip %>" AutoPostBack="true" />
  </div>

      </td>
                <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="curListPrice_lbl" AssociatedControlID="curListPrice" runat="server" Text="<%$ resources: curListPrice.Caption %>" ></asp:Label>
 </div>
   <div  class="textcontrol currency"  >
    <SalesLogix:Currency runat="server" ID="curListPrice" ExchangeRateType="BaseRate"
AutoPostBack="true"  />
</div>

      </td>
      </tr>
<tr>
            <td  >
<div class="slxlabel  alignleft checkbox">
  <SalesLogix:SLXCheckBox runat="server" ID="chkActive" CssClass="checkbox "
 Text="<%$ resources: chkActive.Caption %>"  />
</div>
      </td>
                <td  >
<div class="slxlabel  alignleft checkbox">
  <SalesLogix:SLXCheckBox runat="server" ID="chkFirst" CssClass="checkbox "
 Text="<%$ resources: chkFirst.Caption %>" Enabled="false" AutoPostBack="true"  />
</div>
      </td>
                <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="curDiscount_lbl" AssociatedControlID="curDiscount" runat="server" Text="<%$ resources: curDiscount.Caption %>" ></asp:Label>
 </div>
   <div  class="textcontrol currency"  >
    <SalesLogix:Currency runat="server" ID="curDiscount" ExchangeRateType="BaseRate"
AutoPostBack="true"  />
</div>

      </td>
      </tr>
<tr>
            <td rowspan="3"  >
<asp:Panel runat="server" ID="ctrlstComments" CssClass="controlslist "
>
   <div class=" lbl alignleft" >
   <asp:Label ID="txtComments_lbl" AssociatedControlID="txtComments" runat="server" Text="<%$ resources: txtComments.Caption %>" ></asp:Label>
 </div>
  <div  class="textcontrol"   >
<asp:TextBox runat="server" ID="txtComments" Rows="4"
TextMode="MultiLine" Columns="40"
 />
  </div>

   <asp:ImageButton runat="server" ID="cmdDateStamp"
 AlternateText="<%$ resources: cmdDateStamp.Caption %>"  ToolTip="<%$ resources: cmdDateStamp.ToolTip %>" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=User_Date_Stamp_16x16"  />
 
</asp:Panel>
      </td>
                <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="dtpExpiration_lbl" AssociatedControlID="dtpExpiration" runat="server" Text="<%$ resources: dtpExpiration.Caption %>" ></asp:Label>
 </div>
   <div  class="textcontrol datepicker"  >
    <SalesLogix:DateTimePicker runat="server" ID="dtpExpiration" ButtonToolTip="<%$ resources: dtpExpiration.ButtonToolTip %>" AutoPostBack="true" />
  </div>

      </td>
                <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="curAmount_lbl" AssociatedControlID="curAmount" runat="server" Text="<%$ resources: curAmount.Caption %>" ></asp:Label>
 </div>
   <div  class="textcontrol currency"  >
    <SalesLogix:Currency runat="server" ID="curAmount" ExchangeRateType="BaseRate"
AutoPostBack="true"  />
</div>

      </td>
      </tr>
<tr>
                  <td  >
 <div class=" lbl alignleft" >
   <asp:Label ID="txtGraceDays_lbl" AssociatedControlID="txtGraceDays" runat="server" Text="<%$ resources: txtGraceDays.Caption %>" ></asp:Label>
 </div>
  <div  class="textcontrol"   >
<asp:TextBox runat="server" ID="txtGraceDays" Rows="1"
 />
  </div>

      </td>
                <td></td>
      </tr>
<tr>
                  <td  >
<asp:Panel runat="server" ID="ctrlstQuantity" CssClass="controlslist "
>
   <div class=" lbl alignleft" >
   <asp:Label ID="txtQuantity_lbl" AssociatedControlID="txtQuantity" runat="server" Text="<%$ resources: txtQuantity.Caption %>" ></asp:Label>
 </div>
  <div  class="textcontrol"   >
<asp:TextBox runat="server" ID="txtQuantity" Rows="1"
AutoPostBack="true"  />
  </div>

   <div class=" lbl alignleft">
   <asp:Label ID="curQuantity_lbl" AssociatedControlID="curQuantity" runat="server" Text="<%$ resources: curQuantity.Caption %>" Visible="false" ></asp:Label>
 </div>
   <div  class="textcontrol currency"  >
    <SalesLogix:Currency runat="server" ID="curQuantity" ExchangeRateType="BaseRate"
Visible="false" AutoPostBack="true"  />
</div>

   <div class=" lbl alignleft">
   <asp:Label ID="numQuantity_lbl" AssociatedControlID="numQuantity" runat="server" Text="<%$ resources: numQuantity.Caption %>" Visible="false" ></asp:Label>
 </div>   
   <div  class="textcontrol numeric"  > 
    <SalesLogix:NumericControl runat="server" ID="numQuantity"
Visible="false" AutoPostBack="true"  />
  </div>

</asp:Panel>
      </td>
                <td></td>
      </tr>
</table>
 

 <SalesLogix:SmartPartToolsContainer runat="server" ID="InsertContract_RTools" ToolbarLocation="right">
    <asp:ImageButton runat="server" ID="cmdSave"
 AlternateText="<%$ resources: cmdSave.Caption %>"  ToolTip="<%$ resources: cmdSave.ToolTip %>" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Save_16x16"  />
   
  <SalesLogix:PageLink ID="lnkInsertContractHelp" runat="server" LinkType="HelpFileName" ToolTip="<%$ resources: Portal, Help_ToolTip %>" Target="MCWebHelp" NavigateUrl="contractadd.htm" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Help_16x16"></SalesLogix:PageLink> </SalesLogix:SmartPartToolsContainer>

<script runat="server" type="text/C#">
private Sage.Platform.Security.IRoleSecurityService _roleSecurityService;
/// <summary>
/// Gets or sets the role security service.
/// </summary>
/// <value>The role security service.</value>
[Sage.Platform.Application.ServiceDependency]
public Sage.Platform.Security.IRoleSecurityService RoleSecurityService
{
   set
      {
         _roleSecurityService = Sage.Platform.Application.ApplicationContext.Current.Services.Get<Sage.Platform.Security.IRoleSecurityService>(true);
      }
      get
      {
         return _roleSecurityService;
      }
}

public override Type EntityType
{
	get { return typeof(Sage.Entity.Interfaces.IContract); }
}

 

protected override void OnAddEntityBindings() { 
                    // txtReference.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtReferenceTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("ReferenceNumber", txtReference, "Text");
        BindingSource.Bindings.Add(txtReferenceTextBinding);
                       // pklService.PickListValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding pklServicePickListValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("ServiceCode", pklService, "PickListValue");
        BindingSource.Bindings.Add(pklServicePickListValueBinding);
                       // txtPONumber.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtPONumberTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("PONumber", txtPONumber, "Text");
        BindingSource.Bindings.Add(txtPONumberTextBinding);
                       // lueAccount.LookupResultValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding lueAccountLookupResultValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Account", lueAccount, "LookupResultValue");
        BindingSource.Bindings.Add(lueAccountLookupResultValueBinding);
                       // pklType.PickListValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding pklTypePickListValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("TypeCode", pklType, "PickListValue");
        BindingSource.Bindings.Add(pklTypePickListValueBinding);
                       // dtpPurchaseDate.DateTimeValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding dtpPurchaseDateDateTimeValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("PurchaseDate", dtpPurchaseDate, "DateTimeValue");
        BindingSource.Bindings.Add(dtpPurchaseDateDateTimeValueBinding);
                       // lueContact.LookupResultValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding lueContactLookupResultValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Contact", lueContact, "LookupResultValue");
        BindingSource.Bindings.Add(lueContactLookupResultValueBinding);
                       // dtpStartDate.DateTimeValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding dtpStartDateDateTimeValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("StartDate", dtpStartDate, "DateTimeValue");
        BindingSource.Bindings.Add(dtpStartDateDateTimeValueBinding);
                       // curListPrice.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding curListPriceTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("ListPrice", curListPrice, "Text");
        BindingSource.Bindings.Add(curListPriceTextBinding);
                       // chkActive.Checked Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding chkActiveCheckedBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("IsActive", chkActive, "Checked");
        BindingSource.Bindings.Add(chkActiveCheckedBinding);
                       // chkFirst.Checked Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding chkFirstCheckedBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("FirstTicket", chkFirst, "Checked");
        BindingSource.Bindings.Add(chkFirstCheckedBinding);
                       // curDiscount.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding curDiscountTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Discount", curDiscount, "Text");
        BindingSource.Bindings.Add(curDiscountTextBinding);
       
                        // txtComments.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtCommentsTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Notes", txtComments, "Text");
        BindingSource.Bindings.Add(txtCommentsTextBinding);
       
                        // dtpExpiration.DateTimeValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding dtpExpirationDateTimeValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("EndingDate", dtpExpiration, "DateTimeValue");
        BindingSource.Bindings.Add(dtpExpirationDateTimeValueBinding);
                       // curAmount.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding curAmountTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Amount", curAmount, "Text");
        BindingSource.Bindings.Add(curAmountTextBinding);
                       // txtGraceDays.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtGraceDaysTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("GracePeriod", txtGraceDays, "Text");
        BindingSource.Bindings.Add(txtGraceDaysTextBinding);
       
                        // txtQuantity.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtQuantityTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Period", txtQuantity, "Text");
        BindingSource.Bindings.Add(txtQuantityTextBinding);
                       // curQuantity.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding curQuantityTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Period", curQuantity, "Text");
        BindingSource.Bindings.Add(curQuantityTextBinding);
                       // numQuantity.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding numQuantityTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Period", numQuantity, "Text");
        BindingSource.Bindings.Add(numQuantityTextBinding);
    
   
    }
	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   
protected void lueAccount_ChangeAction(object sender, EventArgs e) {
      object[] objarray = new object[] { this.BindingSource.Current };
     Sage.Platform.EntityFactory.Execute<Sage.Entity.Interfaces.IContract>("Contract.OnAccountChanged", objarray);
  
}
protected void pklType_ChangeAction(object sender, EventArgs e) {
Sage.Platform.WebPortal.Services.IPanelRefreshService refresher = PageWorkItem.Services.Get<Sage.Platform.WebPortal.Services.IPanelRefreshService>();
if (refresher != null) {
  refresher.RefreshAll();
}
else {  
  Response.Redirect(Request.Url.ToString());
}
}
protected void lueContact_ChangeAction(object sender, EventArgs e) {
      object[] objarray = new object[] { this.BindingSource.Current };
     Sage.Platform.EntityFactory.Execute<Sage.Entity.Interfaces.IContract>("Contract.OnContactChanged", objarray);
  
}
protected void dtpStartDate_ChangeAction(object sender, EventArgs e) {
      object[] objarray = new object[] { this.BindingSource.Current };
     Sage.Platform.EntityFactory.Execute<Sage.Entity.Interfaces.IContract>("Contract.OnStartDateChanged", objarray);
  
}
protected void curListPrice_ChangeAction(object sender, EventArgs e) {
      object[] objarray = new object[] { this.BindingSource.Current };
     Sage.Platform.EntityFactory.Execute<Sage.Entity.Interfaces.IContract>("Contract.OnListPriceChanged", objarray);
  
}
protected void chkFirst_ChangeAction(object sender, EventArgs e) {
      object[] objarray = new object[] { this.BindingSource.Current };
     Sage.Platform.EntityFactory.Execute<Sage.Entity.Interfaces.IContract>("Contract.OnFirstTicketChanged", objarray);
  
}
protected void curDiscount_ChangeAction(object sender, EventArgs e) {
      object[] objarray = new object[] { this.BindingSource.Current };
     Sage.Platform.EntityFactory.Execute<Sage.Entity.Interfaces.IContract>("Contract.OnDiscountChanged", objarray);
  
}
protected void cmdDateStamp_ClickAction(object sender, EventArgs e) {
      object[] objarray = new object[] { this.BindingSource.Current };
     Sage.Platform.EntityFactory.Execute<Sage.Entity.Interfaces.IContract>("Contract.AddContractCommentsTimeStamp", objarray);
  
}
protected void dtpExpiration_ChangeAction(object sender, EventArgs e) {
      object[] objarray = new object[] { this.BindingSource.Current };
     Sage.Platform.EntityFactory.Execute<Sage.Entity.Interfaces.IContract>("Contract.OnEndingDateChanged", objarray);
  
}
protected void curAmount_ChangeAction(object sender, EventArgs e) {
      object[] objarray = new object[] { this.BindingSource.Current };
     Sage.Platform.EntityFactory.Execute<Sage.Entity.Interfaces.IContract>("Contract.OnAmountChanged", objarray);
  
}
protected void txtQuantity_ChangeAction(object sender, EventArgs e) {
      object[] objarray = new object[] { this.BindingSource.Current };
     Sage.Platform.EntityFactory.Execute<Sage.Entity.Interfaces.IContract>("Contract.OnQuantityChanged", objarray);
  
}
protected void curQuantity_ChangeAction(object sender, EventArgs e) {
      object[] objarray = new object[] { this.BindingSource.Current };
     Sage.Platform.EntityFactory.Execute<Sage.Entity.Interfaces.IContract>("Contract.OnQuantityChanged", objarray);
  
}
protected void numQuantity_ChangeAction(object sender, EventArgs e) {
      object[] objarray = new object[] { this.BindingSource.Current };
     Sage.Platform.EntityFactory.Execute<Sage.Entity.Interfaces.IContract>("Contract.OnQuantityChanged", objarray);
  
}
protected void cmdSave_ClickAction(object sender, EventArgs e) {
Sage.Entity.Interfaces.IContract entity = (Sage.Entity.Interfaces.IContract) this.BindingSource.Current;
if (entity.IsDuplicateContracts()) {
            cmdSave_ClickActionS(sender, e);
      
      }
else {
            cmdSave_ClickActionF(sender, e);
      
      }
}
protected void cmdSave_ClickActionS(object sender, EventArgs e) {
if (DialogService != null) {
	// DialogActionItem
	DialogService.SetSpecs(450, 700, "ContractReferenceDuplicate", string.Empty );
    DialogService.EntityType = typeof(Sage.Entity.Interfaces.IContract); 
    DialogService.ShowDialog();
}
}
protected void cmdSave_ClickActionF(object sender, EventArgs e) {
  Sage.Entity.Interfaces.IContract _entity = BindingSource.Current as Sage.Entity.Interfaces.IContract;
  if (_entity != null) 
  {
    object _parent = GetParentEntity(); 
    if (DialogService.ChildInsertInfo != null) 
    {
      if (_parent != null) 
      {
        if (DialogService.ChildInsertInfo.ParentReferenceProperty != null) 
        {
          DialogService.ChildInsertInfo.ParentReferenceProperty.SetValue(_entity, _parent, null);
        }        
      }
    }
    bool shouldSave = true;
    Sage.Platform.WebPortal.EntityPage page = Page as Sage.Platform.WebPortal.EntityPage;
	if (page != null)
	{
       if(IsInDialog() && page.ModeId.ToUpper() == "INSERT")
       {
         shouldSave = false;
       }
	}

    if(shouldSave)
    {
       _entity.Save();
    }
    
    if (_parent != null)
    {
        if (DialogService.ChildInsertInfo != null)
        {
           if (DialogService.ChildInsertInfo.ParentsCollectionProperty != null) 
           {
              System.Reflection.MethodInfo _add = DialogService.ChildInsertInfo.ParentsCollectionProperty.PropertyType.GetMethod("Add");
              _add.Invoke(DialogService.ChildInsertInfo.ParentsCollectionProperty.GetValue(_parent, null), new object[] { _entity });
           }
        }
     }        
  }
          cmdSave_ClickActionFBRC(sender, e);
    
  
}
protected void cmdSave_ClickActionFBRC(object sender, EventArgs e) {
      Response.Redirect(string.Format("Contract.aspx?entityId={0}", (this.BindingSource.Current as Sage.Platform.ComponentModel.IComponentReference).Id));
  
}

protected override void OnWireEventHandlers()
{
 base.OnWireEventHandlers();
 lueAccount.LookupResultValueChanged += new EventHandler(lueAccount_ChangeAction);
pklType.PickListValueChanged += new EventHandler(pklType_ChangeAction);
lueContact.LookupResultValueChanged += new EventHandler(lueContact_ChangeAction);
dtpStartDate.DateTimeValueChanged += new EventHandler(dtpStartDate_ChangeAction);
curListPrice.TextChanged += new EventHandler(curListPrice_ChangeAction);
chkFirst.CheckedChanged += new EventHandler(chkFirst_ChangeAction);
curDiscount.TextChanged += new EventHandler(curDiscount_ChangeAction);
cmdDateStamp.Click += new ImageClickEventHandler(cmdDateStamp_ClickAction);
dtpExpiration.DateTimeValueChanged += new EventHandler(dtpExpiration_ChangeAction);
curAmount.TextChanged += new EventHandler(curAmount_ChangeAction);
txtQuantity.TextChanged += new EventHandler(txtQuantity_ChangeAction);
curQuantity.TextChanged += new EventHandler(curQuantity_ChangeAction);
numQuantity.TextChanged += new EventHandler(numQuantity_ChangeAction);
cmdSave.Click += new ImageClickEventHandler(cmdSave_ClickAction);


}

protected void quickformload0(object sender, EventArgs e) {
Sage.Entity.Interfaces.IContract newContract = this.BindingSource.Current as Sage.Entity.Interfaces.IContract;
if (Request.QueryString[Sage.Platform.WebPortal.EntityPage.CONST_ENTITYIDQUERYSTRING] != null)
{
    string id = Request.QueryString[Sage.Platform.WebPortal.EntityPage.CONST_ENTITYIDQUERYSTRING];
    Sage.Entity.Interfaces.IContract contract = Sage.Platform.EntityFactory.GetRepository<Sage.Entity.Interfaces.IContract>().FindFirstByProperty("Id", id);
	
	if (contract != null && !IsPostBack)
	{
    	object[] objarray = new object[] { contract, newContract, id };
    	Sage.Platform.EntityFactory.Execute<Sage.Entity.Interfaces.IContract>("Contract.CopyContract", objarray);
	}
}


if (String.IsNullOrEmpty(newContract.TypeCode)) return;
Sage.SalesLogix.PickLists.PickList picklist = Sage.SalesLogix.PickLists.PickList.GetPickListByItemId(newContract.TypeCode);
if (picklist != null)
{
    string value = picklist.Text.ToUpper();
    if (value.Equals(GetLocalResourceObject("ContractType_Dollars").ToString().ToUpper()))
    {
        txtQuantity.Visible = false;
        numQuantity.Visible = false;
        curQuantity.Visible = true;
        chkFirst.Enabled = false;
    }
    else if (value.Equals(GetLocalResourceObject("ContractType_Hours").ToString().ToUpper()))
    {
        txtQuantity.Visible = false;
        curQuantity.Visible = false;
        numQuantity.Visible = true;
        chkFirst.Enabled = false;
    }
    else if (value.Equals(GetLocalResourceObject("ContractType_Days").ToString().ToUpper()))
    {
        chkFirst.Enabled = true;
    }
    else
    {
        curQuantity.Visible = false;
        numQuantity.Visible = false;
        txtQuantity.Visible = true;
        chkFirst.Enabled = false;
    }
}
}
protected override void OnFormBound()
{
ScriptManager.RegisterStartupScript(Page, GetType(), "cleanupcontainer", "jQuery(\".controlslist > div:empty\").remove();", true);
ScriptManager.RegisterStartupScript(Page, GetType(), "cleanupcontainer", "jQuery(\".controlslist > div:empty\").remove();", true);
ClientBindingMgr.RegisterSaveButton(cmdSave);

quickformload0(this, EventArgs.Empty);


}



public override Sage.Platform.Application.UI.ISmartPartInfo GetSmartPartInfo(Type smartPartInfoType)
{
	ToolsSmartPartInfo tinfo = new ToolsSmartPartInfo();
    	
	foreach (Control c in Controls)
	{
		SmartPartToolsContainer cont = c as SmartPartToolsContainer;
		if (cont != null)
		{
			switch (cont.ToolbarLocation)
			{
				case SmartPartToolsLocation.Right:
					foreach (Control tool in cont.Controls)
					{
											tinfo.RightTools.Add(tool);
										}
					break;
				case SmartPartToolsLocation.Center:
					foreach (Control tool in cont.Controls)
					{
						tinfo.CenterTools.Add(tool);
					}
					break;
				case SmartPartToolsLocation.Left:
					foreach (Control tool in cont.Controls)
					{
						tinfo.LeftTools.Add(tool);
					}
					break;
			}
		}
	}
	
		return tinfo;
}

private Sage.Platform.Controls.IEntityForm _formAdapter;

public Sage.Platform.Controls.IEntityForm FormAdapter
{
	get { return _formAdapter ?? (_formAdapter = new InsertContractAdapter(this)); }
}

public class InsertContractAdapter : Sage.Platform.WebPortal.Adapters.EntityFormAdapter, Sage.Form.Interfaces.IInsertContract
{
	public InsertContractAdapter(Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider smartPart)
		: base(smartPart) {}

	private Sage.Platform.Controls.ITextBoxControl _txtReference;
	public Sage.Platform.Controls.ITextBoxControl txtReference
	{
		get { return FindControl(ref _txtReference, "txtReference"); }
	}
	private Sage.Platform.Controls.ILookupControl _lueAccount;
	public Sage.Platform.Controls.ILookupControl lueAccount
	{
		get { return FindControl(ref _lueAccount, "lueAccount"); }
	}
	private Sage.Platform.Controls.ILookupControl _lueContact;
	public Sage.Platform.Controls.ILookupControl lueContact
	{
		get { return FindControl(ref _lueContact, "lueContact"); }
	}
	private Sage.Platform.Controls.ICheckBoxControl _chkActive;
	public Sage.Platform.Controls.ICheckBoxControl chkActive
	{
		get { return FindControl(ref _chkActive, "chkActive"); }
	}
	private Sage.Platform.Controls.IControlsListControl _ctrlstComments;
	public Sage.Platform.Controls.IControlsListControl ctrlstComments
	{
		get { return FindControl(ref _ctrlstComments, "ctrlstComments"); }
	}
	private Sage.Platform.Controls.ITextBoxControl _txtComments;
	public Sage.Platform.Controls.ITextBoxControl txtComments
	{
		get { return FindControl(ref _txtComments, "txtComments"); }
	}
	private Sage.Platform.Controls.IButtonControl _cmdDateStamp;
	public Sage.Platform.Controls.IButtonControl cmdDateStamp
	{
		get { return FindControl(ref _cmdDateStamp, "cmdDateStamp"); }
	}
	private Sage.Platform.Controls.IPickListControl _pklService;
	public Sage.Platform.Controls.IPickListControl pklService
	{
		get { return FindControl(ref _pklService, "pklService"); }
	}
	private Sage.Platform.Controls.IPickListControl _pklType;
	public Sage.Platform.Controls.IPickListControl pklType
	{
		get { return FindControl(ref _pklType, "pklType"); }
	}
	private Sage.Platform.Controls.IDateTimePickerControl _dtpStartDate;
	public Sage.Platform.Controls.IDateTimePickerControl dtpStartDate
	{
		get { return FindControl(ref _dtpStartDate, "dtpStartDate"); }
	}
	private Sage.Platform.Controls.ICheckBoxControl _chkFirst;
	public Sage.Platform.Controls.ICheckBoxControl chkFirst
	{
		get { return FindControl(ref _chkFirst, "chkFirst"); }
	}
	private Sage.Platform.Controls.IDateTimePickerControl _dtpExpiration;
	public Sage.Platform.Controls.IDateTimePickerControl dtpExpiration
	{
		get { return FindControl(ref _dtpExpiration, "dtpExpiration"); }
	}
	private Sage.Platform.Controls.ITextBoxControl _txtGraceDays;
	public Sage.Platform.Controls.ITextBoxControl txtGraceDays
	{
		get { return FindControl(ref _txtGraceDays, "txtGraceDays"); }
	}
	private Sage.Platform.Controls.IControlsListControl _ctrlstQuantity;
	public Sage.Platform.Controls.IControlsListControl ctrlstQuantity
	{
		get { return FindControl(ref _ctrlstQuantity, "ctrlstQuantity"); }
	}
	private Sage.Platform.Controls.ITextBoxControl _txtQuantity;
	public Sage.Platform.Controls.ITextBoxControl txtQuantity
	{
		get { return FindControl(ref _txtQuantity, "txtQuantity"); }
	}
	private Sage.Platform.Controls.ICurrencyControl _curQuantity;
	public Sage.Platform.Controls.ICurrencyControl curQuantity
	{
		get { return FindControl(ref _curQuantity, "curQuantity"); }
	}
	private Sage.Platform.Controls.INumericControl _numQuantity;
	public Sage.Platform.Controls.INumericControl numQuantity
	{
		get { return FindControl(ref _numQuantity, "numQuantity"); }
	}
	private Sage.Platform.Controls.ITextBoxControl _txtPONumber;
	public Sage.Platform.Controls.ITextBoxControl txtPONumber
	{
		get { return FindControl(ref _txtPONumber, "txtPONumber"); }
	}
	private Sage.Platform.Controls.IDateTimePickerControl _dtpPurchaseDate;
	public Sage.Platform.Controls.IDateTimePickerControl dtpPurchaseDate
	{
		get { return FindControl(ref _dtpPurchaseDate, "dtpPurchaseDate"); }
	}
	private Sage.Platform.Controls.ICurrencyControl _curListPrice;
	public Sage.Platform.Controls.ICurrencyControl curListPrice
	{
		get { return FindControl(ref _curListPrice, "curListPrice"); }
	}
	private Sage.Platform.Controls.ICurrencyControl _curDiscount;
	public Sage.Platform.Controls.ICurrencyControl curDiscount
	{
		get { return FindControl(ref _curDiscount, "curDiscount"); }
	}
	private Sage.Platform.Controls.ICurrencyControl _curAmount;
	public Sage.Platform.Controls.ICurrencyControl curAmount
	{
		get { return FindControl(ref _curAmount, "curAmount"); }
	}
	private Sage.Platform.Controls.IButtonControl _cmdSave;
	public Sage.Platform.Controls.IButtonControl cmdSave
	{
		get { return FindControl(ref _cmdSave, "cmdSave"); }
	}

}

</script>

<script type="text/javascript">
</script>
