<%@ Control Language="C#" ClassName="ReturnShipToDetail" Inherits="Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider" %>
<%@ Register Assembly="Sage.SalesLogix.Client.GroupBuilder" Namespace="Sage.SalesLogix.Client.GroupBuilder" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.PickList" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.DependencyLookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Lookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Timeline" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.HighLevelTypes" Namespace="Sage.SalesLogix.HighLevelTypes" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.Platform.WebPortal" Namespace="Sage.Platform.WebPortal.SmartParts" TagPrefix="SalesLogix" %>
<%//------------------------------------------------------------------------
//This file was generated by a tool.  Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//------------------------------------------------------------------------ %>
<table border="0" cellpadding="1" cellspacing="0" class="formtable">
         <col width="33%" />
            <col width="33%" />
            <col width="33%" />
     <tr>
            <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="lueShipTo_lbl" AssociatedControlID="lueShipTo" runat="server" Text="<%$ resources: lueShipTo.Caption %>" ></asp:Label>
 </div>   
  <div  class="textcontrol lookup"  >
<SalesLogix:LookupControl runat="server" ID="lueShipTo" ButtonToolTip="<%$ resources: lueShipTo.ButtonToolTip %>" LookupEntityName="Contact" LookupEntityTypeName="Sage.Entity.Interfaces.IContact, Sage.Entity.Interfaces, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" EnableHyperLinking="true" AutoPostBack="true"  >
<LookupProperties>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueShipTo.LookupProperties.NameLF.PropertyHeader %>" PropertyName="NameLF" PropertyType="System.String" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueShipTo.LookupProperties.AccountName.PropertyHeader %>" PropertyName="AccountName" PropertyType="" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueShipTo.LookupProperties.Address.City.PropertyHeader %>" PropertyName="Address.City" PropertyType="System.String" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueShipTo.LookupProperties.Address.State.PropertyHeader %>" PropertyName="Address.State" PropertyType="System.String" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueShipTo.LookupProperties.WorkPhone.PropertyHeader %>" PropertyName="WorkPhone" PropertyType="" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueShipTo.LookupProperties.Email.PropertyHeader %>" PropertyName="Email" PropertyType="System.String" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
</LookupProperties>
<LookupPreFilters>
</LookupPreFilters>
</SalesLogix:LookupControl>
  </div>

      </td>
                <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="lueAccount_lbl" AssociatedControlID="lueAccount" runat="server" Text="<%$ resources: lueAccount.Caption %>" ></asp:Label>
 </div>   
  <div  class="textcontrol lookup"  >
<SalesLogix:LookupControl runat="server" ID="lueAccount" ButtonToolTip="<%$ resources: lueAccount.ButtonToolTip %>" ReadOnly="true" EnableLookup="false" LookupEntityName="Account" LookupEntityTypeName="Sage.Entity.Interfaces.IAccount, Sage.Entity.Interfaces, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" EnableHyperLinking="true"  >
<LookupProperties>
</LookupProperties>
<LookupPreFilters>
</LookupPreFilters>
</SalesLogix:LookupControl>
  </div>

      </td>
                <td rowspan="5"  >
<asp:Panel runat="server" ID="QFControlsList" CssClass="controlslist "
>
   <div class="lbltop alignleft">
   <asp:Label ID="txtShortNotes_lbl" AssociatedControlID="txtShortNotes" runat="server" Text="<%$ resources: txtShortNotes.Caption %>" ></asp:Label>
 </div>
  <div  class="twocoltextcontrol"   >
<asp:TextBox runat="server" ID="txtShortNotes" Rows="4"
TextMode="MultiLine" Columns="40"
MultiLineMaxLength="255" onkeyup="doTextBoxKeyUp(this);" onpaste="doTextBoxPaste(this);"  />
  </div>

   <asp:ImageButton runat="server" ID="btnUserDateStamp"
 AlternateText="<%$ resources: btnUserDateStamp.Caption %>"  ToolTip="<%$ resources: btnUserDateStamp.ToolTip %>" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=User_Date_Stamp_16x16"  />
 
</asp:Panel>
      </td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="phnShipToPhone_lbl" AssociatedControlID="phnShipToPhone" runat="server" Text="<%$ resources: phnShipToPhone.Caption %>" ></asp:Label>
 </div>   
   <div  class="textcontrol phone"  > 
    <SalesLogix:Phone runat="server" ID="phnShipToPhone"
ReadOnly="true"  />
  </div>

      </td>
                <td  >
 <div class=" lbl alignleft" >
   <asp:Label ID="txtAttention_lbl" AssociatedControlID="txtAttention" runat="server" Text="<%$ resources: txtAttention.Caption %>" ></asp:Label>
 </div>
  <div  class="textcontrol"   >
<asp:TextBox runat="server" ID="txtAttention" Rows="1"
 />
  </div>

      </td>
            </tr>
<tr>
            <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="emlShipToEmail_lbl" AssociatedControlID="emlShipToEmail" runat="server" Text="<%$ resources: emlShipToEmail.Caption %>" ></asp:Label>
 </div>   
   <div  class="textcontrol email"  > 
<SalesLogix:Email runat="server" ID="emlShipToEmail" ReadOnly="true" ButtonToolTip="<%$ resources: emlShipToEmail.ButtonToolTip %>" EmailTextBoxStyle-ForeColor="#000099" EmailTextBoxStyle-Font-Underline="false" />
  </div>

      </td>
                <td rowspan="3"  >
 <div class=" lbl alignleft">
   <asp:Label ID="txtAddress_lbl" AssociatedControlID="txtAddress" runat="server" Text="<%$ resources: txtAddress.Caption %>" ></asp:Label>
 </div>
   <div  class="textcontrol address"  >
    <SalesLogix:AddressControl runat="server" ID="txtAddress" AddressDescriptionPickListName="Address Description (Account)" AddressDescriptionPickListId="kSYST0000014" ButtonToolTip="<%$ resources: txtAddress.ButtonToolTip %>" AddressToolTip="<%$ resources: txtAddress.AddressToolTip %>" IsPrimaryVisible="false" IsMailingVisible="false" >
<AddressDescStyle Height="80"></AddressDescStyle> </SalesLogix:AddressControl>
</div>

      </td>
            </tr>
<tr>
            <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="pklShipVia_lbl" AssociatedControlID="pklShipVia" runat="server" Text="<%$ resources: pklShipVia.Caption %>" ></asp:Label>
 </div>   
   <div  class="textcontrol picklist"  > 
    <SalesLogix:PickListControl runat="server" ID="pklShipVia" PickListName="Delivery Methods" MustExistInList="false" StorageMode="ID"  />
  </div>

      </td>
                  </tr>
<tr>
            <td  >
 <div class=" lbl alignleft" >
   <asp:Label ID="txtTrackingnum_lbl" AssociatedControlID="txtTrackingnum" runat="server" Text="<%$ resources: txtTrackingnum.Caption %>" ></asp:Label>
 </div>
  <div  class="textcontrol"   >
<asp:TextBox runat="server" ID="txtTrackingnum" Rows="1"
 />
  </div>

      </td>
                  </tr>
<tr>
            <td  colspan="3" >
<div class="mainContentHeader2"><span id="hsAssetsToShip"  >
<asp:Localize runat="server" Text="<%$ resources: hsAssetsToShip.Caption %>"   >Assets To Ship</asp:Localize></span></div>


      </td>
                  </tr>
<tr>
            <td></td>
                <td></td>
                <td  >
 <asp:ImageButton runat="server" ID="cmdAdd"
 AlternateText="<%$ resources: cmdAdd.Caption %>"  ToolTip="<%$ resources: cmdAdd.ToolTip %>" CssClass="alignright" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=plus_16x16"  />
 
      </td>
      </tr>
<tr>
            <td  colspan="3" >
<SalesLogix:SlxGridView runat="server" ID="grdAssetsToReturn" GridLines="None"
AutoGenerateColumns="false" CellPadding="4" CssClass="datagrid" PagerStyle-CssClass="gridPager"
AlternatingRowStyle-CssClass="rowdk" RowStyle-CssClass="rowlt" SelectedRowStyle-CssClass="rowSelected" ShowEmptyTable="true" EnableViewState="false"
 AllowPaging="true" PageSize="20" OnPageIndexChanging="grdAssetsToReturnpage_changing" EmptyTableRowText="<%$ resources: grdAssetsToReturn.EmptyTableRowText %>"  ExpandableRows="True" ResizableColumns="True"  OnRowCommand="grdAssetsToReturn_RowCommand" 
 DataKeyNames="InstanceId,Id" 
 AllowSorting="true" OnSorting="grdAssetsToReturn_Sorting"  OnRowEditing="grdAssetsToReturn_RowEditing"  OnRowDeleting="grdAssetsToReturn_RowDeleting" OnRowDataBound="grdAssetsToReturn_RowDataBound"  ShowSortIcon="true" >
<Columns>
 <asp:ButtonField CommandName="Edit" 
  Text="<%$ resources: grdAssetsToReturn.db28d20f-756f-4a77-916b-0bc292902f01.Text %>"               >
  	    </asp:ButtonField>
     <asp:ButtonField CommandName="Delete" 
  Text="<%$ resources: grdAssetsToReturn.426016a7-6991-42f1-9a62-b5433aeb8196.Text %>"                >
  	    </asp:ButtonField>
      <asp:BoundField DataField="AccountProduct.ProductName" 
      HeaderText="<%$ resources: grdAssetsToReturn.c1cf8600-c1f4-4a44-8828-23621c0cdf4a.ColumnHeading %>"       SortExpression="AccountProduct.ProductName"    >
      </asp:BoundField>
    <asp:BoundField DataField="AccountProduct.ActualId" 
      HeaderText="<%$ resources: grdAssetsToReturn.bedeb9cc-3f8a-4747-a5d3-2940caa70155.ColumnHeading %>"       SortExpression="AccountProduct.ActualId"    >
      </asp:BoundField>
    <asp:BoundField DataField="AccountProduct.SerialNumber" 
      HeaderText="<%$ resources: grdAssetsToReturn.1948b0e0-52e4-40d3-a91c-2b76d026fc75.ColumnHeading %>"       SortExpression="AccountProduct.SerialNumber"    >
      </asp:BoundField>
    <asp:CheckBoxField DataField="Shipped" ReadOnly="True" 
      HeaderText="<%$ resources: grdAssetsToReturn.5515bd08-457c-45c6-a246-476056d50b8b.ColumnHeading %>"       SortExpression="Shipped"  >
  	    </asp:CheckBoxField>
    <asp:TemplateField   HeaderText="<%$ resources: grdAssetsToReturn.b10253ab-cb5e-49a1-b95f-47d91d48234a.ColumnHeading %>"       SortExpression="ShippedBy"  >
    <itemtemplate>
   <SalesLogix:SlxUserControl runat="server" ID="grdAssetsToReturncol7" DisplayMode="AsText" LookupResultValue='<%#  dsAssetsToship.getPropertyValue(Container.DataItem, "ShippedBy")  %>' CssClass=""  />
   </itemtemplate></asp:TemplateField>
    <asp:TemplateField   HeaderText="<%$ resources: grdAssetsToReturn.c2b66fc9-0257-46f4-98bf-d4d667492341.ColumnHeading %>"       SortExpression="ShippedDate"  >
    <itemtemplate>
   <SalesLogix:DateTimePicker runat="server" ID="grdAssetsToReturncol8" DisplayTime="false"  DisplayMode="AsText" DateTimeValue='<%#  dsAssetsToship.getPropertyValue(Container.DataItem, "ShippedDate")  %>' Timeless="true"  CssClass=""  />
   </itemtemplate></asp:TemplateField>
 </Columns>
    <PagerSettings Mode="NumericFirstLast" FirstPageImageUrl="ImageResource.axd?scope=global&type=Global_Images&key=Start_16x16" LastPageImageUrl="ImageResource.axd?scope=global&type=Global_Images&key=End_16x16" />
</SalesLogix:SlxGridView>

<script runat="server" type="text/C#">

      private int _grdAssetsToReturndeleteColumnIndex = -2;
protected int grdAssetsToReturnDeleteColumnIndex
{
	get
	{
		if (_grdAssetsToReturndeleteColumnIndex == -2)
		{
			int bias = (grdAssetsToReturn.ExpandableRows) ? 1 : 0;
			_grdAssetsToReturndeleteColumnIndex = -1;
			int colcount = 0;
			foreach (DataControlField col in grdAssetsToReturn.Columns)
			{
				ButtonField btn = col as ButtonField;
				if (btn != null)
				{
					if (btn.CommandName == "Delete")
					{
						_grdAssetsToReturndeleteColumnIndex = colcount + bias;
						break;
					}
				}
				colcount++;
			}
		}
		return _grdAssetsToReturndeleteColumnIndex;
	}
}

protected void grdAssetsToReturn_RowDataBound(object sender, GridViewRowEventArgs e)
{
	if (e.Row.RowType == DataControlRowType.DataRow)
	{
		if ((grdAssetsToReturnDeleteColumnIndex >= 0) && (grdAssetsToReturnDeleteColumnIndex < e.Row.Cells.Count))
		{
			TableCell cell = e.Row.Cells[grdAssetsToReturnDeleteColumnIndex];
			foreach (Control c in cell.Controls)
			{
				LinkButton btn = c as LinkButton;
				if (btn != null)
				{
					btn.Attributes.Add("onclick", "javascript: return confirm('" + Sage.Platform.WebPortal.PortalUtil.JavaScriptEncode(GetLocalResourceObject("grdAssetsToReturn.426016a7-6991-42f1-9a62-b5433aeb8196.ConfirmationMessage").ToString()) + "');");
					return;
				}
			}
		}
	}
}
                     
protected void grdAssetsToReturnpage_changing(object sender, GridViewPageEventArgs e)
{
 grdAssetsToReturn.PageIndex = e.NewPageIndex;
 grdAssetsToReturn.DataBind();
}
protected void grdAssetsToReturn_Sorting(object sender, GridViewSortEventArgs e) { }
protected void grdAssetsToReturn_RowCommand(object sender, GridViewCommandEventArgs e)
{
    if (e.CommandName == "Page")
        return;
    int rowIndex;
    if (Int32.TryParse(e.CommandArgument.ToString(), out rowIndex))
    {
        dsAssetsToship.SelectedIndex = rowIndex;
		object currentEntity = dsAssetsToship.Current;
        if ((currentEntity is Sage.Platform.ComponentModel.ComponentView) && !((Sage.Platform.ComponentModel.ComponentView)currentEntity).IsVirtualComponent)
            currentEntity = ((Sage.Platform.ComponentModel.ComponentView)currentEntity).Component;
		string id = String.Empty;
        //Check if this is an unpersisted entity and use its InstanceId
        if (Sage.Platform.WebPortal.PortalUtil.ObjectIsNewEntity(currentEntity))
        {
		    if (grdAssetsToReturn.DataKeys[0].Values.Count > 1) {
                foreach (DictionaryEntry val in grdAssetsToReturn.DataKeys[rowIndex].Values)
                {
                    if (val.Key.ToString() == "InstanceId")
                    {
                        Guid instanceId = (Guid)val.Value;
                        dsAssetsToship.SetCurrentEntityByInstanceId(instanceId);
                        id = instanceId.ToString();
		                currentEntity = dsAssetsToship.Current;
                        if ((currentEntity is Sage.Platform.ComponentModel.ComponentView) && !((Sage.Platform.ComponentModel.ComponentView)currentEntity).IsVirtualComponent)
                            currentEntity = ((Sage.Platform.ComponentModel.ComponentView)currentEntity).Component;
                    }
                }                 
            }
        }
        else
        {
            foreach (DictionaryEntry val in grdAssetsToReturn.DataKeys[rowIndex].Values)
            {
                if (val.Key.ToString() != "InstanceId")
                {
                    id = val.Value.ToString();
                }
            }
        }		
        if (e.CommandName.Equals("Edit"))
        {
            if (DialogService != null)
            {
				// QFDataGrid
							DialogService.SetSpecs(400, 600, "AddEditReturnShippedProduct", GetLocalResourceObject("17e65baf-ba3e-4fa5-9a1c-3d2a3449955e.DialogTitleOverride").ToString() );
			                DialogService.EntityType = typeof(Sage.Entity.Interfaces.IReturnShippedProduct );
                DialogService.EntityID = id;
                DialogService.ShowDialog();
            }
        }
		if (e.CommandName.Equals("Delete"))
		{
            Sage.Entity.Interfaces.IReturn mainentity = this.BindingSource.Current as Sage.Entity.Interfaces.IReturn;
			if (mainentity != null)
			{
			    Sage.Entity.Interfaces.IReturnShippedProduct childEntity = null;
			    if((currentEntity != null) && (currentEntity is Sage.Entity.Interfaces.IReturnShippedProduct))
			    {
			        childEntity = (Sage.Entity.Interfaces.IReturnShippedProduct)currentEntity;    
			    }
			    else if (id != null)
			    {
                    childEntity = Sage.Platform.EntityFactory.GetById<Sage.Entity.Interfaces.IReturnShippedProduct>(id);
            }
				if(childEntity != null)
				{
			         mainentity.ReturnShippedProducts.Remove(childEntity);
					 mainentity.Save();
					 if((childEntity.PersistentState & Sage.Platform.Orm.Interfaces.PersistentState.New) <= 0)
					 {
					     childEntity.Delete();
					 }
					 dsAssetsToship.SelectedIndex = -1;
			    }
		    }
		}
	}
    grdAssetsToReturn_refresh();
}
	
	protected void grdAssetsToReturn_refresh()
	{
		if (PageWorkItem != null) {
			Sage.Platform.WebPortal.Services.IPanelRefreshService refresher = PageWorkItem.Services.Get<Sage.Platform.WebPortal.Services.IPanelRefreshService>();
			if (refresher != null)
			{
				refresher.RefreshAll();
			}
			else
			{
				Response.Redirect(Request.Url.ToString());
			}
		}
	}
	
    	protected void grdAssetsToReturn_RowEditing(object sender, GridViewEditEventArgs e)
	{
		grdAssetsToReturn.SelectedIndex = e.NewEditIndex;
	}
            protected void grdAssetsToReturn_RowDeleting(object sender, GridViewDeleteEventArgs e)
	{
		grdAssetsToReturn.SelectedIndex = -1;
	}
	</script>

      </td>
                  </tr>
<tr>
            <td></td>
                <td></td>
                <td></td>
      </tr>
</table>
 

 <SalesLogix:SmartPartToolsContainer runat="server" ID="ReturnShipToDetail_RTools" ToolbarLocation="right">
    <asp:ImageButton runat="server" ID="btnSave"
 ToolTip="<%$ resources: btnSave.ToolTip %>" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Save_16x16"  />
   
  <SalesLogix:PageLink ID="lnkReturnShipToDetailHelp" runat="server" LinkType="HelpFileName" ToolTip="<%$ resources: Portal, Help_ToolTip %>" Target="MCWebHelp" NavigateUrl="returnshiptotab.htm" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Help_16x16"></SalesLogix:PageLink> </SalesLogix:SmartPartToolsContainer>

<script runat="server" type="text/C#">
private Sage.Platform.Security.IRoleSecurityService _roleSecurityService;
/// <summary>
/// Gets or sets the role security service.
/// </summary>
/// <value>The role security service.</value>
[Sage.Platform.Application.ServiceDependency]
public Sage.Platform.Security.IRoleSecurityService RoleSecurityService
{
   set
      {
         _roleSecurityService = Sage.Platform.Application.ApplicationContext.Current.Services.Get<Sage.Platform.Security.IRoleSecurityService>(true);
      }
      get
      {
         return _roleSecurityService;
      }
}

public override Type EntityType
{
	get { return typeof(Sage.Entity.Interfaces.IReturn); }
}

 private Sage.Platform.WebPortal.Binding.WebEntityListBindingSource _dsAssetsToship;
public Sage.Platform.WebPortal.Binding.WebEntityListBindingSource dsAssetsToship
{ 
  get 
  {
    if (_dsAssetsToship == null)
    {
             _dsAssetsToship = new Sage.Platform.WebPortal.Binding.WebEntityListBindingSource(typeof(Sage.Entity.Interfaces.IReturnShippedProduct), 
	    EntityType              ,"ReturnShippedProducts", System.Reflection.MemberTypes.Property);
            	   	}
 	return _dsAssetsToship;
  }
}

void dsAssetsToship_OnCurrentEntitySet(object sender, EventArgs e) 
{
      if (Visible)
    { 
		if(BindingSource.Current != null)
		{
		
      
        dsAssetsToship.SourceObject = BindingSource.Current;
   		}
    }
   if (Visible)
   {   
      RegisterBindingsWithClient(dsAssetsToship);
   }
}

 



 

protected override void OnAddEntityBindings() { 
                    // lueShipTo.LookupResultValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding lueShipToLookupResultValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("ShipTo", lueShipTo, "LookupResultValue");
        BindingSource.Bindings.Add(lueShipToLookupResultValueBinding);
                       // lueAccount.LookupResultValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding lueAccountLookupResultValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("ShipTo.Account", lueAccount, "LookupResultValue");
        BindingSource.Bindings.Add(lueAccountLookupResultValueBinding);
       
                        // txtShortNotes.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtShortNotesTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("ShortNotes", txtShortNotes, "Text");
        BindingSource.Bindings.Add(txtShortNotesTextBinding);
       
                        // phnShipToPhone.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding phnShipToPhoneTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("ShipTo.WorkPhone", phnShipToPhone, "Text");
        BindingSource.Bindings.Add(phnShipToPhoneTextBinding);
                       // txtAttention.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtAttentionTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("ShipToAttention", txtAttention, "Text");
        BindingSource.Bindings.Add(txtAttentionTextBinding);
                       // emlShipToEmail.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding emlShipToEmailTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("ShipTo.Email", emlShipToEmail, "Text");
        BindingSource.Bindings.Add(emlShipToEmailTextBinding);
                       // txtAddress.AddressCity Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtAddressAddressCityBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("ReturnShippedAddress.City", txtAddress, "AddressCity");
        txtAddressAddressCityBinding.IgnoreFLSDisabling = true;
        
        BindingSource.Bindings.Add(txtAddressAddressCityBinding);
                 // txtAddress.AddressCountry Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtAddressAddressCountryBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("ReturnShippedAddress.Country", txtAddress, "AddressCountry");
        txtAddressAddressCountryBinding.IgnoreFLSDisabling = true;
        
        BindingSource.Bindings.Add(txtAddressAddressCountryBinding);
                 // txtAddress.AddressCounty Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtAddressAddressCountyBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("ReturnShippedAddress.County", txtAddress, "AddressCounty");
        txtAddressAddressCountyBinding.IgnoreFLSDisabling = true;
        
        BindingSource.Bindings.Add(txtAddressAddressCountyBinding);
                 // txtAddress.AddressDesc1 Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtAddressAddressDesc1Binding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("ReturnShippedAddress.Address1", txtAddress, "AddressDesc1");
        BindingSource.Bindings.Add(txtAddressAddressDesc1Binding);
                 // txtAddress.AddressDesc2 Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtAddressAddressDesc2Binding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("ReturnShippedAddress.Address2", txtAddress, "AddressDesc2");
        txtAddressAddressDesc2Binding.IgnoreFLSDisabling = true;
        
        BindingSource.Bindings.Add(txtAddressAddressDesc2Binding);
                 // txtAddress.AddressDesc3 Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtAddressAddressDesc3Binding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("ReturnShippedAddress.Address3", txtAddress, "AddressDesc3");
        txtAddressAddressDesc3Binding.IgnoreFLSDisabling = true;
        
        BindingSource.Bindings.Add(txtAddressAddressDesc3Binding);
                 // txtAddress.AddressDescription Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtAddressAddressDescriptionBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("ReturnShippedAddress.Description", txtAddress, "AddressDescription");
        txtAddressAddressDescriptionBinding.IgnoreFLSDisabling = true;
        
        BindingSource.Bindings.Add(txtAddressAddressDescriptionBinding);
                 // txtAddress.AddressDisplay Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtAddressAddressDisplayBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("ReturnShippedAddress.FullAddress", txtAddress, "AddressDisplay");
        txtAddressAddressDisplayBinding.IgnoreFLSDisabling = true;
        
        BindingSource.Bindings.Add(txtAddressAddressDisplayBinding);
                 // txtAddress.AddressPostalCode Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtAddressAddressPostalCodeBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("ReturnShippedAddress.PostalCode", txtAddress, "AddressPostalCode");
        txtAddressAddressPostalCodeBinding.IgnoreFLSDisabling = true;
        
        BindingSource.Bindings.Add(txtAddressAddressPostalCodeBinding);
                 // txtAddress.AddressState Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtAddressAddressStateBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("ReturnShippedAddress.State", txtAddress, "AddressState");
        txtAddressAddressStateBinding.IgnoreFLSDisabling = true;
        
        BindingSource.Bindings.Add(txtAddressAddressStateBinding);
                       // pklShipVia.PickListValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding pklShipViaPickListValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("ShipViaCode", pklShipVia, "PickListValue");
        BindingSource.Bindings.Add(pklShipViaPickListValueBinding);
                       // txtTrackingnum.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtTrackingnumTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("ShipTrackingNumber", txtTrackingnum, "Text");
        BindingSource.Bindings.Add(txtTrackingnumTextBinding);
       
        
           dsAssetsToship.Bindings.Add(new Sage.Platform.WebPortal.Binding.WebEntityListBinding("ReturnShippedProducts", grdAssetsToReturn ));
   dsAssetsToship.BindFieldNames = new String[] { "Id","AccountProduct.ProductName","AccountProduct.ActualId","AccountProduct.SerialNumber","Shipped","ShippedBy","ShippedDate" };
     
     BindingSource.OnCurrentEntitySet += new EventHandler(dsAssetsToship_OnCurrentEntitySet);
     
    }
	   	   	   	   	   	   	   	   	   	   	   	   	   	   
protected void lueShipTo_ChangeAction(object sender, EventArgs e) {
      object[] objarray = new object[] { this.BindingSource.Current };
     Sage.Platform.EntityFactory.Execute<Sage.Entity.Interfaces.IReturn>("Return.OnSetShipContact", objarray);
  
}
protected void btnUserDateStamp_ClickAction(object sender, EventArgs e) {
      object[] objarray = new object[] { this.BindingSource.Current };
     Sage.Platform.EntityFactory.Execute<Sage.Entity.Interfaces.IReturn>("Return.OnSetShipNotesDateTimeStamp", objarray);
  
}
protected void cmdAdd_ClickAction(object sender, EventArgs e) {
if (DialogService != null)
{
	// InsertChildDialogActionItem
	DialogService.SetSpecs(400, 600, "AddEditReturnShippedProduct", GetLocalResourceObject("641bb2f7-cf2f-4e73-a618-980a3f5f6a20.DialogTitleOverride").ToString() );
  DialogService.EntityType = typeof(Sage.Entity.Interfaces.IReturnShippedProduct); 
  DialogService.SetChildIsertInfo(
    typeof(Sage.Entity.Interfaces.IReturnShippedProduct),
    typeof(Sage.Entity.Interfaces.IReturn),
    typeof(Sage.Entity.Interfaces.IReturnShippedProduct).GetProperty("Return"),
    typeof(Sage.Entity.Interfaces.IReturn).GetProperty("ReturnShippedProducts"));
  DialogService.ShowDialog();
}
}
protected void btnSave_ClickAction(object sender, EventArgs e) {
  Sage.Entity.Interfaces.IReturn _entity = BindingSource.Current as Sage.Entity.Interfaces.IReturn;
  if (_entity != null) 
  {
    object _parent = GetParentEntity(); 
    if (DialogService.ChildInsertInfo != null) 
    {
      if (_parent != null) 
      {
        if (DialogService.ChildInsertInfo.ParentReferenceProperty != null) 
        {
          DialogService.ChildInsertInfo.ParentReferenceProperty.SetValue(_entity, _parent, null);
        }        
      }
    }
    bool shouldSave = true;
    Sage.Platform.WebPortal.EntityPage page = Page as Sage.Platform.WebPortal.EntityPage;
	if (page != null)
	{
       if(IsInDialog() && page.ModeId.ToUpper() == "INSERT")
       {
         shouldSave = false;
       }
	}

    if(shouldSave)
    {
       _entity.Save();
    }
    
    if (_parent != null)
    {
        if (DialogService.ChildInsertInfo != null)
        {
           if (DialogService.ChildInsertInfo.ParentsCollectionProperty != null) 
           {
              System.Reflection.MethodInfo _add = DialogService.ChildInsertInfo.ParentsCollectionProperty.PropertyType.GetMethod("Add");
              _add.Invoke(DialogService.ChildInsertInfo.ParentsCollectionProperty.GetValue(_parent, null), new object[] { _entity });
           }
        }
     }        
  }
  
}

protected override void OnWireEventHandlers()
{
 base.OnWireEventHandlers();
 lueShipTo.LookupResultValueChanged += new EventHandler(lueShipTo_ChangeAction);
btnUserDateStamp.Click += new ImageClickEventHandler(btnUserDateStamp_ClickAction);
cmdAdd.Click += new ImageClickEventHandler(cmdAdd_ClickAction);
btnSave.Click += new ImageClickEventHandler(btnSave_ClickAction);


}

protected override void OnFormBound()
{
ScriptManager.RegisterStartupScript(Page, GetType(), "cleanupcontainer", "jQuery(\".controlslist > div:empty\").remove();", true);
ClientBindingMgr.RegisterSaveButton(btnSave);

if (dsAssetsToship.SourceObject == null) { dsAssetsToship.SourceObject = BindingSource.Current; }
if (dsAssetsToship.SourceObject == null) { RegisterBindingsWithClient(dsAssetsToship); }
dsAssetsToship.Bind();



}



public override Sage.Platform.Application.UI.ISmartPartInfo GetSmartPartInfo(Type smartPartInfoType)
{
	ToolsSmartPartInfo tinfo = new ToolsSmartPartInfo();
    	if (BindingSource != null)
	{
		if (BindingSource.Current != null)
		{
			tinfo.Description = BindingSource.Current.ToString();
			tinfo.Title = BindingSource.Current.ToString();
		}
	}
    	
	foreach (Control c in Controls)
	{
		SmartPartToolsContainer cont = c as SmartPartToolsContainer;
		if (cont != null)
		{
			switch (cont.ToolbarLocation)
			{
				case SmartPartToolsLocation.Right:
					foreach (Control tool in cont.Controls)
					{
											tinfo.RightTools.Add(tool);
										}
					break;
				case SmartPartToolsLocation.Center:
					foreach (Control tool in cont.Controls)
					{
						tinfo.CenterTools.Add(tool);
					}
					break;
				case SmartPartToolsLocation.Left:
					foreach (Control tool in cont.Controls)
					{
						tinfo.LeftTools.Add(tool);
					}
					break;
			}
		}
	}
	
		return tinfo;
}

private Sage.Platform.Controls.IEntityForm _formAdapter;

public Sage.Platform.Controls.IEntityForm FormAdapter
{
	get { return _formAdapter ?? (_formAdapter = new ReturnShipToDetailAdapter(this)); }
}

public class ReturnShipToDetailAdapter : Sage.Platform.WebPortal.Adapters.EntityFormAdapter, Sage.Form.Interfaces.IReturnShipToDetail
{
	public ReturnShipToDetailAdapter(Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider smartPart)
		: base(smartPart) {}

	private Sage.Platform.Controls.ILookupControl _lueShipTo;
	public Sage.Platform.Controls.ILookupControl lueShipTo
	{
		get { return FindControl(ref _lueShipTo, "lueShipTo"); }
	}
	private Sage.Platform.Controls.IPhoneControl _phnShipToPhone;
	public Sage.Platform.Controls.IPhoneControl phnShipToPhone
	{
		get { return FindControl(ref _phnShipToPhone, "phnShipToPhone"); }
	}
	private Sage.Platform.Controls.IEmailControl _emlShipToEmail;
	public Sage.Platform.Controls.IEmailControl emlShipToEmail
	{
		get { return FindControl(ref _emlShipToEmail, "emlShipToEmail"); }
	}
	private Sage.Platform.Controls.IPickListControl _pklShipVia;
	public Sage.Platform.Controls.IPickListControl pklShipVia
	{
		get { return FindControl(ref _pklShipVia, "pklShipVia"); }
	}
	private Sage.Platform.Controls.ITextBoxControl _txtTrackingnum;
	public Sage.Platform.Controls.ITextBoxControl txtTrackingnum
	{
		get { return FindControl(ref _txtTrackingnum, "txtTrackingnum"); }
	}
	private Sage.Platform.Controls.IDataGridControl _grdAssetsToReturn;
	public Sage.Platform.Controls.IDataGridControl grdAssetsToReturn
	{
		get { return FindControl(ref _grdAssetsToReturn, "grdAssetsToReturn"); }
	}
	private Sage.Platform.Controls.ILookupControl _lueAccount;
	public Sage.Platform.Controls.ILookupControl lueAccount
	{
		get { return FindControl(ref _lueAccount, "lueAccount"); }
	}
	private Sage.Platform.Controls.ITextBoxControl _txtAttention;
	public Sage.Platform.Controls.ITextBoxControl txtAttention
	{
		get { return FindControl(ref _txtAttention, "txtAttention"); }
	}
	private Sage.Platform.Controls.IAddressControl _txtAddress;
	public Sage.Platform.Controls.IAddressControl txtAddress
	{
		get { return FindControl(ref _txtAddress, "txtAddress"); }
	}
	private Sage.Platform.Controls.IControlsListControl _QFControlsList;
	public Sage.Platform.Controls.IControlsListControl QFControlsList
	{
		get { return FindControl(ref _QFControlsList, "QFControlsList"); }
	}
	private Sage.Platform.Controls.ITextBoxControl _txtShortNotes;
	public Sage.Platform.Controls.ITextBoxControl txtShortNotes
	{
		get { return FindControl(ref _txtShortNotes, "txtShortNotes"); }
	}
	private Sage.Platform.Controls.IButtonControl _btnUserDateStamp;
	public Sage.Platform.Controls.IButtonControl btnUserDateStamp
	{
		get { return FindControl(ref _btnUserDateStamp, "btnUserDateStamp"); }
	}
	private Sage.Platform.Controls.IButtonControl _cmdAdd;
	public Sage.Platform.Controls.IButtonControl cmdAdd
	{
		get { return FindControl(ref _cmdAdd, "cmdAdd"); }
	}
	private Sage.Platform.Controls.IDataSourceControl _dsAssetsToship;
	public Sage.Platform.Controls.IDataSourceControl dsAssetsToship
	{
		get { return FindControl(ref _dsAssetsToship, "dsAssetsToship"); }
	}
	private Sage.Platform.Controls.IButtonControl _btnSave;
	public Sage.Platform.Controls.IButtonControl btnSave
	{
		get { return FindControl(ref _btnSave, "btnSave"); }
	}

}

</script>

<script type="text/javascript">
</script>
