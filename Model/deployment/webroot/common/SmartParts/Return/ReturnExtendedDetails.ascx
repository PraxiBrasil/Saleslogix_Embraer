<%@ Control Language="C#" ClassName="ReturnExtendedDetails" Inherits="Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider" %>
<%@ Register Assembly="Sage.SalesLogix.Client.GroupBuilder" Namespace="Sage.SalesLogix.Client.GroupBuilder" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.PickList" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.DependencyLookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Lookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Timeline" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.HighLevelTypes" Namespace="Sage.SalesLogix.HighLevelTypes" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.Platform.WebPortal" Namespace="Sage.Platform.WebPortal.SmartParts" TagPrefix="SalesLogix" %>
<%//------------------------------------------------------------------------
//This file was generated by a tool.  Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//------------------------------------------------------------------------ %>
<table border="0" cellpadding="1" cellspacing="0" class="formtable">
         <col width="33.3%" />
            <col width="33.3%" />
            <col width="33.3%" />
     <tr>
            <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="lueContact_lbl" AssociatedControlID="lueContact" runat="server" Text="<%$ resources: lueContact.Caption %>" ></asp:Label>
 </div>   
  <div  class="textcontrol lookup"  >
<SalesLogix:LookupControl runat="server" ID="lueContact" ButtonToolTip="<%$ resources: lueContact.ButtonToolTip %>" ReadOnly="true" EnableLookup="false" LookupEntityName="Contact" LookupEntityTypeName="Sage.Entity.Interfaces.IContact, Sage.Entity.Interfaces, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" EnableHyperLinking="true"  >
<LookupProperties>
</LookupProperties>
<LookupPreFilters>
</LookupPreFilters>
</SalesLogix:LookupControl>
  </div>

      </td>
                <td rowspan="3"  colspan="2" >
<asp:Panel runat="server" ID="QFControlsList" CssClass="controlslist "
>
   <div class="lbltop alignleft">
   <asp:Label ID="txtNotes2_lbl" AssociatedControlID="txtNotes2" runat="server" Text="<%$ resources: txtNotes2.Caption %>" ></asp:Label>
 </div>
  <div  class="twocoltextcontrol"   >
<asp:TextBox runat="server" ID="txtNotes2" Rows="4"
TextMode="MultiLine" Columns="40"
 />
  </div>

   <asp:ImageButton runat="server" ID="cmdTimeStamp2"
 ToolTip="<%$ resources: cmdTimeStamp2.ToolTip %>" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=User_Date_Stamp_16x16"  />
 
</asp:Panel>
      </td>
            </tr>
<tr>
            <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="phPhone_lbl" AssociatedControlID="phPhone" runat="server" Text="<%$ resources: phPhone.Caption %>" ></asp:Label>
 </div>   
   <div  class="textcontrol phone"  > 
    <SalesLogix:Phone runat="server" ID="phPhone"
ReadOnly="true"  />
  </div>

      </td>
                  </tr>
<tr>
            <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="emlEmail_lbl" AssociatedControlID="emlEmail" runat="server" Text="<%$ resources: emlEmail.Caption %>" ></asp:Label>
 </div>   
   <div  class="textcontrol email"  > 
<SalesLogix:Email runat="server" ID="emlEmail" ReadOnly="true" ButtonToolTip="<%$ resources: emlEmail.ButtonToolTip %>" EmailTextBoxStyle-ForeColor="#000099" EmailTextBoxStyle-Font-Underline="false" />
  </div>

      </td>
                  </tr>
<tr>
            <td  colspan="3" >
<div class="mainContentHeader2"><span id="QFHorizontalSeparator"  >
<asp:Localize runat="server" Text="<%$ resources: QFHorizontalSeparator.Caption %>"   >Assets to Return</asp:Localize></span></div>


      </td>
                  </tr>
<tr>
            <td></td>
                <td></td>
                <td  >
<SalesLogix:LookupControl runat="server" ID="lueAccountProduct"  ToolTip="<%$ resources: lueAccountProduct.ToolTip %>" LookupEntityName="AccountProduct" LookupEntityTypeName="Sage.Entity.Interfaces.IAccountProduct, Sage.Entity.Interfaces, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" LookupDisplayMode="ButtonOnly" SeedProperty="Account.Id" AutoPostBack="true" LookupImageURL="~/ImageResource.axd?scope=global&type=Global_Images&key=plus_16x16"  >
<LookupProperties>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueAccountProduct.LookupProperties.ProductName.PropertyHeader %>" PropertyName="ProductName" PropertyType="" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueAccountProduct.LookupProperties.ActualId.PropertyHeader %>" PropertyName="ActualId" PropertyType="" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueAccountProduct.LookupProperties.SerialNumber.PropertyHeader %>" PropertyName="SerialNumber" PropertyType="" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueAccountProduct.LookupProperties.Account.AccountName.PropertyHeader %>" PropertyName="Account.AccountName" PropertyType="" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
</LookupProperties>
<LookupPreFilters>
</LookupPreFilters>
</SalesLogix:LookupControl>

      </td>
      </tr>
<tr>
            <td  colspan="3" >
<SalesLogix:SlxGridView runat="server" ID="grdProductReturns" GridLines="None"
AutoGenerateColumns="false" CellPadding="4" CssClass="datagrid" PagerStyle-CssClass="gridPager"
AlternatingRowStyle-CssClass="rowdk" RowStyle-CssClass="rowlt" SelectedRowStyle-CssClass="rowSelected" ShowEmptyTable="true" EnableViewState="false"
 AllowPaging="true" PageSize="20" OnPageIndexChanging="grdProductReturnspage_changing" EmptyTableRowText="<%$ resources: grdProductReturns.EmptyTableRowText %>"  ExpandableRows="True" ResizableColumns="True"  OnRowCommand="grdProductReturns_RowCommand" 
 DataKeyNames="InstanceId,Id" 
 AllowSorting="true" OnSorting="grdProductReturns_Sorting"  OnRowDeleting="grdProductReturns_RowDeleting" OnRowDataBound="grdProductReturns_RowDataBound"  ShowSortIcon="true" >
<Columns>
  <asp:ButtonField CommandName="Delete" 
  Text="<%$ resources: grdProductReturns.1c98dfdd-133e-4613-b655-b5a8f9f337dd.Text %>"                >
  	    </asp:ButtonField>
      <asp:BoundField DataField="AccountProduct.ProductName" 
      HeaderText="<%$ resources: grdProductReturns.823538ed-2bda-4ba2-ad79-fee7871f25a8.ColumnHeading %>"       SortExpression="AccountProduct.ProductName"    >
      </asp:BoundField>
    <asp:BoundField DataField="AccountProduct.ActualId" 
      HeaderText="<%$ resources: grdProductReturns.74fc3a03-11d7-4bbc-8fc0-67b435cd2e94.ColumnHeading %>"       SortExpression="AccountProduct.ActualId"    >
      </asp:BoundField>
    <asp:BoundField DataField="AccountProduct.SerialNumber" 
      HeaderText="<%$ resources: grdProductReturns.036db9fb-da71-43f3-982b-d989c326e7e5.ColumnHeading %>"       SortExpression="AccountProduct.SerialNumber"    >
      </asp:BoundField>
    <asp:CheckBoxField DataField="Received" ReadOnly="True" 
      HeaderText="<%$ resources: grdProductReturns.e00795fd-0273-4b14-abf6-8fc50fa2c417.ColumnHeading %>"       SortExpression="Received"  >
  	    </asp:CheckBoxField>
    <asp:TemplateField   HeaderText="<%$ resources: grdProductReturns.e51a60a4-c0e3-4638-9163-6c437be0376c.ColumnHeading %>"       SortExpression="ReceivedBy"  >
    <itemtemplate>
   <SalesLogix:SlxUserControl runat="server" ID="grdProductReturnscol6" DisplayMode="AsText" LookupResultValue='<%#  dsReturnProducts.getPropertyValue(Container.DataItem, "ReceivedBy")  %>' CssClass=""  />
   </itemtemplate></asp:TemplateField>
    <asp:TemplateField   HeaderText="<%$ resources: grdProductReturns.1d58227f-e436-4263-9ff8-5d7530090943.ColumnHeading %>"       SortExpression="Receiveddate"  >
    <itemtemplate>
   <SalesLogix:DateTimePicker runat="server" ID="grdProductReturnscol7" DisplayTime="false"  DisplayMode="AsText" DateTimeValue='<%#  dsReturnProducts.getPropertyValue(Container.DataItem, "Receiveddate")  %>' Timeless="true"  CssClass=""  />
   </itemtemplate></asp:TemplateField>
 </Columns>
    <PagerSettings Mode="NumericFirstLast" FirstPageImageUrl="ImageResource.axd?scope=global&type=Global_Images&key=Start_16x16" LastPageImageUrl="ImageResource.axd?scope=global&type=Global_Images&key=End_16x16" />
</SalesLogix:SlxGridView>

<script runat="server" type="text/C#">

   private int _grdProductReturnsdeleteColumnIndex = -2;
protected int grdProductReturnsDeleteColumnIndex
{
	get
	{
		if (_grdProductReturnsdeleteColumnIndex == -2)
		{
			int bias = (grdProductReturns.ExpandableRows) ? 1 : 0;
			_grdProductReturnsdeleteColumnIndex = -1;
			int colcount = 0;
			foreach (DataControlField col in grdProductReturns.Columns)
			{
				ButtonField btn = col as ButtonField;
				if (btn != null)
				{
					if (btn.CommandName == "Delete")
					{
						_grdProductReturnsdeleteColumnIndex = colcount + bias;
						break;
					}
				}
				colcount++;
			}
		}
		return _grdProductReturnsdeleteColumnIndex;
	}
}

protected void grdProductReturns_RowDataBound(object sender, GridViewRowEventArgs e)
{
}
                     
protected void grdProductReturnspage_changing(object sender, GridViewPageEventArgs e)
{
 grdProductReturns.PageIndex = e.NewPageIndex;
 grdProductReturns.DataBind();
}
protected void grdProductReturns_Sorting(object sender, GridViewSortEventArgs e) { }
protected void grdProductReturns_RowCommand(object sender, GridViewCommandEventArgs e)
{
    if (e.CommandName == "Page")
        return;
    int rowIndex;
    if (Int32.TryParse(e.CommandArgument.ToString(), out rowIndex))
    {
        dsReturnProducts.SelectedIndex = rowIndex;
		object currentEntity = dsReturnProducts.Current;
        if ((currentEntity is Sage.Platform.ComponentModel.ComponentView) && !((Sage.Platform.ComponentModel.ComponentView)currentEntity).IsVirtualComponent)
            currentEntity = ((Sage.Platform.ComponentModel.ComponentView)currentEntity).Component;
		string id = String.Empty;
        //Check if this is an unpersisted entity and use its InstanceId
        if (Sage.Platform.WebPortal.PortalUtil.ObjectIsNewEntity(currentEntity))
        {
		    if (grdProductReturns.DataKeys[0].Values.Count > 1) {
                foreach (DictionaryEntry val in grdProductReturns.DataKeys[rowIndex].Values)
                {
                    if (val.Key.ToString() == "InstanceId")
                    {
                        Guid instanceId = (Guid)val.Value;
                        dsReturnProducts.SetCurrentEntityByInstanceId(instanceId);
                        id = instanceId.ToString();
		                currentEntity = dsReturnProducts.Current;
                        if ((currentEntity is Sage.Platform.ComponentModel.ComponentView) && !((Sage.Platform.ComponentModel.ComponentView)currentEntity).IsVirtualComponent)
                            currentEntity = ((Sage.Platform.ComponentModel.ComponentView)currentEntity).Component;
                    }
                }                 
            }
        }
        else
        {
            foreach (DictionaryEntry val in grdProductReturns.DataKeys[rowIndex].Values)
            {
                if (val.Key.ToString() != "InstanceId")
                {
                    id = val.Value.ToString();
                }
            }
        }		
		if (e.CommandName.Equals("Delete"))
		{
            Sage.Entity.Interfaces.IReturn mainentity = this.BindingSource.Current as Sage.Entity.Interfaces.IReturn;
			if (mainentity != null)
			{
			    Sage.Entity.Interfaces.IReturnReceivedProduct childEntity = null;
			    if((currentEntity != null) && (currentEntity is Sage.Entity.Interfaces.IReturnReceivedProduct))
			    {
			        childEntity = (Sage.Entity.Interfaces.IReturnReceivedProduct)currentEntity;    
			    }
			    else if (id != null)
			    {
                    childEntity = Sage.Platform.EntityFactory.GetById<Sage.Entity.Interfaces.IReturnReceivedProduct>(id);
            }
				if(childEntity != null)
				{
			         mainentity.ReturnReceivedProducts.Remove(childEntity);
					 mainentity.Save();
					 if((childEntity.PersistentState & Sage.Platform.Orm.Interfaces.PersistentState.New) <= 0)
					 {
					     childEntity.Delete();
					 }
					 dsReturnProducts.SelectedIndex = -1;
			    }
		    }
		}
	}
    grdProductReturns_refresh();
}
	
	protected void grdProductReturns_refresh()
	{
		if (PageWorkItem != null) {
			Sage.Platform.WebPortal.Services.IPanelRefreshService refresher = PageWorkItem.Services.Get<Sage.Platform.WebPortal.Services.IPanelRefreshService>();
			if (refresher != null)
			{
				refresher.RefreshAll();
			}
			else
			{
				Response.Redirect(Request.Url.ToString());
			}
		}
	}
	
            protected void grdProductReturns_RowDeleting(object sender, GridViewDeleteEventArgs e)
	{
		grdProductReturns.SelectedIndex = -1;
	}
	</script>

      </td>
                  </tr>
<tr>
            <td></td>
                <td></td>
                <td></td>
      </tr>
</table>
 

 <SalesLogix:SmartPartToolsContainer runat="server" ID="ReturnExtendedDetails_RTools" ToolbarLocation="right">
    <asp:ImageButton runat="server" ID="btnSave"
 ToolTip="<%$ resources: btnSave.ToolTip %>" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Save_16x16"  />
   
  <SalesLogix:PageLink ID="lnkReturnExtendedDetailsHelp" runat="server" LinkType="HelpFileName" ToolTip="<%$ resources: Portal, Help_ToolTip %>" Target="MCWebHelp" NavigateUrl="returndetailstab.htm" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Help_16x16"></SalesLogix:PageLink> </SalesLogix:SmartPartToolsContainer>

<script runat="server" type="text/C#">
private Sage.Platform.Security.IRoleSecurityService _roleSecurityService;
/// <summary>
/// Gets or sets the role security service.
/// </summary>
/// <value>The role security service.</value>
[Sage.Platform.Application.ServiceDependency]
public Sage.Platform.Security.IRoleSecurityService RoleSecurityService
{
   set
      {
         _roleSecurityService = Sage.Platform.Application.ApplicationContext.Current.Services.Get<Sage.Platform.Security.IRoleSecurityService>(true);
      }
      get
      {
         return _roleSecurityService;
      }
}

public override Type EntityType
{
	get { return typeof(Sage.Entity.Interfaces.IReturn); }
}

 private Sage.Platform.WebPortal.Binding.WebEntityListBindingSource _dsReturnProducts;
public Sage.Platform.WebPortal.Binding.WebEntityListBindingSource dsReturnProducts
{ 
  get 
  {
    if (_dsReturnProducts == null)
    {
             _dsReturnProducts = new Sage.Platform.WebPortal.Binding.WebEntityListBindingSource(typeof(Sage.Entity.Interfaces.IReturnReceivedProduct), 
	    EntityType              ,"ReturnReceivedProducts", System.Reflection.MemberTypes.Property);
                   _dsReturnProducts.UseSmartQuery = true;
      	   	}
 	return _dsReturnProducts;
  }
}

void dsReturnProducts_OnCurrentEntitySet(object sender, EventArgs e) 
{
      if (Visible)
    { 
		if(BindingSource.Current != null)
		{
		
      
        dsReturnProducts.SourceObject = BindingSource.Current;
   		}
    }
   if (Visible)
   {   
      RegisterBindingsWithClient(dsReturnProducts);
   }
}

 



 

protected override void OnAddEntityBindings() { 
                    // lueContact.LookupResultValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding lueContactLookupResultValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("ReturnedBy", lueContact, "LookupResultValue");
        BindingSource.Bindings.Add(lueContactLookupResultValueBinding);
       
                        // txtNotes2.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtNotes2TextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("ReturnDetailNotes", txtNotes2, "Text");
        BindingSource.Bindings.Add(txtNotes2TextBinding);
       
                        // phPhone.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding phPhoneTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("ReturnedBy.WorkPhone", phPhone, "Text");
        BindingSource.Bindings.Add(phPhoneTextBinding);
                       // emlEmail.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding emlEmailTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("ReturnedBy.Email", emlEmail, "Text");
        BindingSource.Bindings.Add(emlEmailTextBinding);
       
                        // lueAccountProduct.SeedValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding lueAccountProductSeedValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Account.Id", lueAccountProduct, "SeedValue");
        lueAccountProductSeedValueBinding.IgnoreFLSDisabling = true;
        
        BindingSource.Bindings.Add(lueAccountProductSeedValueBinding);
          dsReturnProducts.Bindings.Add(new Sage.Platform.WebPortal.Binding.WebEntityListBinding("ReturnReceivedProducts", grdProductReturns ));
   dsReturnProducts.BindFieldNames = new String[] { "Id","AccountProduct.ProductName","AccountProduct.ActualId","AccountProduct.SerialNumber","Received","ReceivedBy","Receiveddate" };
     
     BindingSource.OnCurrentEntitySet += new EventHandler(dsReturnProducts_OnCurrentEntitySet);
     
    }
	   	   	   	   	   	   	   	   	   
protected void cmdTimeStamp2_ClickAction(object sender, EventArgs e) {
      object[] objarray = new object[] { this.BindingSource.Current };
     Sage.Platform.EntityFactory.Execute<Sage.Entity.Interfaces.IReturn>("Return.OnSetReturnNotesDateTimeStamp", objarray);
  
}
protected void lueAccountProduct_ChangeAction(object sender, EventArgs e) {
    if (lueAccountProduct.LookupResultValue != null)
    {
        Sage.Entity.Interfaces.IReturn parentEntity = BindingSource.Current as Sage.Entity.Interfaces.IReturn;
        Sage.Entity.Interfaces.IAccountProduct relatedEntity = lueAccountProduct.LookupResultValue as Sage.Entity.Interfaces.IAccountProduct;
        Sage.Platform.WebPortal.EntityPage page = (Sage.Platform.WebPortal.EntityPage)Page;
		// check for duplicates
        bool found = false;
        if ((parentEntity != null) && (relatedEntity != null))
        {
		        Sage.Entity.Interfaces.IReturnReceivedProduct relationshipEntity = Sage.Platform.EntityFactory.Create<Sage.Entity.Interfaces.IReturnReceivedProduct>();
		if (!found)
        {
            relationshipEntity.Return = parentEntity;
            relationshipEntity.AccountProduct = relatedEntity;
            parentEntity.ReturnReceivedProducts.Add(relationshipEntity);
            dsReturnProducts.SelectedMember = relationshipEntity;
            if (page.ModeId.ToUpper() != "INSERT")
            {
				parentEntity.Save();
            }
		}
        }
    }

}
protected void btnSave_ClickAction(object sender, EventArgs e) {
  Sage.Entity.Interfaces.IReturn _entity = BindingSource.Current as Sage.Entity.Interfaces.IReturn;
  if (_entity != null) 
  {
    object _parent = GetParentEntity(); 
    if (DialogService.ChildInsertInfo != null) 
    {
      if (_parent != null) 
      {
        if (DialogService.ChildInsertInfo.ParentReferenceProperty != null) 
        {
          DialogService.ChildInsertInfo.ParentReferenceProperty.SetValue(_entity, _parent, null);
        }        
      }
    }
    bool shouldSave = true;
    Sage.Platform.WebPortal.EntityPage page = Page as Sage.Platform.WebPortal.EntityPage;
	if (page != null)
	{
       if(IsInDialog() && page.ModeId.ToUpper() == "INSERT")
       {
         shouldSave = false;
       }
	}

    if(shouldSave)
    {
       _entity.Save();
    }
    
    if (_parent != null)
    {
        if (DialogService.ChildInsertInfo != null)
        {
           if (DialogService.ChildInsertInfo.ParentsCollectionProperty != null) 
           {
              System.Reflection.MethodInfo _add = DialogService.ChildInsertInfo.ParentsCollectionProperty.PropertyType.GetMethod("Add");
              _add.Invoke(DialogService.ChildInsertInfo.ParentsCollectionProperty.GetValue(_parent, null), new object[] { _entity });
           }
        }
     }        
  }
  
}

protected override void OnWireEventHandlers()
{
 base.OnWireEventHandlers();
 cmdTimeStamp2.Click += new ImageClickEventHandler(cmdTimeStamp2_ClickAction);
lueAccountProduct.LookupResultValueChanged += new EventHandler(lueAccountProduct_ChangeAction);
btnSave.Click += new ImageClickEventHandler(btnSave_ClickAction);


}

protected override void OnFormBound()
{
ScriptManager.RegisterStartupScript(Page, GetType(), "cleanupcontainer", "jQuery(\".controlslist > div:empty\").remove();", true);
ClientBindingMgr.RegisterSaveButton(btnSave);

if (dsReturnProducts.SourceObject == null) { dsReturnProducts.SourceObject = BindingSource.Current; }
if (dsReturnProducts.SourceObject == null) { RegisterBindingsWithClient(dsReturnProducts); }
dsReturnProducts.Bind();



}



public override Sage.Platform.Application.UI.ISmartPartInfo GetSmartPartInfo(Type smartPartInfoType)
{
	ToolsSmartPartInfo tinfo = new ToolsSmartPartInfo();
    	if (BindingSource != null)
	{
		if (BindingSource.Current != null)
		{
			tinfo.Description = BindingSource.Current.ToString();
			tinfo.Title = BindingSource.Current.ToString();
		}
	}
    	
	foreach (Control c in Controls)
	{
		SmartPartToolsContainer cont = c as SmartPartToolsContainer;
		if (cont != null)
		{
			switch (cont.ToolbarLocation)
			{
				case SmartPartToolsLocation.Right:
					foreach (Control tool in cont.Controls)
					{
											tinfo.RightTools.Add(tool);
										}
					break;
				case SmartPartToolsLocation.Center:
					foreach (Control tool in cont.Controls)
					{
						tinfo.CenterTools.Add(tool);
					}
					break;
				case SmartPartToolsLocation.Left:
					foreach (Control tool in cont.Controls)
					{
						tinfo.LeftTools.Add(tool);
					}
					break;
			}
		}
	}
	
		return tinfo;
}

private Sage.Platform.Controls.IEntityForm _formAdapter;

public Sage.Platform.Controls.IEntityForm FormAdapter
{
	get { return _formAdapter ?? (_formAdapter = new ReturnExtendedDetailsAdapter(this)); }
}

public class ReturnExtendedDetailsAdapter : Sage.Platform.WebPortal.Adapters.EntityFormAdapter, Sage.Form.Interfaces.IReturnExtendedDetails
{
	public ReturnExtendedDetailsAdapter(Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider smartPart)
		: base(smartPart) {}

	private Sage.Platform.Controls.ILookupControl _lueContact;
	public Sage.Platform.Controls.ILookupControl lueContact
	{
		get { return FindControl(ref _lueContact, "lueContact"); }
	}
	private Sage.Platform.Controls.IPhoneControl _phPhone;
	public Sage.Platform.Controls.IPhoneControl phPhone
	{
		get { return FindControl(ref _phPhone, "phPhone"); }
	}
	private Sage.Platform.Controls.IEmailControl _emlEmail;
	public Sage.Platform.Controls.IEmailControl emlEmail
	{
		get { return FindControl(ref _emlEmail, "emlEmail"); }
	}
	private Sage.Platform.Controls.IDataGridControl _grdProductReturns;
	public Sage.Platform.Controls.IDataGridControl grdProductReturns
	{
		get { return FindControl(ref _grdProductReturns, "grdProductReturns"); }
	}
	private Sage.Platform.Controls.IControlsListControl _QFControlsList;
	public Sage.Platform.Controls.IControlsListControl QFControlsList
	{
		get { return FindControl(ref _QFControlsList, "QFControlsList"); }
	}
	private Sage.Platform.Controls.ITextBoxControl _txtNotes2;
	public Sage.Platform.Controls.ITextBoxControl txtNotes2
	{
		get { return FindControl(ref _txtNotes2, "txtNotes2"); }
	}
	private Sage.Platform.Controls.IButtonControl _cmdTimeStamp2;
	public Sage.Platform.Controls.IButtonControl cmdTimeStamp2
	{
		get { return FindControl(ref _cmdTimeStamp2, "cmdTimeStamp2"); }
	}
	private Sage.Platform.Controls.ILookupControl _lueAccountProduct;
	public Sage.Platform.Controls.ILookupControl lueAccountProduct
	{
		get { return FindControl(ref _lueAccountProduct, "lueAccountProduct"); }
	}
	private Sage.Platform.Controls.IDataSourceControl _dsReturnProducts;
	public Sage.Platform.Controls.IDataSourceControl dsReturnProducts
	{
		get { return FindControl(ref _dsReturnProducts, "dsReturnProducts"); }
	}
	private Sage.Platform.Controls.IButtonControl _btnSave;
	public Sage.Platform.Controls.IButtonControl btnSave
	{
		get { return FindControl(ref _btnSave, "btnSave"); }
	}

}

</script>

<script type="text/javascript">
</script>
