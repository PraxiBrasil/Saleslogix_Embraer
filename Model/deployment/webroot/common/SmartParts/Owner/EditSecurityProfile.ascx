<%@ Control Language="C#" ClassName="EditSecurityProfile" Inherits="Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider" %>
<%@ Register Assembly="Sage.SalesLogix.Client.GroupBuilder" Namespace="Sage.SalesLogix.Client.GroupBuilder" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.PickList" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.DependencyLookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Lookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Timeline" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.HighLevelTypes" Namespace="Sage.SalesLogix.HighLevelTypes" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.Platform.WebPortal" Namespace="Sage.Platform.WebPortal.SmartParts" TagPrefix="SalesLogix" %>
<%//------------------------------------------------------------------------
//This file was generated by a tool.  Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//------------------------------------------------------------------------ %>
<table border="0" cellpadding="1" cellspacing="0" class="formtable">
         <col width="100%" />
     <tr>
            <td  >
 <div class=" lbl alignleft" >
   <asp:Label ID="ParentTextBox_lbl" AssociatedControlID="ParentTextBox" runat="server" Text="<%$ resources: ParentTextBox.Caption %>" ></asp:Label>
 </div>
  <div  class="textcontrol"   >
<asp:TextBox runat="server" ID="ParentTextBox" ReadOnly="true" Rows="1"
 />
  </div>

      </td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft" >
   <asp:Label ID="NameTextBox_lbl" AssociatedControlID="NameTextBox" runat="server" Text="<%$ resources: NameTextBox.Caption %>" ></asp:Label>
 </div>
  <div  class="textcontrol"   >
<asp:TextBox runat="server" ID="NameTextBox" ReadOnly="true" Rows="1"
 />
  </div>

      </td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft" >
   <asp:Label ID="OwnerTypeTextBox_lbl" AssociatedControlID="OwnerTypeTextBox" runat="server" Text="<%$ resources: OwnerTypeTextBox.Caption %>" ></asp:Label>
 </div>
  <div  class="textcontrol"   >
<asp:TextBox runat="server" ID="OwnerTypeTextBox" ReadOnly="true" Rows="1"
 />
  </div>

      </td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="SecurityProfileLookup_lbl" AssociatedControlID="SecurityProfileLookup" runat="server" Text="<%$ resources: SecurityProfileLookup.Caption %>" ></asp:Label>
 </div>   
  <div  class="textcontrol lookup"  >
<SalesLogix:LookupControl runat="server" ID="SecurityProfileLookup" LookupEntityName="OwnerSecurityProfile" LookupEntityTypeName="Sage.Entity.Interfaces.IOwnerSecurityProfile, Sage.Entity.Interfaces, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" LookupDisplayMode="DropDownList" Required="true" AddEmptyListItem="false" DialogTitle="<%$ resources: SecurityProfileLookup.LookupDialogTitle %>"  >
<LookupProperties>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: SecurityProfileLookup.LookupProperties.ProfileDescription.PropertyHeader %>" PropertyName="ProfileDescription" PropertyType="System.String" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
</LookupProperties>
<LookupPreFilters>
</LookupPreFilters>
</SalesLogix:LookupControl>
  </div>
                 

      </td>
      </tr>
<tr>
            <td  >
<asp:Panel runat="server" ID="QFControlsList" CssClass="controlslist qfActionContainer"
>
   <asp:Button runat="server" ID="OkButton"
 Text="<%$ resources: OkButton.Caption %>" CssClass="slxbutton"  />
   
   <asp:Button runat="server" ID="CancelButton"
 Text="<%$ resources: CancelButton.Caption %>" CssClass="slxbutton"  />
 
</asp:Panel>
      </td>
      </tr>
<tr>
            <td></td>
      </tr>
</table>
 
   <asp:HiddenField ID="HiddenChildId" Value="" runat="server" />

   <asp:HiddenField ID="HiddenParentId" Value="" runat="server" />

   <asp:HiddenField ID="HiddenProfileId" Value="" runat="server" />

 
 <SalesLogix:SmartPartToolsContainer runat="server" ID="EditSecurityProfile_RTools" ToolbarLocation="right">
  <SalesLogix:PageLink ID="lnkEditSecurityProfileHelp" runat="server" LinkType="HelpFileName" ToolTip="<%$ resources: Portal, Help_ToolTip %>" Target="MCWebHelp" NavigateUrl="Editing_a_Security_Profile_Within_a_Team" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Help_16x16"></SalesLogix:PageLink> </SalesLogix:SmartPartToolsContainer>

<script runat="server" type="text/C#">
private Sage.Platform.Security.IRoleSecurityService _roleSecurityService;
/// <summary>
/// Gets or sets the role security service.
/// </summary>
/// <value>The role security service.</value>
[Sage.Platform.Application.ServiceDependency]
public Sage.Platform.Security.IRoleSecurityService RoleSecurityService
{
   set
      {
         _roleSecurityService = Sage.Platform.Application.ApplicationContext.Current.Services.Get<Sage.Platform.Security.IRoleSecurityService>(true);
      }
      get
      {
         return _roleSecurityService;
      }
}

public override Type EntityType
{
	get { return typeof(Sage.Entity.Interfaces.IOwner); }
}

 

protected override void OnAddEntityBindings() { 
    
                        // NameTextBox.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding NameTextBoxTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Owner.OwnerDescription", NameTextBox, "Text");
        BindingSource.Bindings.Add(NameTextBoxTextBinding);
                       // OwnerTypeTextBox.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding OwnerTypeTextBoxTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Owner.Type", OwnerTypeTextBox, "Text");
        BindingSource.Bindings.Add(OwnerTypeTextBoxTextBinding);
       
        
        
        
     
   
}
	   	   	   	   	   	   	   
protected void OkButton_ClickAction(object sender, EventArgs e) {
Sage.Platform.DynamicMethod.DynamicMethodLibrary lib = Sage.Platform.Orm.DynamicMethodLibraryHelper.Instance;
Object[] methodArgs = new Object[] { FormAdapter, e };
lib.Execute("EditSecurityProfile.OkButton_OnClick", methodArgs);
}

protected override void OnWireEventHandlers()
{
 base.OnWireEventHandlers();
 OkButton.Click += new EventHandler(OkButton_ClickAction);
OkButton.Click += new EventHandler(DialogService.CloseEventHappened);
OkButton.Click += new EventHandler(Refresh);
CancelButton.Click += new EventHandler(DialogService.CloseEventHappened);


}

protected void quickformload0(object sender, EventArgs e) {
Sage.Platform.DynamicMethod.DynamicMethodLibrary lib = Sage.Platform.Orm.DynamicMethodLibraryHelper.Instance;
Object[] methodArgs = new Object[] { FormAdapter, e };
lib.Execute("EditSecurityProfile.OnLoad1", methodArgs);
}
private bool _runActivating;
protected override void OnActivating()
{
_runActivating = true;
}
private void DoActivating()
{
quickformload0(this, EventArgs.Empty);

}
protected override void OnFormBound()
{
Sage.Platform.WebPortal.EntityPage epage = Page as Sage.Platform.WebPortal.EntityPage;
        if (epage != null)
            _runActivating = (epage.IsNewEntity || _runActivating);
if (_runActivating) DoActivating();
ClientBindingMgr.RegisterBoundControl(SecurityProfileLookup);

ClientBindingMgr.RegisterSaveButton(OkButton);

ScriptManager.RegisterStartupScript(Page, GetType(), "cleanupcontainer", "jQuery(\".controlslist > div:empty\").remove();", true);
ClientBindingMgr.RegisterDialogCancelButton(CancelButton);


}



public override Sage.Platform.Application.UI.ISmartPartInfo GetSmartPartInfo(Type smartPartInfoType)
{
	ToolsSmartPartInfo tinfo = new ToolsSmartPartInfo();
    	if (BindingSource != null)
	{
		if (BindingSource.Current != null)
		{
			tinfo.Description = BindingSource.Current.ToString();
			tinfo.Title = BindingSource.Current.ToString();
		}
	}
    	
	foreach (Control c in Controls)
	{
		SmartPartToolsContainer cont = c as SmartPartToolsContainer;
		if (cont != null)
		{
			switch (cont.ToolbarLocation)
			{
				case SmartPartToolsLocation.Right:
					foreach (Control tool in cont.Controls)
					{
											tinfo.RightTools.Add(tool);
										}
					break;
				case SmartPartToolsLocation.Center:
					foreach (Control tool in cont.Controls)
					{
						tinfo.CenterTools.Add(tool);
					}
					break;
				case SmartPartToolsLocation.Left:
					foreach (Control tool in cont.Controls)
					{
						tinfo.LeftTools.Add(tool);
					}
					break;
			}
		}
	}
	
		return tinfo;
}

private Sage.Platform.Controls.IEntityForm _formAdapter;

public Sage.Platform.Controls.IEntityForm FormAdapter
{
	get { return _formAdapter ?? (_formAdapter = new EditSecurityProfileAdapter(this)); }
}

public class EditSecurityProfileAdapter : Sage.Platform.WebPortal.Adapters.EntityFormAdapter, Sage.Form.Interfaces.IEditSecurityProfile
{
	public EditSecurityProfileAdapter(Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider smartPart)
		: base(smartPart) {}

	private Sage.Platform.Controls.ITextBoxControl _ParentTextBox;
	public Sage.Platform.Controls.ITextBoxControl ParentTextBox
	{
		get { return FindControl(ref _ParentTextBox, "ParentTextBox"); }
	}
	private Sage.Platform.Controls.ITextBoxControl _NameTextBox;
	public Sage.Platform.Controls.ITextBoxControl NameTextBox
	{
		get { return FindControl(ref _NameTextBox, "NameTextBox"); }
	}
	private Sage.Platform.Controls.ITextBoxControl _OwnerTypeTextBox;
	public Sage.Platform.Controls.ITextBoxControl OwnerTypeTextBox
	{
		get { return FindControl(ref _OwnerTypeTextBox, "OwnerTypeTextBox"); }
	}
	private Sage.Platform.Controls.ILookupControl _SecurityProfileLookup;
	public Sage.Platform.Controls.ILookupControl SecurityProfileLookup
	{
		get { return FindControl(ref _SecurityProfileLookup, "SecurityProfileLookup"); }
	}
	private Sage.Platform.Controls.IControlsListControl _QFControlsList;
	public Sage.Platform.Controls.IControlsListControl QFControlsList
	{
		get { return FindControl(ref _QFControlsList, "QFControlsList"); }
	}
	private Sage.Platform.Controls.IButtonControl _OkButton;
	public Sage.Platform.Controls.IButtonControl OkButton
	{
		get { return FindControl(ref _OkButton, "OkButton"); }
	}
	private Sage.Platform.Controls.IButtonControl _CancelButton;
	public Sage.Platform.Controls.IButtonControl CancelButton
	{
		get { return FindControl(ref _CancelButton, "CancelButton"); }
	}
	private Sage.Platform.Controls.IHiddenControl _HiddenChildId;
	public Sage.Platform.Controls.IHiddenControl HiddenChildId
	{
		get { return FindControl(ref _HiddenChildId, "HiddenChildId"); }
	}
	private Sage.Platform.Controls.IHiddenControl _HiddenParentId;
	public Sage.Platform.Controls.IHiddenControl HiddenParentId
	{
		get { return FindControl(ref _HiddenParentId, "HiddenParentId"); }
	}
	private Sage.Platform.Controls.IHiddenControl _HiddenProfileId;
	public Sage.Platform.Controls.IHiddenControl HiddenProfileId
	{
		get { return FindControl(ref _HiddenProfileId, "HiddenProfileId"); }
	}

	public void OnLoad1(System.EventArgs e)
	{
		Sage.Platform.DynamicMethod.DynamicMethodLibrary lib = Sage.Platform.Orm.DynamicMethodLibraryHelper.Instance;
		Object[] methodArgs = new Object[] { this, e };
		lib.Execute("EditSecurityProfile.OnLoad1", methodArgs);
	}
	public void OkButton_OnClick(System.EventArgs e)
	{
		Sage.Platform.DynamicMethod.DynamicMethodLibrary lib = Sage.Platform.Orm.DynamicMethodLibraryHelper.Instance;
		Object[] methodArgs = new Object[] { this, e };
		lib.Execute("EditSecurityProfile.OkButton_OnClick", methodArgs);
	}
}

</script>

<script type="text/javascript">
</script>
