<%@ Control Language="C#" ClassName="AccountContracts" Inherits="Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider" %>
<%@ Register Assembly="Sage.SalesLogix.Client.GroupBuilder" Namespace="Sage.SalesLogix.Client.GroupBuilder" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.PickList" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.DependencyLookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Lookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Timeline" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.HighLevelTypes" Namespace="Sage.SalesLogix.HighLevelTypes" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.Platform.WebPortal" Namespace="Sage.Platform.WebPortal.SmartParts" TagPrefix="SalesLogix" %>
<%//------------------------------------------------------------------------
//This file was generated by a tool.  Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//------------------------------------------------------------------------ %>
<table border="0" cellpadding="1" cellspacing="0" class="formtable">
         <col width="60%" />
            <col width="40%" />
     <tr>
            <td  >
<SalesLogix:SlxGridView runat="server" ID="grdContracts" GridLines="None"
AutoGenerateColumns="false" CellPadding="4" CssClass="datagrid" PagerStyle-CssClass="gridPager"
AlternatingRowStyle-CssClass="rowdk" RowStyle-CssClass="rowlt" SelectedRowStyle-CssClass="rowSelected" ShowEmptyTable="true" EnableViewState="false"
 AllowPaging="true" PageSize="20" OnPageIndexChanging="grdContractspage_changing" EmptyTableRowText="<%$ resources: grdContracts.EmptyTableRowText %>"  ExpandableRows="True" ResizableColumns="True"  OnRowCommand="grdContracts_RowCommand" 
 DataKeyNames="InstanceId,Id" 
 AllowSorting="true" OnSorting="grdContracts_Sorting"  ShowSortIcon="true" >
<Columns>
   <asp:TemplateField   HeaderText="<%$ resources: grdContracts.001b0b13-d103-45aa-8dd0-190d08b6fb09.ColumnHeading %>"       SortExpression="ReferenceNumber"  >
    <itemtemplate>
      <SalesLogix:PageLink runat="server" NavigateUrl="Contract"
   EntityId='<%# dtsContracts.getPropertyValue(Container.DataItem, "Id") %>'     Text='<%# dtsContracts.getPropertyValue(Container.DataItem, "ReferenceNumber") %>' 
         LinkType="EntityAlias"></SalesLogix:PageLink>
     </itemtemplate></asp:TemplateField>
      <asp:TemplateField   HeaderText="<%$ resources: grdContracts.9c94de3f-e0a3-4c23-a8a5-b46425bcd271.ColumnHeading %>"       SortExpression="ServiceCode"  >
    <itemtemplate>
   <SalesLogix:PickListControl runat="server" ID="grdContractscol2" PickListId="" ValueStoredAsText="False" PickListName="Contract Service Type" PickListValue='<%#  dtsContracts.getPropertyValue(Container.DataItem, "ServiceCode")  %>' DisplayMode="AsText" CssClass="" />
   </itemtemplate></asp:TemplateField>
    <asp:TemplateField   HeaderText="<%$ resources: grdContracts.7d546190-420b-499a-a283-0bb8046ef105.ColumnHeading %>"       SortExpression="TypeCode"  >
    <itemtemplate>
   <SalesLogix:PickListControl runat="server" ID="grdContractscol3" PickListId="" ValueStoredAsText="False" PickListName="Contract Type" PickListValue='<%#  dtsContracts.getPropertyValue(Container.DataItem, "TypeCode")  %>' DisplayMode="AsText" CssClass="" />
   </itemtemplate></asp:TemplateField>
    <asp:BoundField DataField="IsActive" 
      HeaderText="<%$ resources: grdContracts.8f82184a-349d-41cd-b141-c29a902b2b57.ColumnHeading %>"       SortExpression="IsActive"    >
      </asp:BoundField>
    <asp:BoundField DataField="Period" 
      HeaderText="<%$ resources: grdContracts.f32f1085-c218-4929-8849-49f9476fd487.ColumnHeading %>"       SortExpression="Period"    >
      </asp:BoundField>
    <asp:BoundField DataField="Remaining" 
      HeaderText="<%$ resources: grdContracts.92fc3f8a-5218-48e4-bf5c-472ba6b530a5.ColumnHeading %>"       SortExpression="Remaining"    >
      </asp:BoundField>
    <asp:TemplateField   HeaderText="<%$ resources: grdContracts.17699a8a-b6c2-4809-bff4-962ca70a2ed2.ColumnHeading %>"       SortExpression="ServiceCode"  >
    <itemtemplate>
   <SalesLogix:DateTimePicker runat="server" ID="grdContractscol7" DisplayTime="false"  DisplayMode="AsText" DateTimeValue='<%#  dtsContracts.getPropertyValue(Container.DataItem, "StartDate")  %>'  CssClass=""  />
   </itemtemplate></asp:TemplateField>
    <asp:TemplateField   HeaderText="<%$ resources: grdContracts.f215473b-7780-4828-a637-3ca7d3f0c97c.ColumnHeading %>"       SortExpression="EndingDate"  >
    <itemtemplate>
   <SalesLogix:DateTimePicker runat="server" ID="grdContractscol8" DisplayTime="false"  DisplayMode="AsText" DateTimeValue='<%#  dtsContracts.getPropertyValue(Container.DataItem, "EndingDate")  %>'  CssClass=""  />
   </itemtemplate></asp:TemplateField>
  <asp:CommandField ShowSelectButton="true"
  SelectText="<%$ resources: grdContracts.05e6dc9b-f47e-4452-acb5-e93353388a78.Text %>" ButtonType="link" 
             >
  	    </asp:CommandField>
 </Columns>
    <PagerSettings Mode="NumericFirstLast" FirstPageImageUrl="ImageResource.axd?scope=global&type=Global_Images&key=Start_16x16" LastPageImageUrl="ImageResource.axd?scope=global&type=Global_Images&key=End_16x16" />
</SalesLogix:SlxGridView>

<script runat="server" type="text/C#">


protected void grdContractspage_changing(object sender, GridViewPageEventArgs e)
{
 grdContracts.PageIndex = e.NewPageIndex;
 grdContracts.DataBind();
}
protected void grdContracts_Sorting(object sender, GridViewSortEventArgs e) { }
protected void grdContracts_RowCommand(object sender, GridViewCommandEventArgs e)
{
    if (e.CommandName == "Page")
        return;
    int rowIndex;
    if (Int32.TryParse(e.CommandArgument.ToString(), out rowIndex))
    {
        dtsContracts.SelectedIndex = rowIndex;
		object currentEntity = dtsContracts.Current;
        if ((currentEntity is Sage.Platform.ComponentModel.ComponentView) && !((Sage.Platform.ComponentModel.ComponentView)currentEntity).IsVirtualComponent)
            currentEntity = ((Sage.Platform.ComponentModel.ComponentView)currentEntity).Component;
		string id = String.Empty;
        //Check if this is an unpersisted entity and use its InstanceId
        if (Sage.Platform.WebPortal.PortalUtil.ObjectIsNewEntity(currentEntity))
        {
		    if (grdContracts.DataKeys[0].Values.Count > 1) {
                foreach (DictionaryEntry val in grdContracts.DataKeys[rowIndex].Values)
                {
                    if (val.Key.ToString() == "InstanceId")
                    {
                        Guid instanceId = (Guid)val.Value;
                        dtsContracts.SetCurrentEntityByInstanceId(instanceId);
                        id = instanceId.ToString();
		                currentEntity = dtsContracts.Current;
                        if ((currentEntity is Sage.Platform.ComponentModel.ComponentView) && !((Sage.Platform.ComponentModel.ComponentView)currentEntity).IsVirtualComponent)
                            currentEntity = ((Sage.Platform.ComponentModel.ComponentView)currentEntity).Component;
                    }
                }                 
            }
        }
        else
        {
            foreach (DictionaryEntry val in grdContracts.DataKeys[rowIndex].Values)
            {
                if (val.Key.ToString() != "InstanceId")
                {
                    id = val.Value.ToString();
                }
            }
        }		
	}
    grdContracts_refresh();
}
	
	protected void grdContracts_refresh()
	{
		if (PageWorkItem != null) {
			Sage.Platform.WebPortal.Services.IPanelRefreshService refresher = PageWorkItem.Services.Get<Sage.Platform.WebPortal.Services.IPanelRefreshService>();
			if (refresher != null)
			{
				refresher.RefreshAll();
			}
			else
			{
				Response.Redirect(Request.Url.ToString());
			}
		}
	}
	
        </script>

      </td>
                <td  >
 <div  class="twocoltextcontrol"   >
<asp:TextBox runat="server" ID="txtComments" Enabled="false" Rows="4"
TextMode="MultiLine" Columns="40"
 />
  </div>

      </td>
      </tr>
<tr>
            <td></td>
                <td></td>
      </tr>
</table>
 

 <SalesLogix:SmartPartToolsContainer runat="server" ID="AccountContracts_RTools" ToolbarLocation="right">
    <asp:ImageButton runat="server" ID="cmdAddContract"
 AlternateText="<%$ resources: cmdAddContract.Caption %>"  ToolTip="<%$ resources: cmdAddContract.ToolTip %>" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=plus_16x16"  />
 
  <SalesLogix:PageLink ID="lnkAccountContractsHelp" runat="server" LinkType="HelpFileName" ToolTip="<%$ resources: Portal, Help_ToolTip %>" Target="MCWebHelp" NavigateUrl="accountcontractstab.htm" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Help_16x16"></SalesLogix:PageLink> </SalesLogix:SmartPartToolsContainer>

<script runat="server" type="text/C#">
private Sage.Platform.Security.IRoleSecurityService _roleSecurityService;
/// <summary>
/// Gets or sets the role security service.
/// </summary>
/// <value>The role security service.</value>
[Sage.Platform.Application.ServiceDependency]
public Sage.Platform.Security.IRoleSecurityService RoleSecurityService
{
   set
      {
         _roleSecurityService = Sage.Platform.Application.ApplicationContext.Current.Services.Get<Sage.Platform.Security.IRoleSecurityService>(true);
      }
      get
      {
         return _roleSecurityService;
      }
}

public override Type EntityType
{
	get { return typeof(Sage.Entity.Interfaces.IAccount); }
}

 private Sage.Platform.WebPortal.Binding.WebEntityListBindingSource _dtsContracts;
public Sage.Platform.WebPortal.Binding.WebEntityListBindingSource dtsContracts
{ 
  get 
  {
    if (_dtsContracts == null)
    {
             _dtsContracts = new Sage.Platform.WebPortal.Binding.WebEntityListBindingSource(typeof(Sage.Entity.Interfaces.IContract), 
	    EntityType              ,"Contracts", System.Reflection.MemberTypes.Property);
                   _dtsContracts.UseSmartQuery = true;
      	   	}
 	return _dtsContracts;
  }
}

void dtsContracts_OnCurrentEntitySet(object sender, EventArgs e) 
{
      if (Visible)
    { 
		if(BindingSource.Current != null)
		{
		
      
        dtsContracts.SourceObject = BindingSource.Current;
   		}
    }
   if (Visible)
   {   
      RegisterBindingsWithClient(dtsContracts);
   }
}

 



 

protected override void OnAddEntityBindings() { 
       dtsContracts.Bindings.Add(new Sage.Platform.WebPortal.Binding.WebEntityListBinding("Contracts", grdContracts ));
   dtsContracts.BindFieldNames = new String[] { "Id","ReferenceNumber","ServiceCode","TypeCode","IsActive","Period","Remaining","StartDate","EndingDate","Notes" };
                        // txtComments.Text Binding 
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtCommentsTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Notes", txtComments, "Text");
        dtsContracts.Bindings.Add(txtCommentsTextBinding);
    
     BindingSource.OnCurrentEntitySet += new EventHandler(dtsContracts_OnCurrentEntitySet);
     
    }
	   	   
protected void cmdAddContract_ClickAction(object sender, EventArgs e) {
      Response.Redirect(string.Format("~/InsertContract.aspx?modeid=Insert&entityId={0}", (BindingSource.Current as Sage.Platform.ComponentModel.IComponentReference).Id));
   
}

protected override void OnWireEventHandlers()
{
 base.OnWireEventHandlers();
 cmdAddContract.Click += new ImageClickEventHandler(cmdAddContract_ClickAction);


}

protected override void OnFormBound()
{
if (dtsContracts.SourceObject == null) { dtsContracts.SourceObject = BindingSource.Current; }
if (dtsContracts.SourceObject == null) { RegisterBindingsWithClient(dtsContracts); }
dtsContracts.Bind( true );



}



public override Sage.Platform.Application.UI.ISmartPartInfo GetSmartPartInfo(Type smartPartInfoType)
{
	ToolsSmartPartInfo tinfo = new ToolsSmartPartInfo();
    	if (BindingSource != null)
	{
		if (BindingSource.Current != null)
		{
			tinfo.Description = BindingSource.Current.ToString();
			tinfo.Title = BindingSource.Current.ToString();
		}
	}
    	
	foreach (Control c in Controls)
	{
		SmartPartToolsContainer cont = c as SmartPartToolsContainer;
		if (cont != null)
		{
			switch (cont.ToolbarLocation)
			{
				case SmartPartToolsLocation.Right:
					foreach (Control tool in cont.Controls)
					{
											tinfo.RightTools.Add(tool);
										}
					break;
				case SmartPartToolsLocation.Center:
					foreach (Control tool in cont.Controls)
					{
						tinfo.CenterTools.Add(tool);
					}
					break;
				case SmartPartToolsLocation.Left:
					foreach (Control tool in cont.Controls)
					{
						tinfo.LeftTools.Add(tool);
					}
					break;
			}
		}
	}
	
		return tinfo;
}

private Sage.Platform.Controls.IEntityForm _formAdapter;

public Sage.Platform.Controls.IEntityForm FormAdapter
{
	get { return _formAdapter ?? (_formAdapter = new AccountContractsAdapter(this)); }
}

public class AccountContractsAdapter : Sage.Platform.WebPortal.Adapters.EntityFormAdapter, Sage.Form.Interfaces.IAccountContracts
{
	public AccountContractsAdapter(Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider smartPart)
		: base(smartPart) {}

	private Sage.Platform.Controls.IDataGridControl _grdContracts;
	public Sage.Platform.Controls.IDataGridControl grdContracts
	{
		get { return FindControl(ref _grdContracts, "grdContracts"); }
	}
	private Sage.Platform.Controls.ITextBoxControl _txtComments;
	public Sage.Platform.Controls.ITextBoxControl txtComments
	{
		get { return FindControl(ref _txtComments, "txtComments"); }
	}
	private Sage.Platform.Controls.IDataSourceControl _dtsContracts;
	public Sage.Platform.Controls.IDataSourceControl dtsContracts
	{
		get { return FindControl(ref _dtsContracts, "dtsContracts"); }
	}
	private Sage.Platform.Controls.IButtonControl _cmdAddContract;
	public Sage.Platform.Controls.IButtonControl cmdAddContract
	{
		get { return FindControl(ref _cmdAddContract, "cmdAddContract"); }
	}

}

</script>

<script type="text/javascript">
</script>
