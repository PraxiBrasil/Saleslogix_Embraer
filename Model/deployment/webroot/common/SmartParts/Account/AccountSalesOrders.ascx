<%@ Control Language="C#" ClassName="AccountSalesOrders" Inherits="Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider" %>
<%@ Register Assembly="Sage.SalesLogix.Client.GroupBuilder" Namespace="Sage.SalesLogix.Client.GroupBuilder" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.PickList" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.DependencyLookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Lookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Timeline" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.HighLevelTypes" Namespace="Sage.SalesLogix.HighLevelTypes" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.Platform.WebPortal" Namespace="Sage.Platform.WebPortal.SmartParts" TagPrefix="SalesLogix" %>
<%//------------------------------------------------------------------------
//This file was generated by a tool.  Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//------------------------------------------------------------------------ %>
  <div class="mainContentHeader"><asp:Label ID="grdSalesOrders_lbl" AssociatedControlID="grdSalesOrders" runat="server" Text="<%$ resources: grdSalesOrders.Caption %>" ></asp:Label></div>
<SalesLogix:SlxGridView runat="server" ID="grdSalesOrders" GridLines="None"
AutoGenerateColumns="false" CellPadding="4" CssClass="datagrid" PagerStyle-CssClass="gridPager"
AlternatingRowStyle-CssClass="rowdk" RowStyle-CssClass="rowlt" SelectedRowStyle-CssClass="rowSelected" ShowEmptyTable="true" EnableViewState="false"
 ExpandableRows="True" ResizableColumns="True"  OnRowCommand="grdSalesOrders_RowCommand" 
 DataKeyNames="InstanceId,Id" 
 OnRowDeleting="grdSalesOrders_RowDeleting" OnRowDataBound="grdSalesOrders_RowDataBound" >
<Columns>
   <asp:TemplateField   HeaderText="<%$ resources: grdSalesOrders.40c5884b-4484-49d9-9d1e-3ec31d589e08.ColumnHeading %>"        >
    <itemtemplate>
      <SalesLogix:PageLink runat="server" NavigateUrl="SalesOrder"
   EntityId='<%# dsSalesOrders.getPropertyValue(Container.DataItem, "Id") %>'     Text='<%# dsSalesOrders.getPropertyValue(Container.DataItem, "SalesOrderNumber") %>' 
         LinkType="EntityAlias"></SalesLogix:PageLink>
     </itemtemplate></asp:TemplateField>
      <asp:BoundField DataField="Status" 
      HeaderText="<%$ resources: grdSalesOrders.1806aa1b-8436-491e-8c56-1ac9d98280b7.ColumnHeading %>"          >
      </asp:BoundField>
    <asp:BoundField DataField="BillToName" 
      HeaderText="<%$ resources: grdSalesOrders.099c10a1-7611-44f3-92c8-d6686f701a71.ColumnHeading %>"          >
      </asp:BoundField>
    <asp:BoundField DataField="ShipToName" 
      HeaderText="<%$ resources: grdSalesOrders.8ceb34cd-5e95-4e9a-921e-c810ed281dbc.ColumnHeading %>"          >
      </asp:BoundField>
    <asp:TemplateField   HeaderText="<%$ resources: grdSalesOrders.cc919862-34ef-4e0f-9157-8f1b019795f6.ColumnHeading %>"        >
    <itemtemplate>
   <SalesLogix:PickListControl runat="server" ID="grdSalesOrderscol5" PickListId="" ValueStoredAsText="False" PickListName="Delivery Methods" PickListValue='<%#  dsSalesOrders.getPropertyValue(Container.DataItem, "ShipVia")  %>' DisplayMode="AsText" CssClass="" />
   </itemtemplate></asp:TemplateField>
    <asp:BoundField DataField="CustomerPurchaseOrderNumber" 
      HeaderText="<%$ resources: grdSalesOrders.15f01097-c071-4a30-bca8-b1f3d7ff6616.ColumnHeading %>"          >
      </asp:BoundField>
   <asp:ButtonField CommandName="Delete" 
  Text="<%$ resources: grdSalesOrders.e9313b46-2561-4fa5-95be-a8fc64b4ca6f.Text %>"                >
  	    </asp:ButtonField>
   </Columns>
</SalesLogix:SlxGridView>

<script runat="server" type="text/C#">

                     private int _grdSalesOrdersdeleteColumnIndex = -2;
protected int grdSalesOrdersDeleteColumnIndex
{
	get
	{
		if (_grdSalesOrdersdeleteColumnIndex == -2)
		{
			int bias = (grdSalesOrders.ExpandableRows) ? 1 : 0;
			_grdSalesOrdersdeleteColumnIndex = -1;
			int colcount = 0;
			foreach (DataControlField col in grdSalesOrders.Columns)
			{
				ButtonField btn = col as ButtonField;
				if (btn != null)
				{
					if (btn.CommandName == "Delete")
					{
						_grdSalesOrdersdeleteColumnIndex = colcount + bias;
						break;
					}
				}
				colcount++;
			}
		}
		return _grdSalesOrdersdeleteColumnIndex;
	}
}

protected void grdSalesOrders_RowDataBound(object sender, GridViewRowEventArgs e)
{
	if (e.Row.RowType == DataControlRowType.DataRow)
	{
		if ((grdSalesOrdersDeleteColumnIndex >= 0) && (grdSalesOrdersDeleteColumnIndex < e.Row.Cells.Count))
		{
			TableCell cell = e.Row.Cells[grdSalesOrdersDeleteColumnIndex];
			foreach (Control c in cell.Controls)
			{
				LinkButton btn = c as LinkButton;
				if (btn != null)
				{
					btn.Attributes.Add("onclick", "javascript: return confirm('" + Sage.Platform.WebPortal.PortalUtil.JavaScriptEncode(GetLocalResourceObject("grdSalesOrders.e9313b46-2561-4fa5-95be-a8fc64b4ca6f.ConfirmationMessage").ToString()) + "');");
					return;
				}
			}
		}
	}
}
   
protected void grdSalesOrders_RowCommand(object sender, GridViewCommandEventArgs e)
{
    if (e.CommandName == "Page")
        return;
    int rowIndex;
    if (Int32.TryParse(e.CommandArgument.ToString(), out rowIndex))
    {
        dsSalesOrders.SelectedIndex = rowIndex;
		object currentEntity = dsSalesOrders.Current;
        if ((currentEntity is Sage.Platform.ComponentModel.ComponentView) && !((Sage.Platform.ComponentModel.ComponentView)currentEntity).IsVirtualComponent)
            currentEntity = ((Sage.Platform.ComponentModel.ComponentView)currentEntity).Component;
		string id = String.Empty;
        //Check if this is an unpersisted entity and use its InstanceId
        if (Sage.Platform.WebPortal.PortalUtil.ObjectIsNewEntity(currentEntity))
        {
		    if (grdSalesOrders.DataKeys[0].Values.Count > 1) {
                foreach (DictionaryEntry val in grdSalesOrders.DataKeys[rowIndex].Values)
                {
                    if (val.Key.ToString() == "InstanceId")
                    {
                        Guid instanceId = (Guid)val.Value;
                        dsSalesOrders.SetCurrentEntityByInstanceId(instanceId);
                        id = instanceId.ToString();
		                currentEntity = dsSalesOrders.Current;
                        if ((currentEntity is Sage.Platform.ComponentModel.ComponentView) && !((Sage.Platform.ComponentModel.ComponentView)currentEntity).IsVirtualComponent)
                            currentEntity = ((Sage.Platform.ComponentModel.ComponentView)currentEntity).Component;
                    }
                }                 
            }
        }
        else
        {
            foreach (DictionaryEntry val in grdSalesOrders.DataKeys[rowIndex].Values)
            {
                if (val.Key.ToString() != "InstanceId")
                {
                    id = val.Value.ToString();
                }
            }
        }		
		if (e.CommandName.Equals("Delete"))
		{
            Sage.Entity.Interfaces.IAccount mainentity = this.BindingSource.Current as Sage.Entity.Interfaces.IAccount;
			if (mainentity != null)
			{
			    Sage.Entity.Interfaces.ISalesOrder childEntity = null;
			    if((currentEntity != null) && (currentEntity is Sage.Entity.Interfaces.ISalesOrder))
			    {
			        childEntity = (Sage.Entity.Interfaces.ISalesOrder)currentEntity;    
			    }
			    else if (id != null)
			    {
                    childEntity = Sage.Platform.EntityFactory.GetById<Sage.Entity.Interfaces.ISalesOrder>(id);
            }
				if(childEntity != null)
				{
			         mainentity.SalesOrders.Remove(childEntity);
					 mainentity.Save();
					 if((childEntity.PersistentState & Sage.Platform.Orm.Interfaces.PersistentState.New) <= 0)
					 {
					     childEntity.Delete();
					 }
					 dsSalesOrders.SelectedIndex = -1;
			    }
		    }
		}
	}
    grdSalesOrders_refresh();
}
	
	protected void grdSalesOrders_refresh()
	{
		if (PageWorkItem != null) {
			Sage.Platform.WebPortal.Services.IPanelRefreshService refresher = PageWorkItem.Services.Get<Sage.Platform.WebPortal.Services.IPanelRefreshService>();
			if (refresher != null)
			{
				refresher.RefreshAll();
			}
			else
			{
				Response.Redirect(Request.Url.ToString());
			}
		}
	}
	
            protected void grdSalesOrders_RowDeleting(object sender, GridViewDeleteEventArgs e)
	{
		grdSalesOrders.SelectedIndex = -1;
	}
	</script>
 

 <SalesLogix:SmartPartToolsContainer runat="server" ID="AccountSalesOrders_RTools" ToolbarLocation="right">
    <asp:ImageButton runat="server" ID="btnInserSalesOrder"
 ToolTip="<%$ resources: btnInserSalesOrder.ToolTip %>" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=plus_16X16"  />
 
  <SalesLogix:PageLink ID="lnkAccountSalesOrdersHelp" runat="server" LinkType="HelpFileName" ToolTip="<%$ resources: Portal, Help_ToolTip %>" Target="MCWebHelp" NavigateUrl="salesorderstab.htm" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Help_16x16"></SalesLogix:PageLink> </SalesLogix:SmartPartToolsContainer>

<script runat="server" type="text/C#">
private Sage.Platform.Security.IRoleSecurityService _roleSecurityService;
/// <summary>
/// Gets or sets the role security service.
/// </summary>
/// <value>The role security service.</value>
[Sage.Platform.Application.ServiceDependency]
public Sage.Platform.Security.IRoleSecurityService RoleSecurityService
{
   set
      {
         _roleSecurityService = Sage.Platform.Application.ApplicationContext.Current.Services.Get<Sage.Platform.Security.IRoleSecurityService>(true);
      }
      get
      {
         return _roleSecurityService;
      }
}

public override Type EntityType
{
	get { return typeof(Sage.Entity.Interfaces.IAccount); }
}

 private Sage.Platform.WebPortal.Binding.WebEntityListBindingSource _dsSalesOrders;
public Sage.Platform.WebPortal.Binding.WebEntityListBindingSource dsSalesOrders
{ 
  get 
  {
    if (_dsSalesOrders == null)
    {
             _dsSalesOrders = new Sage.Platform.WebPortal.Binding.WebEntityListBindingSource(typeof(Sage.Entity.Interfaces.ISalesOrder), 
	    EntityType              ,"SalesOrders", System.Reflection.MemberTypes.Property);
                   _dsSalesOrders.UseSmartQuery = true;
      	   	}
 	return _dsSalesOrders;
  }
}

void dsSalesOrders_OnCurrentEntitySet(object sender, EventArgs e) 
{
      if (Visible)
    { 
		if(BindingSource.Current != null)
		{
		
      
        dsSalesOrders.SourceObject = BindingSource.Current;
   		}
    }
   if (Visible)
   {   
      RegisterBindingsWithClient(dsSalesOrders);
   }
}

 



 

protected override void OnAddEntityBindings() { 
       dsSalesOrders.Bindings.Add(new Sage.Platform.WebPortal.Binding.WebEntityListBinding("SalesOrders", grdSalesOrders ));
   dsSalesOrders.BindFieldNames = new String[] { "Id","SalesOrderNumber","Status","BillToName","ShipToName","ShipVia","CustomerPurchaseOrderNumber" };
     
     BindingSource.OnCurrentEntitySet += new EventHandler(dsSalesOrders_OnCurrentEntitySet);
     
    }
	   
protected void btnInserSalesOrder_ClickAction(object sender, EventArgs e) {
      Response.Redirect(string.Format("~/InsertSalesOrder.aspx?modeid=Insert&entityId={0}", (BindingSource.Current as Sage.Platform.ComponentModel.IComponentReference).Id));
   
}

protected override void OnWireEventHandlers()
{
 base.OnWireEventHandlers();
 btnInserSalesOrder.Click += new ImageClickEventHandler(btnInserSalesOrder_ClickAction);


}

protected override void OnFormBound()
{
if (dsSalesOrders.SourceObject == null) { dsSalesOrders.SourceObject = BindingSource.Current; }
if (dsSalesOrders.SourceObject == null) { RegisterBindingsWithClient(dsSalesOrders); }
dsSalesOrders.Bind();



}



public override Sage.Platform.Application.UI.ISmartPartInfo GetSmartPartInfo(Type smartPartInfoType)
{
	ToolsSmartPartInfo tinfo = new ToolsSmartPartInfo();
    	if (BindingSource != null)
	{
		if (BindingSource.Current != null)
		{
			tinfo.Description = BindingSource.Current.ToString();
			tinfo.Title = BindingSource.Current.ToString();
		}
	}
    	
	foreach (Control c in Controls)
	{
		SmartPartToolsContainer cont = c as SmartPartToolsContainer;
		if (cont != null)
		{
			switch (cont.ToolbarLocation)
			{
				case SmartPartToolsLocation.Right:
					foreach (Control tool in cont.Controls)
					{
											tinfo.RightTools.Add(tool);
										}
					break;
				case SmartPartToolsLocation.Center:
					foreach (Control tool in cont.Controls)
					{
						tinfo.CenterTools.Add(tool);
					}
					break;
				case SmartPartToolsLocation.Left:
					foreach (Control tool in cont.Controls)
					{
						tinfo.LeftTools.Add(tool);
					}
					break;
			}
		}
	}
	
		return tinfo;
}

private Sage.Platform.Controls.IEntityForm _formAdapter;

public Sage.Platform.Controls.IEntityForm FormAdapter
{
	get { return _formAdapter ?? (_formAdapter = new AccountSalesOrdersAdapter(this)); }
}

public class AccountSalesOrdersAdapter : Sage.Platform.WebPortal.Adapters.EntityFormAdapter, Sage.Form.Interfaces.IAccountSalesOrders
{
	public AccountSalesOrdersAdapter(Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider smartPart)
		: base(smartPart) {}

	private Sage.Platform.Controls.IDataGridControl _grdSalesOrders;
	public Sage.Platform.Controls.IDataGridControl grdSalesOrders
	{
		get { return FindControl(ref _grdSalesOrders, "grdSalesOrders"); }
	}
	private Sage.Platform.Controls.IDataSourceControl _dsSalesOrders;
	public Sage.Platform.Controls.IDataSourceControl dsSalesOrders
	{
		get { return FindControl(ref _dsSalesOrders, "dsSalesOrders"); }
	}
	private Sage.Platform.Controls.IButtonControl _btnInserSalesOrder;
	public Sage.Platform.Controls.IButtonControl btnInserSalesOrder
	{
		get { return FindControl(ref _btnInserSalesOrder, "btnInserSalesOrder"); }
	}

}

</script>

<script type="text/javascript">
</script>
