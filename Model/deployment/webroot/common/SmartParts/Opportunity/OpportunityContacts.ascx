<%@ Control Language="C#" ClassName="OpportunityContacts" Inherits="Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider" %>
<%@ Register Assembly="Sage.SalesLogix.Client.GroupBuilder" Namespace="Sage.SalesLogix.Client.GroupBuilder" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.PickList" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.DependencyLookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Lookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Timeline" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.HighLevelTypes" Namespace="Sage.SalesLogix.HighLevelTypes" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.Platform.WebPortal" Namespace="Sage.Platform.WebPortal.SmartParts" TagPrefix="SalesLogix" %>
<%//------------------------------------------------------------------------
//This file was generated by a tool.  Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//------------------------------------------------------------------------ %>
  <SalesLogix:SlxGridView runat="server" ID="grdContacts" GridLines="None"
AutoGenerateColumns="false" CellPadding="4" CssClass="datagrid" PagerStyle-CssClass="gridPager"
AlternatingRowStyle-CssClass="rowdk" RowStyle-CssClass="rowlt" SelectedRowStyle-CssClass="rowSelected" ShowEmptyTable="true" EnableViewState="false"
EmptyTableRowText="<%$ resources: grdContacts.EmptyTableRowText %>"  ExpandableRows="True" ResizableColumns="True"  OnRowCommand="grdContacts_RowCommand" 
 DataKeyNames="InstanceId,Id" 
 OnRowEditing="grdContacts_RowEditing"  OnRowDeleting="grdContacts_RowDeleting" OnRowDataBound="grdContacts_RowDataBound" >
<Columns>
   <asp:TemplateField   HeaderText="<%$ resources: grdContacts.5b30bdbf-1684-417f-adf0-203a6005cc1c.ColumnHeading %>"        >
    <itemtemplate>
      <SalesLogix:PageLink runat="server" NavigateUrl="Contact"
   EntityId='<%# dtsOppContacts.getPropertyValue(Container.DataItem, "Contact.Id") %>'     Text='<%# dtsOppContacts.getPropertyValue(Container.DataItem, "Contact") %>' 
         LinkType="EntityAlias"></SalesLogix:PageLink>
     </itemtemplate></asp:TemplateField>
      <asp:BoundField DataField="Contact.Title" 
      HeaderText="<%$ resources: grdContacts.33ccb081-8a37-4251-8a54-caf8be00edff.ColumnHeading %>"          >
      </asp:BoundField>
    <asp:BoundField DataField="SalesRole" 
      HeaderText="<%$ resources: grdContacts.48c6d8d1-a5e2-4268-afaf-97d0f30414a9.ColumnHeading %>"          >
      </asp:BoundField>
    <asp:BoundField DataField="IsPrimary" 
      HeaderText="<%$ resources: grdContacts.eb316f20-4244-44f3-9e9d-933c4a92a679.ColumnHeading %>"          >
      </asp:BoundField>
    <asp:TemplateField   HeaderText="<%$ resources: grdContacts.9c3f68b2-1a93-4519-adc4-7429c342e02a.ColumnHeading %>"        >
    <itemtemplate>
   <SalesLogix:Phone runat="server" ID="grdContactscol5" DisplayAsLabel="True" Text='<%#  dtsOppContacts.getPropertyValue(Container.DataItem, "Contact.WorkPhone")  %>' CssClass=""  />
   </itemtemplate></asp:TemplateField>
    <asp:TemplateField   HeaderText="<%$ resources: grdContacts.0c625b7d-5f98-4e84-9274-84251a56dea3.ColumnHeading %>"        >
    <itemtemplate>
      <SalesLogix:Email runat="server" ID="grdContactscol6" DisplayMode="AsHyperlink" Text='<%#  dtsOppContacts.getPropertyValue(Container.DataItem, "Contact.Email")  %>' CssClass=""  />
     </itemtemplate></asp:TemplateField>
  <asp:ButtonField CommandName="Edit" 
  Text="<%$ resources: grdContacts.0f5e475a-758a-472b-956d-eedfffe6fd42.Text %>"               >
  	    </asp:ButtonField>
      
     <asp:ButtonField CommandName="Delete" 
  Text="<%$ resources: grdContacts.bc1bc56a-0958-4c37-b6bd-4e615cac00fb.Text %>"                >
  	    </asp:ButtonField>
      
   </Columns>
</SalesLogix:SlxGridView>

<script runat="server" type="text/C#">

                        private int _grdContactsdeleteColumnIndex = -2;
protected int grdContactsDeleteColumnIndex
{
	get
	{
		if (_grdContactsdeleteColumnIndex == -2)
		{
			int bias = (grdContacts.ExpandableRows) ? 1 : 0;
			_grdContactsdeleteColumnIndex = -1;
			int colcount = 0;
			foreach (DataControlField col in grdContacts.Columns)
			{
				ButtonField btn = col as ButtonField;
				if (btn != null)
				{
					if (btn.CommandName == "Delete")
					{
						_grdContactsdeleteColumnIndex = colcount + bias;
						break;
					}
				}
				colcount++;
			}
		}
		return _grdContactsdeleteColumnIndex;
	}
}

protected void grdContacts_RowDataBound(object sender, GridViewRowEventArgs e)
{
	if (e.Row.RowType == DataControlRowType.DataRow)
	{
		if ((grdContactsDeleteColumnIndex >= 0) && (grdContactsDeleteColumnIndex < e.Row.Cells.Count))
		{
			TableCell cell = e.Row.Cells[grdContactsDeleteColumnIndex];
			foreach (Control c in cell.Controls)
			{
				LinkButton btn = c as LinkButton;
				if (btn != null)
				{
					btn.Attributes.Add("onclick", "javascript: return confirm('" + Sage.Platform.WebPortal.PortalUtil.JavaScriptEncode(GetLocalResourceObject("grdContacts.bc1bc56a-0958-4c37-b6bd-4e615cac00fb.ConfirmationMessage").ToString()) + "');");
					return;
				}
			}
		}
	}
}
   
protected void grdContacts_RowCommand(object sender, GridViewCommandEventArgs e)
{
    if (e.CommandName == "Page")
        return;
    int rowIndex;
    if (Int32.TryParse(e.CommandArgument.ToString(), out rowIndex))
    {
        dtsOppContacts.SelectedIndex = rowIndex;
		object currentEntity = dtsOppContacts.Current;
        if ((currentEntity is Sage.Platform.ComponentModel.ComponentView) && !((Sage.Platform.ComponentModel.ComponentView)currentEntity).IsVirtualComponent)
            currentEntity = ((Sage.Platform.ComponentModel.ComponentView)currentEntity).Component;
		string id = String.Empty;
        //Check if this is an unpersisted entity and use its InstanceId
        if (Sage.Platform.WebPortal.PortalUtil.ObjectIsNewEntity(currentEntity))
        {
		    if (grdContacts.DataKeys[0].Values.Count > 1) {
                foreach (DictionaryEntry val in grdContacts.DataKeys[rowIndex].Values)
                {
                    if (val.Key.ToString() == "InstanceId")
                    {
                        Guid instanceId = (Guid)val.Value;
                        dtsOppContacts.SetCurrentEntityByInstanceId(instanceId);
                        id = instanceId.ToString();
		                currentEntity = dtsOppContacts.Current;
                        if ((currentEntity is Sage.Platform.ComponentModel.ComponentView) && !((Sage.Platform.ComponentModel.ComponentView)currentEntity).IsVirtualComponent)
                            currentEntity = ((Sage.Platform.ComponentModel.ComponentView)currentEntity).Component;
                    }
                }                 
            }
        }
        else
        {
            foreach (DictionaryEntry val in grdContacts.DataKeys[rowIndex].Values)
            {
                if (val.Key.ToString() != "InstanceId")
                {
                    id = val.Value.ToString();
                }
            }
        }		
        if (e.CommandName.Equals("Edit"))
        {
            if (DialogService != null)
            {
				// QFDataGrid
							DialogService.SetSpecs(400, 750, "EditOpportunityContact", string.Empty );
			                DialogService.EntityType = typeof(Sage.Entity.Interfaces.IOpportunityContact );
                DialogService.EntityID = id;
                DialogService.ShowDialog();
            }
        }
		if (e.CommandName.Equals("Delete"))
		{
            Sage.Entity.Interfaces.IOpportunity mainentity = this.BindingSource.Current as Sage.Entity.Interfaces.IOpportunity;
			if (mainentity != null)
			{
			    Sage.Entity.Interfaces.IOpportunityContact childEntity = null;
			    if((currentEntity != null) && (currentEntity is Sage.Entity.Interfaces.IOpportunityContact))
			    {
			        childEntity = (Sage.Entity.Interfaces.IOpportunityContact)currentEntity;    
			    }
			    else if (id != null)
			    {
                    childEntity = Sage.Platform.EntityFactory.GetById<Sage.Entity.Interfaces.IOpportunityContact>(id);
            }
				if(childEntity != null)
				{
			         mainentity.Contacts.Remove(childEntity);
					 mainentity.Save();
					 if((childEntity.PersistentState & Sage.Platform.Orm.Interfaces.PersistentState.New) <= 0)
					 {
					     childEntity.Delete();
					 }
					 dtsOppContacts.SelectedIndex = -1;
			    }
		    }
		}
	}
    grdContacts_refresh();
}
	
	protected void grdContacts_refresh()
	{
		if (PageWorkItem != null) {
			Sage.Platform.WebPortal.Services.IPanelRefreshService refresher = PageWorkItem.Services.Get<Sage.Platform.WebPortal.Services.IPanelRefreshService>();
			if (refresher != null)
			{
				refresher.RefreshAll();
			}
			else
			{
				Response.Redirect(Request.Url.ToString());
			}
		}
	}
	
    	protected void grdContacts_RowEditing(object sender, GridViewEditEventArgs e)
	{
		grdContacts.SelectedIndex = e.NewEditIndex;
	}
            protected void grdContacts_RowDeleting(object sender, GridViewDeleteEventArgs e)
	{
		grdContacts.SelectedIndex = -1;
	}
	</script>
 

 <SalesLogix:SmartPartToolsContainer runat="server" ID="OpportunityContacts_RTools" ToolbarLocation="right">
   <SalesLogix:LookupControl runat="server" ID="lueAssociateContact"  ToolTip="<%$ resources: lueAssociateContact.ToolTip %>" ButtonToolTip="<%$ resources: lueAssociateContact.ButtonToolTip %>" LookupEntityName="Contact" LookupEntityTypeName="Sage.Entity.Interfaces.IContact, Sage.Entity.Interfaces, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" LookupDisplayMode="ButtonOnly" AutoPostBack="true" LookupImageURL="~/ImageResource.axd?scope=global&type=Global_Images&key=plus_16x16"  >
<LookupProperties>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueAssociateContact.LookupProperties.FullName.PropertyHeader %>" PropertyName="FullName" PropertyType="" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueAssociateContact.LookupProperties.AccountName.PropertyHeader %>" PropertyName="AccountName" PropertyType="" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueAssociateContact.LookupProperties.Address.City.PropertyHeader %>" PropertyName="Address.City" PropertyType="System.String" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueAssociateContact.LookupProperties.Address.State.PropertyHeader %>" PropertyName="Address.State" PropertyType="System.String" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueAssociateContact.LookupProperties.WorkPhone.PropertyHeader %>" PropertyName="WorkPhone" PropertyType="" PropertyFormat="Phone"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueAssociateContact.LookupProperties.Email.PropertyHeader %>" PropertyName="Email" PropertyType="System.String" PropertyFormat="None"  UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
</LookupProperties>
<LookupPreFilters>
</LookupPreFilters>
</SalesLogix:LookupControl>
                 

  <SalesLogix:PageLink ID="lnkOpportunityContactsHelp" runat="server" LinkType="HelpFileName" ToolTip="<%$ resources: Portal, Help_ToolTip %>" Target="MCWebHelp" NavigateUrl="oppcontactstab.htm" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Help_16x16"></SalesLogix:PageLink> </SalesLogix:SmartPartToolsContainer>

<script runat="server" type="text/C#">
private Sage.Platform.Security.IRoleSecurityService _roleSecurityService;
/// <summary>
/// Gets or sets the role security service.
/// </summary>
/// <value>The role security service.</value>
[Sage.Platform.Application.ServiceDependency]
public Sage.Platform.Security.IRoleSecurityService RoleSecurityService
{
   set
      {
         _roleSecurityService = Sage.Platform.Application.ApplicationContext.Current.Services.Get<Sage.Platform.Security.IRoleSecurityService>(true);
      }
      get
      {
         return _roleSecurityService;
      }
}

public override Type EntityType
{
	get { return typeof(Sage.Entity.Interfaces.IOpportunity); }
}

 private Sage.Platform.WebPortal.Binding.WebEntityListBindingSource _dtsOppContacts;
public Sage.Platform.WebPortal.Binding.WebEntityListBindingSource dtsOppContacts
{ 
  get 
  {
    if (_dtsOppContacts == null)
    {
             _dtsOppContacts = new Sage.Platform.WebPortal.Binding.WebEntityListBindingSource(typeof(Sage.Entity.Interfaces.IOpportunityContact), 
	    EntityType              ,"Contacts", System.Reflection.MemberTypes.Property);
                   _dtsOppContacts.UseSmartQuery = true;
      	   	}
 	return _dtsOppContacts;
  }
}

void dtsOppContacts_OnCurrentEntitySet(object sender, EventArgs e) 
{
      if (Visible)
    { 
		if(BindingSource.Current != null)
		{
		
      
        dtsOppContacts.SourceObject = BindingSource.Current;
   		}
    }
   if (Visible)
   {   
      RegisterBindingsWithClient(dtsOppContacts);
   }
}

 



 

protected override void OnAddEntityBindings() { 
       dtsOppContacts.Bindings.Add(new Sage.Platform.WebPortal.Binding.WebEntityListBinding("Contacts", grdContacts ));
   dtsOppContacts.BindFieldNames = new String[] { "Id","Contact","Contact.Id","Contact.Title","SalesRole","IsPrimary","Contact.WorkPhone","Contact.Email" };
                
     BindingSource.OnCurrentEntitySet += new EventHandler(dtsOppContacts_OnCurrentEntitySet);
     
         
      
      
      
    }
	   
protected void lueAssociateContact_ChangeAction(object sender, EventArgs e) {
    object passThroughObject = null;
    if (lueAssociateContact.LookupResultValue != null)
    {
        Sage.Entity.Interfaces.IOpportunity parentEntity = BindingSource.Current as Sage.Entity.Interfaces.IOpportunity;
        Sage.Entity.Interfaces.IContact relatedEntity = lueAssociateContact.LookupResultValue as Sage.Entity.Interfaces.IContact;
        Sage.Platform.WebPortal.EntityPage page = (Sage.Platform.WebPortal.EntityPage)Page;
		// check for duplicates
        bool found = false;
        if ((parentEntity != null) && (relatedEntity != null))
        {
		        Sage.Entity.Interfaces.IOpportunityContact relationshipEntity = Sage.Platform.EntityFactory.Create<Sage.Entity.Interfaces.IOpportunityContact>();
		if (!found)
        {
            relationshipEntity.Opportunity = parentEntity;
            relationshipEntity.Contact = relatedEntity;
            parentEntity.Contacts.Add(relationshipEntity);
            dtsOppContacts.SelectedMember = relationshipEntity;
            if (page.ModeId.ToUpper() != "INSERT")
            {
				parentEntity.Save();
            }
		}
            if (DialogService != null)
            {
				// InsertAssociationActionItem
							DialogService.SetSpecs(400, 600, "EditOpportunityContact", string.Empty );
			                DialogService.EntityType = typeof(Sage.Entity.Interfaces.IOpportunityContact); 
                string id = string.Empty;
	
		if (Sage.Platform.WebPortal.PortalUtil.ObjectIsNewEntity(relationshipEntity))
		{
			id = relationshipEntity.InstanceId.ToString();
                        Sage.Platform.ChangeManagement.ChangeManagementEntityFactory.RegisterInstance(relationshipEntity, relationshipEntity.InstanceId);			
		}
		else
                	id = relationshipEntity.Id.ToString();
                DialogService.EntityID = id;
                DialogService.ShowDialog();
            }
            passThroughObject = relationshipEntity;
        }
    }
    e = new Sage.Platform.WebPortal.SmartParts.WebActionEventArgs(passThroughObject);
    lueAssociateContact_ChangeActionIAC(sender, e);
    

}
protected void lueAssociateContact_ChangeActionIAC(object sender, EventArgs e) {
Sage.Platform.DynamicMethod.DynamicMethodLibrary lib = Sage.Platform.Orm.DynamicMethodLibraryHelper.Instance;
Object[] methodArgs = new Object[] { FormAdapter, e };
lib.Execute("OpportunityContacts.SetDefaultOppContactInfo", methodArgs);
}

protected override void OnWireEventHandlers()
{
 base.OnWireEventHandlers();
 if (_roleSecurityService != null)
{
if (_roleSecurityService.HasAccess("ENTITIES/OPPORTUNITY/EDIT"))
{
lueAssociateContact.LookupResultValueChanged += new EventHandler(lueAssociateContact_ChangeAction);
}
}


}

protected override void OnFormBound()
{
grdContacts.Columns[6].Visible = (_roleSecurityService.HasAccess("Entities/Opportunity/Edit"));
grdContacts.Columns[7].Visible = (_roleSecurityService.HasAccess("Entities/Opportunity/Edit"));
ClientBindingMgr.RegisterBoundControl(lueAssociateContact);

if (dtsOppContacts.SourceObject == null) { dtsOppContacts.SourceObject = BindingSource.Current; }
if (dtsOppContacts.SourceObject == null) { RegisterBindingsWithClient(dtsOppContacts); }
dtsOppContacts.Bind();

if (!_roleSecurityService.HasAccess("ENTITIES/OPPORTUNITY/EDIT"))
{
lueAssociateContact.Visible = false;
}


}



public override Sage.Platform.Application.UI.ISmartPartInfo GetSmartPartInfo(Type smartPartInfoType)
{
	ToolsSmartPartInfo tinfo = new ToolsSmartPartInfo();
    	
	foreach (Control c in Controls)
	{
		SmartPartToolsContainer cont = c as SmartPartToolsContainer;
		if (cont != null)
		{
			switch (cont.ToolbarLocation)
			{
				case SmartPartToolsLocation.Right:
					foreach (Control tool in cont.Controls)
					{
											tinfo.RightTools.Add(tool);
										}
					break;
				case SmartPartToolsLocation.Center:
					foreach (Control tool in cont.Controls)
					{
						tinfo.CenterTools.Add(tool);
					}
					break;
				case SmartPartToolsLocation.Left:
					foreach (Control tool in cont.Controls)
					{
						tinfo.LeftTools.Add(tool);
					}
					break;
			}
		}
	}
	
		return tinfo;
}

private Sage.Platform.Controls.IEntityForm _formAdapter;

public Sage.Platform.Controls.IEntityForm FormAdapter
{
	get { return _formAdapter ?? (_formAdapter = new OpportunityContactsAdapter(this)); }
}

public class OpportunityContactsAdapter : Sage.Platform.WebPortal.Adapters.EntityFormAdapter, Sage.Form.Interfaces.IOpportunityContacts
{
	public OpportunityContactsAdapter(Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider smartPart)
		: base(smartPart) {}

	private Sage.Platform.Controls.IDataGridControl _grdContacts;
	public Sage.Platform.Controls.IDataGridControl grdContacts
	{
		get { return FindControl(ref _grdContacts, "grdContacts"); }
	}
	private Sage.Platform.Controls.IDataSourceControl _dtsOppContacts;
	public Sage.Platform.Controls.IDataSourceControl dtsOppContacts
	{
		get { return FindControl(ref _dtsOppContacts, "dtsOppContacts"); }
	}
	private Sage.Platform.Controls.ILookupControl _lueAssociateContact;
	public Sage.Platform.Controls.ILookupControl lueAssociateContact
	{
		get { return FindControl(ref _lueAssociateContact, "lueAssociateContact"); }
	}

	public void SetDefaultOppContactInfo(System.EventArgs e)
	{
		Sage.Platform.DynamicMethod.DynamicMethodLibrary lib = Sage.Platform.Orm.DynamicMethodLibraryHelper.Instance;
		Object[] methodArgs = new Object[] { this, e };
		lib.Execute("OpportunityContacts.SetDefaultOppContactInfo", methodArgs);
	}
}

</script>

<script type="text/javascript">
</script>
